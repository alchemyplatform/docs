{
	"x-generated-warning": "⚠️ This file is auto-generated. Do not edit manually",
	"x-fern-parameters": [
		{
			"name": "apiKey",
			"in": "path",
			"schema": {
				"type": "string",
				"default": "docs-demo",
				"description": "For higher throughput, [create your own API key](https://alchemy.com/?a=docs-demo)"
			},
			"required": true
		}
	],
	"$schema": "https://meta.open-rpc.org/",
	"openrpc": "1.2.4",
	"info": {
		"title": "Alchemy Sui JSON-RPC Specification",
		"description": "A specification of the standard JSON-RPC methods for Sui.",
		"version": "0.0.0"
	},
	"servers": [
		{
			"url": "https://sui-mainnet.alchemy-blast.com/v2",
			"name": "Sui Mainnet"
		},
		{
			"url": "https://sui-sepolia.alchemy-blast.com/v2",
			"name": "Sui Testnet"
		}
	],
	"methods": [
		{
			"name": "sui_devInspectTransactionBlock",
			"summary": "Run a transaction in dev-inspect mode",
			"description": "Runs a transaction in dev-inspect mode. This allows testing nearly any transaction with any arguments. Detailed results are provided, including execution effects and return values.  Note: gas is not charged, but usage is calculated.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "sender_address",
					"required": true,
					"description": "The address that initiates the dev inspect transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "tx_bytes",
					"required": true,
					"description": "Base64-encoded BCS transaction kind (excluding gas info).",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_price",
					"required": true,
					"description": "Simulated gas price to be used during dev inspect (gas is not deducted).",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "epoch",
					"required": true,
					"description": "The epoch context in which to perform the inspection.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Simulated transaction inspection result.",
				"schema": {
					"type": "object",
					"properties": {
						"effects": {
							"type": "object",
							"description": "The simulated effects of the transaction.",
							"properties": {
								"messageVersion": {
									"type": "string"
								},
								"status": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string"
										}
									}
								},
								"executedEpoch": {
									"type": "string"
								},
								"gasUsed": {
									"type": "object",
									"properties": {
										"computationCost": {
											"type": "string"
										},
										"storageCost": {
											"type": "string"
										},
										"storageRebate": {
											"type": "string"
										},
										"nonRefundableStorageFee": {
											"type": "string"
										}
									}
								},
								"transactionDigest": {
									"type": "string"
								},
								"mutated": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"owner": {
												"type": "object",
												"properties": {
													"AddressOwner": {
														"type": "string"
													}
												}
											},
											"reference": {
												"type": "object",
												"properties": {
													"objectId": {
														"type": "string"
													},
													"version": {
														"type": "integer"
													},
													"digest": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"gasObject": {
									"type": "object",
									"properties": {
										"owner": {
											"type": "object",
											"properties": {
												"ObjectOwner": {
													"type": "string"
												}
											}
										},
										"reference": {
											"type": "object",
											"properties": {
												"objectId": {
													"type": "string"
												},
												"version": {
													"type": "integer"
												},
												"digest": {
													"type": "string"
												}
											}
										}
									}
								},
								"eventsDigest": {
									"type": "string"
								}
							}
						},
						"events": {
							"type": "array",
							"description": "Events that would be emitted if the transaction were run.",
							"items": {
								"type": "object"
							}
						},
						"error": {
							"type": [
								"string",
								"null"
							],
							"description": "Execution error message, if any."
						},
						"results": {
							"type": "array",
							"description": "Return values and execution results for Move calls.",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Dev Inspect SUI transaction",
					"params": [
						{
							"name": "sender_address",
							"value": "0x8d59ac375d6bea13560d6ddcf33a3d6f45fa9f5b1be6819974242480b678711a"
						},
						{
							"name": "tx_bytes",
							"value": "AAPDdSGd1K6HApnQ1UMmEIOXvtBFDAEFAAAAAAAAADDat41YRxp4SW63HCxud7omjwOQOg6huYDqcvdFeE95OGaVEnTPlWWtjAYAAAAAACBCRYDRhl1WPPDl5P0n7fK6uWgf"
						},
						{
							"name": "gas_price",
							"value": "10"
						},
						{
							"name": "epoch",
							"value": "1"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"effects": {
								"messageVersion": "v1",
								"status": {
									"status": "success"
								},
								"executedEpoch": "0",
								"gasUsed": {
									"computationCost": "100",
									"storageCost": "100",
									"storageRebate": "10",
									"nonRefundableStorageFee": "0"
								},
								"transactionDigest": "76gyHCk7FRrGACRqXM7Ybj5uJLtAzgEMJ5P9CeEzxZSG",
								"mutated": [
									{
										"owner": {
											"AddressOwner": "0x2f5c543d716ae43d453deb3b199bbdaf1bc7030c7682f87703dce431248fede0"
										},
										"reference": {
											"objectId": "0x2c43805d0d6f5402a7ad0da5bdec549c7cdea06bc4a1d339a22521eea933b889",
											"version": 2,
											"digest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm"
										}
									},
									{
										"owner": {
											"AddressOwner": "0x67c6d31c6c970e567f03ef67d811a4f843665b8de3f282fa48b3e0103ba9bbed"
										},
										"reference": {
											"objectId": "0x6a06153b9fc486e101f0e9e2703ac8666d06aecc4ddf7e7926a361970c65a5b1",
											"version": 2,
											"digest": "GdfET1avZReDftpJNB8LSuHJ2cKUheSbEaLMzuPVXHsM"
										}
									}
								],
								"gasObject": {
									"owner": {
										"ObjectOwner": "0x2f5c543d716ae43d453deb3b199bbdaf1bc7030c7682f87703dce431248fede0"
									},
									"reference": {
										"objectId": "0x2c43805d0d6f5402a7ad0da5bdec549c7cdea06bc4a1d339a22521eea933b889",
										"version": 2,
										"digest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm"
									}
								},
								"eventsDigest": "6kerMphN4S5QTfd9TAhwMiFq1q9c2YwfpheBfWm85vUq"
							},
							"events": []
						}
					}
				}
			]
		},
		{
			"name": "sui_dryRunTransactionBlock",
			"summary": "Simulate execution of a transaction without committing it",
			"description": "Executes a transaction in dry-run mode, which simulates transaction execution and returns expected effects, gas cost summary, object changes, and events — without actually committing to chain.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "tx_bytes",
					"required": true,
					"description": "Base64-encoded BCS `TransactionKind`.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Simulated result of executing the transaction.",
				"schema": {
					"type": "object",
					"properties": {
						"digest": {
							"type": "string",
							"description": "The digest of the simulated transaction."
						},
						"transaction": {
							"type": "object",
							"description": "Full transaction object with data and signatures."
						},
						"rawTransaction": {
							"type": "string",
							"description": "Base64-encoded raw transaction blob."
						},
						"effects": {
							"type": "object",
							"description": "The transaction effects as they would occur on-chain.",
							"properties": {
								"messageVersion": {
									"type": "string"
								},
								"status": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string"
										}
									}
								},
								"executedEpoch": {
									"type": "string"
								},
								"gasUsed": {
									"type": "object",
									"properties": {
										"computationCost": {
											"type": "string"
										},
										"storageCost": {
											"type": "string"
										},
										"storageRebate": {
											"type": "string"
										},
										"nonRefundableStorageFee": {
											"type": "string"
										}
									}
								},
								"transactionDigest": {
									"type": "string"
								},
								"mutated": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"owner": {
												"type": "object",
												"properties": {
													"AddressOwner": {
														"type": "string"
													}
												}
											},
											"reference": {
												"type": "object",
												"properties": {
													"objectId": {
														"type": "string"
													},
													"version": {
														"type": "integer"
													},
													"digest": {
														"type": "string"
													}
												}
											}
										}
									}
								},
								"gasObject": {
									"type": "object",
									"properties": {
										"owner": {
											"type": "object",
											"properties": {
												"ObjectOwner": {
													"type": "string"
												}
											}
										},
										"reference": {
											"type": "object",
											"properties": {
												"objectId": {
													"type": "string"
												},
												"version": {
													"type": "integer"
												},
												"digest": {
													"type": "string"
												}
											}
										}
									}
								},
								"eventsDigest": {
									"type": "string"
								}
							}
						},
						"balanceChanges": {
							"type": "array",
							"description": "List of balance changes resulting from the simulation.",
							"items": {
								"type": "object"
							}
						},
						"objectChanges": {
							"type": "array",
							"description": "List of object-level changes that would occur.",
							"items": {
								"type": "object"
							}
						},
						"events": {
							"type": "array",
							"description": "Events that would be emitted during execution.",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Dry run example transaction",
					"params": [
						{
							"name": "tx_bytes",
							"value": "AAPDdSGd1K6HApnQ1UMmEIOXvtBFDAEFAAAAAAAAADDat41YRxp4SW63HCxud7omjwOQOg6huYDqcvdFeE95OGaVEnTPlWWtjAYAAAAAACBCRYDRhl1WPPDl5P0n7fK6uWgf/Leb4oRS1KAESZ/KmwEAAAAAAAAAAQAAAAAAAAA="
						}
					],
					"result": {
						"name": "result",
						"value": {
							"digest": "DNtx7EmGqSywGbnSC1CKoqmBFEXGvApXpRVt6bU855xP",
							"effects": {
								"messageVersion": "v1",
								"status": {
									"status": "success"
								},
								"executedEpoch": "0",
								"gasUsed": {
									"computationCost": "100",
									"storageCost": "100",
									"storageRebate": "10",
									"nonRefundableStorageFee": "0"
								},
								"transactionDigest": "8UExPV121BEfWkbymSPDYhh23rVNh3MSWtC5juJ9JGMJ",
								"mutated": [
									{
										"owner": {
											"AddressOwner": "0x61fbb5b4f342a40bdbf87fe4a946b9e38d18cf8ffc7b0000b975175c7b6a9576"
										},
										"reference": {
											"objectId": "0xe8d8c7ce863f313da3dbd92a83ef26d128b88fe66bf26e0e0d09cdaf727d1d84",
											"version": 2,
											"digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
										}
									},
									{
										"owner": {
											"AddressOwner": "0x7ba91ddc7e717cf708c937060f04048736ec33fb1746d999a5e58cd5c677ed80"
										},
										"reference": {
											"objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
											"version": 2,
											"digest": "Cv7n2YaM7Am1ssZGu4khsFkcKHnpgVhwFCSs4kLjrtLW"
										}
									}
								],
								"gasObject": {
									"owner": {
										"ObjectOwner": "0x61fbb5b4f342a40bdbf87fe4a946b9e38d18cf8ffc7b0000b975175c7b6a9576"
									},
									"reference": {
										"objectId": "0xe8d8c7ce863f313da3dbd92a83ef26d128b88fe66bf26e0e0d09cdaf727d1d84",
										"version": 2,
										"digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
									}
								},
								"eventsDigest": "55TNn3v5vpuXjQfjqamw76P9GZD522pumo4NuT7RYeFB"
							},
							"objectChanges": [
								{
									"type": "transferred",
									"sender": "0x61fbb5b4f342a40bdbf87fe4a946b9e38d18cf8ffc7b0000b975175c7b6a9576",
									"recipient": {
										"AddressOwner": "0x7ba91ddc7e717cf708c937060f04048736ec33fb1746d999a5e58cd5c677ed80"
									},
									"objectType": "0x2::example::Object",
									"objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
									"version": "2",
									"digest": "B3xLC8EbyvTxy5pgiwTNUzHLa6kS7uwD6sZdErKB8F8f"
								}
							],
							"events": []
						}
					}
				}
			]
		},
		{
			"name": "sui_executeTransactionBlock",
			"summary": "Execute a transaction with a serialized signature",
			"description": "Executes a BCS-serialized transaction on-chain and waits for the result. Supports different execution modes such as waiting for local execution or just effects.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "tx_bytes",
					"required": true,
					"description": "BCS serialized transaction data bytes (without type tag), as a base64 string.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "signature",
					"required": true,
					"description": "Base64-encoded signature bytes (`flag || signature || pubkey`), committed to the intent message.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Options to control which parts of the response are returned.",
					"schema": {
						"type": "object",
						"properties": {
							"showInput": {
								"type": "boolean"
							},
							"showRawInput": {
								"type": "boolean"
							},
							"showEffects": {
								"type": "boolean"
							},
							"showEvents": {
								"type": "boolean"
							},
							"showObjectChanges": {
								"type": "boolean"
							},
							"showBalanceChanges": {
								"type": "boolean"
							},
							"showRawEffects": {
								"type": "boolean"
							}
						}
					}
				},
				{
					"name": "request_type",
					"required": false,
					"description": "Defines whether to wait for effects, local execution, or neither.",
					"schema": {
						"type": "string",
						"enum": [
							"WaitForEffectsCert",
							"WaitForLocalExecution"
						]
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The execution response for the transaction block.",
				"schema": {
					"type": "object",
					"properties": {
						"digest": {
							"type": "string",
							"description": "Digest of the transaction."
						},
						"transaction": {
							"type": "object",
							"description": "The full transaction input data, including sender, gas, and instructions."
						},
						"rawTransaction": {
							"type": "string",
							"description": "Base64-encoded BCS transaction bytes."
						},
						"effects": {
							"type": "object",
							"description": "The computed effects for the transaction block."
						},
						"events": {
							"type": "array",
							"description": "Any emitted events during transaction execution.",
							"items": {
								"type": "object"
							}
						},
						"objectChanges": {
							"type": "array",
							"description": "Changes to objects triggered by the transaction.",
							"items": {
								"type": "object"
							}
						},
						"balanceChanges": {
							"type": "array",
							"description": "Changes to balances triggered by the transaction.",
							"items": {
								"type": "object"
							}
						},
						"errors": {
							"type": "array",
							"description": "List of any execution errors encountered.",
							"items": {
								"type": "string"
							}
						},
						"checkpoint": {
							"type": "string",
							"nullable": true,
							"description": "The checkpoint number when the transaction was finalized."
						},
						"confirmedLocalExecution": {
							"type": "boolean",
							"nullable": true,
							"description": "Whether the transaction was confirmed to have executed locally."
						},
						"rawEffects": {
							"type": "array",
							"nullable": true,
							"description": "BCS-encoded transaction effects.",
							"items": {
								"type": "string"
							}
						},
						"timestampMs": {
							"type": "string",
							"nullable": true,
							"description": "The timestamp of transaction execution in milliseconds."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Execute transaction block",
					"params": [
						{
							"name": "tx_bytes",
							"value": "AAACACBqEB6aOvXIBwES+Ahkizbvv43uihqC3kbZUE6WoRCKFwEAjvdvVsOZYzousxC8qRJOXy84znOeqsu2YAaIgE4HhEgCAAAAAAAAACB9w3+ufZMpihJFwxtCBojBaGy00TVtFxgN2C6TpIPFqwEBAQEBAAEAAAS0l6kWtGVmCaf6gnoJGE1vR2gdO6dM4NejbGSysfiHAZ+Q9/hmzCnfsdpjc86U+dldylpA9OF2mRjuv5+64AvTAgAAAAAAAAAgjleHL0UiRGjh/BfIFHCJ3EMY/dQA22c2TvNQyVJnbYUEtJepFrRlZgmn+oJ6CRhNb0doHTunTODXo2xksrH4hwoAAAAAAAAAoIYBAAAAAAAA"
						},
						{
							"name": "signature",
							"value": "AKD4XdltkCyBi1Heb4EJJ3lzuV3F4u7+CYeaE+Fd7qXpaT17yd4tHWjMf4CWq3TuXBLxTpkc2MV39P6p7eMV8QnqvbuA0Q1Bqu4RHV3JPpqmH+C527hWJGUBOZN1j9sg8w=="
						},
						{
							"name": "options",
							"value": {
								"showInput": true,
								"showRawInput": true,
								"showEffects": true,
								"showEvents": true,
								"showObjectChanges": true,
								"showBalanceChanges": true,
								"showRawEffects": false
							}
						},
						{
							"name": "request_type",
							"value": "WaitForLocalExecution"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"digest": "Gx7V6EteEAqSsptc1kbi1nUEMP7mhr4qV2cYS7JjzbBd",
							"confirmedLocalExecution": true,
							"checkpoint": null,
							"timestampMs": null
						}
					}
				}
			]
		},
		{
			"name": "sui_getCheckpoint",
			"summary": "Return a checkpoint",
			"description": "Retrieves a checkpoint by its digest or sequence number.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "id",
					"required": true,
					"description": "Checkpoint identifier — can be a digest or a sequence number (both strings).",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The checkpoint data for the specified ID.",
				"schema": {
					"type": "object",
					"required": [
						"epoch",
						"sequenceNumber",
						"digest",
						"networkTotalTransactions",
						"previousDigest",
						"epochRollingGasCostSummary",
						"timestampMs",
						"transactions",
						"checkpointCommitments",
						"validatorSignature"
					],
					"properties": {
						"epoch": {
							"type": "string"
						},
						"sequenceNumber": {
							"type": "string"
						},
						"digest": {
							"type": "string"
						},
						"networkTotalTransactions": {
							"type": "string"
						},
						"previousDigest": {
							"type": "string"
						},
						"epochRollingGasCostSummary": {
							"type": "object",
							"properties": {
								"computationCost": {
									"type": "string"
								},
								"storageCost": {
									"type": "string"
								},
								"storageRebate": {
									"type": "string"
								},
								"nonRefundableStorageFee": {
									"type": "string"
								}
							}
						},
						"timestampMs": {
							"type": "string"
						},
						"transactions": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"checkpointCommitments": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"validatorSignature": {
							"type": "string"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Valid response for checkpoint",
					"params": [
						{
							"name": "id",
							"value": "1000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"epoch": "0",
							"sequenceNumber": "1000",
							"digest": "BE4JixC94sDtCgHJZruyk7QffZnWDFvM2oFjC8XtChET",
							"networkTotalTransactions": "1001",
							"previousDigest": "41nPNZWHvvajmBQjX3GbppsgGZDEB6DhN4UxPkjSYRRj",
							"epochRollingGasCostSummary": {
								"computationCost": "0",
								"storageCost": "0",
								"storageRebate": "0",
								"nonRefundableStorageFee": "0"
							},
							"timestampMs": "1681393657483",
							"transactions": [
								"9NnjyPG8V2TPCSbNE391KDyge42AwV3vUD7aNtQQ9eqS"
							],
							"checkpointCommitments": [],
							"validatorSignature": "r8/5+Rm7niIlndcnvjSJ/vZLPrH3xY/ePGYTvrVbTascoQSpS+wsGlC+bQBpzIwA"
						}
					}
				}
			]
		},
		{
			"name": "sui_getCheckpoints",
			"summary": "Return paginated list of checkpoints",
			"description": "Retrieves a paginated list of checkpoints. Results can be ordered ascending or descending by sequence number.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "cursor",
					"required": false,
					"description": "Optional paging cursor. If provided, results start from the item after the given cursor.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of items to return.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "descending_order",
					"required": false,
					"description": "If true, results are returned in descending order. Defaults to false.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Paginated list of checkpoints.",
				"schema": {
					"type": "object",
					"required": [
						"data",
						"nextCursor",
						"hasNextPage"
					],
					"properties": {
						"data": {
							"type": "array",
							"description": "List of checkpoint objects.",
							"items": {
								"type": "object",
								"required": [
									"epoch",
									"sequenceNumber",
									"digest",
									"networkTotalTransactions",
									"previousDigest",
									"epochRollingGasCostSummary",
									"timestampMs",
									"transactions",
									"checkpointCommitments",
									"validatorSignature"
								],
								"properties": {
									"epoch": {
										"type": "string"
									},
									"sequenceNumber": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									},
									"networkTotalTransactions": {
										"type": "string"
									},
									"previousDigest": {
										"type": "string"
									},
									"epochRollingGasCostSummary": {
										"type": "object",
										"properties": {
											"computationCost": {
												"type": "string"
											},
											"storageCost": {
												"type": "string"
											},
											"storageRebate": {
												"type": "string"
											},
											"nonRefundableStorageFee": {
												"type": "string"
											}
										}
									},
									"timestampMs": {
										"type": "string"
									},
									"transactions": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"checkpointCommitments": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"validatorSignature": {
										"type": "string"
									}
								}
							}
						},
						"nextCursor": {
							"type": "string"
						},
						"hasNextPage": {
							"type": "boolean"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get 1 checkpoint in descending order starting from cursor 10",
					"params": [
						{
							"name": "cursor",
							"value": "10"
						},
						{
							"name": "limit",
							"value": 1
						},
						{
							"name": "descending_order",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [
								{
									"epoch": "0",
									"sequenceNumber": "9",
									"digest": "4XvAN2hfEtTgFfTLA5jaWn96rZ84hAyLtnzRKdsRDXHC",
									"networkTotalTransactions": "10",
									"previousDigest": "CxsCPaoZ2BGNACeFFdeDmfiRXxtyA484gBkL4N5JxXDW",
									"epochRollingGasCostSummary": {
										"computationCost": "0",
										"storageCost": "0",
										"storageRebate": "0",
										"nonRefundableStorageFee": "0"
									},
									"timestampMs": "1681392134159",
									"transactions": [
										"D2XXLRxxvYLsTTmN8ZZZhYikjKaRRPyWWC8AJEsvwvyE"
									],
									"checkpointCommitments": [],
									"validatorSignature": "pH/sPzHYdSXJrDz2U5XY86edyshhbZ1hFQ3SMWpXSSxdiC+/9xtuVHqTu6C+h67n"
								}
							],
							"nextCursor": "9",
							"hasNextPage": true
						}
					}
				}
			]
		},
		{
			"name": "sui_getLatestCheckpointSequenceNumber",
			"summary": "Return the sequence number of the latest checkpoint",
			"description": "Retrieves the sequence number of the most recently executed checkpoint.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The sequence number of the latest checkpoint.",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Latest checkpoint sequence number",
					"params": [],
					"result": {
						"name": "result",
						"value": "143498509"
					}
				}
			]
		},
		{
			"name": "sui_getMoveFunctionArgTypes",
			"summary": "Get argument types of a Move function",
			"description": "Returns the list of argument types for a specified Move function within a Move module. The response is based on the normalized types, and includes descriptors like \"Pure\" or \"Object\" with reference semantics.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "The package object ID of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "module",
					"required": true,
					"description": "The name of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "function",
					"required": true,
					"description": "The name of the Move function.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A list of argument types expected by the Move function.",
				"schema": {
					"type": "array",
					"items": {
						"oneOf": [
							{
								"type": "string",
								"enum": [
									"Pure"
								]
							},
							{
								"type": "object",
								"properties": {
									"Object": {
										"type": "string",
										"enum": [
											"ByImmutableReference",
											"ByMutableReference",
											"ByValue"
										]
									}
								}
							}
						]
					}
				}
			},
			"examples": [
				{
					"name": "Get Move function argument types",
					"params": [
						{
							"name": "package",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						},
						{
							"name": "module",
							"value": "bag"
						},
						{
							"name": "function",
							"value": "borrow"
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"Object": "ByImmutableReference"
							},
							"Pure"
						]
					}
				}
			]
		},
		{
			"name": "sui_getNormalizedMoveFunction",
			"summary": "Get normalized representation of a Move function",
			"description": "Returns a structured and fully resolved representation of the specified Move function, including its visibility, entry status, parameter and return types, and type parameter constraints.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "The package object ID of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "module_name",
					"required": true,
					"description": "The name of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "function_name",
					"required": true,
					"description": "The name of the Move function.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Normalized representation of the requested Move function.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get normalized Move function",
					"params": [
						{
							"name": "package",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						},
						{
							"name": "module_name",
							"value": "bag"
						},
						{
							"name": "function_name",
							"value": "borrow"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"visibility": "Public",
							"isEntry": false,
							"typeParameters": [
								{
									"abilities": [
										"Copy",
										"Drop",
										"Store"
									]
								},
								{
									"abilities": [
										"Store"
									]
								}
							],
							"parameters": [
								{
									"Reference": {
										"Struct": {
											"address": "0x2",
											"module": "bag",
											"name": "Bag",
											"typeArguments": []
										}
									}
								},
								{
									"TypeParameter": 0
								}
							],
							"return": [
								{
									"Reference": {
										"TypeParameter": 1
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "sui_getNormalizedMoveModule",
			"summary": "Get normalized representation of a Move module",
			"description": "Returns a structured representation of a Move module, including all functions, structs, type parameters, visibility, and associated metadata.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "The package object ID of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "module_name",
					"required": true,
					"description": "The name of the Move module.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The normalized representation of the requested Move module.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get normalized Move module",
					"params": [
						{
							"name": "package",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						},
						{
							"name": "module_name",
							"value": "bag"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"fileFormatVersion": 6,
							"address": "0x2",
							"name": "bag",
							"friends": [],
							"structs": {
								"Bag": {
									"abilities": {
										"abilities": [
											"Store",
											"Key"
										]
									},
									"typeParameters": [],
									"fields": [
										{
											"name": "id",
											"type": {
												"Struct": {
													"address": "0x2",
													"module": "object",
													"name": "UID",
													"typeArguments": []
												}
											}
										},
										{
											"name": "size",
											"type": "U64"
										}
									]
								}
							},
							"exposedFunctions": {
								"borrow": {
									"visibility": "Public",
									"isEntry": false,
									"typeParameters": [
										{
											"abilities": [
												"Copy",
												"Drop",
												"Store"
											]
										},
										{
											"abilities": [
												"Store"
											]
										}
									],
									"parameters": [
										{
											"Reference": {
												"Struct": {
													"address": "0x2",
													"module": "bag",
													"name": "Bag",
													"typeArguments": []
												}
											}
										},
										{
											"TypeParameter": 0
										}
									],
									"return": [
										{
											"Reference": {
												"TypeParameter": 1
											}
										}
									]
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "sui_getNormalizedMoveModulesByPackage",
			"summary": "Get normalized representations of all Move modules in a package",
			"description": "Returns a mapping of module names to their normalized structured representations for all modules  contained within the specified package.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "The object ID of the package to query.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A map of module names to their normalized module definitions.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get normalized modules by package",
					"params": [
						{
							"name": "package",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"address": {
								"fileFormatVersion": 6,
								"address": "0x2",
								"name": "address",
								"friends": [],
								"structs": {},
								"exposedFunctions": {
									"from_ascii_bytes": {
										"visibility": "Public",
										"isEntry": false,
										"typeParameters": [],
										"parameters": [
											{
												"Reference": {
													"Vector": "U8"
												}
											}
										],
										"return": [
											"Address"
										]
									},
									"from_bytes": {
										"visibility": "Public",
										"isEntry": false,
										"typeParameters": [],
										"parameters": [
											{
												"Vector": "U8"
											}
										],
										"return": [
											"Address"
										]
									},
									"to_string": {
										"visibility": "Public",
										"isEntry": false,
										"typeParameters": [],
										"parameters": [
											"Address"
										],
										"return": [
											{
												"Struct": {
													"address": "0x1",
													"module": "string",
													"name": "String",
													"typeArguments": []
												}
											}
										]
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "sui_getNormalizedMoveStruct",
			"summary": "Get a normalized representation of a Move struct",
			"description": "Returns the normalized, structured representation of a specified Move struct within a module of a given package. This includes information about type parameters, abilities, and field types.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "The package object ID containing the struct.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "module_name",
					"required": true,
					"description": "The name of the module containing the struct.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "struct_name",
					"required": true,
					"description": "The name of the Move struct to query.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A structured definition of the Move struct.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get normalized struct definition",
					"params": [
						{
							"name": "package",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						},
						{
							"name": "module_name",
							"value": "bag"
						},
						{
							"name": "struct_name",
							"value": "Bag"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"abilities": {
								"abilities": [
									"Store",
									"Key"
								]
							},
							"typeParameters": [],
							"fields": [
								{
									"name": "id",
									"type": {
										"Struct": {
											"address": "0x2",
											"module": "object",
											"name": "UID",
											"typeArguments": []
										}
									}
								},
								{
									"name": "size",
									"type": "U64"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "sui_getObject",
			"summary": "Return the object information for a specified object",
			"description": "Fetches on-chain data for a single object using its object ID. You can control the level of detail returned by passing additional options like showing content, type, or owner.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "object_id",
					"required": true,
					"description": "The ID of the queried object.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Options for specifying the content to be returned.",
					"schema": {
						"type": "object",
						"properties": {
							"showType": {
								"type": "boolean"
							},
							"showOwner": {
								"type": "boolean"
							},
							"showPreviousTransaction": {
								"type": "boolean"
							},
							"showDisplay": {
								"type": "boolean"
							},
							"showContent": {
								"type": "boolean"
							},
							"showBcs": {
								"type": "boolean"
							},
							"showStorageRebate": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The result containing object data or error information.",
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "object",
							"nullable": true,
							"properties": {
								"objectId": {
									"type": "string"
								},
								"version": {
									"type": "string"
								},
								"digest": {
									"type": "string"
								},
								"type": {
									"type": "string"
								},
								"owner": {
									"type": "object",
									"properties": {
										"AddressOwner": {
											"type": "string"
										}
									}
								},
								"previousTransaction": {
									"type": "string"
								},
								"storageRebate": {
									"type": "string"
								},
								"content": {
									"type": "object",
									"properties": {
										"dataType": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"hasPublicTransfer": {
											"type": "boolean"
										},
										"fields": {
											"type": "object",
											"properties": {
												"balance": {
													"type": "string"
												},
												"id": {
													"type": "object",
													"properties": {
														"id": {
															"type": "string"
														}
													}
												}
											}
										}
									}
								}
							}
						},
						"error": {
							"type": "object",
							"nullable": true,
							"description": "Error details if the object could not be retrieved."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get object data by ID",
					"params": [
						{
							"name": "object_id",
							"value": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
						},
						{
							"name": "options",
							"value": {
								"showType": true,
								"showOwner": true,
								"showPreviousTransaction": true,
								"showDisplay": false,
								"showContent": true,
								"showBcs": false,
								"showStorageRebate": true
							}
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": {
								"objectId": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809",
								"version": "1",
								"digest": "33K5ZXJ3RyubvYaHuEnQ1QXmmbhgtrFwp199dnEbL4n7",
								"type": "0x2::coin::Coin<0x2::sui::SUI>",
								"owner": {
									"AddressOwner": "0xc8ec1d5b84dd6289e193b9f88de4a994358c9f856135236c3e75a925e1c77ac3"
								},
								"previousTransaction": "5PLgmQye6rraDYqpV3npV6H1cUXoJZgJh1dPCyRa3WCv",
								"storageRebate": "100",
								"content": {
									"dataType": "moveObject",
									"type": "0x2::coin::Coin<0x2::sui::SUI>",
									"hasPublicTransfer": true,
									"fields": {
										"balance": "100000000",
										"id": {
											"id": "0x53e4567ccafa5f36ce84c80aa8bc9be64e0d5ae796884274aef3005ae6733809"
										}
									}
								}
							},
							"error": null
						}
					}
				}
			]
		},
		{
			"name": "sui_getTotalTransactionBlocks",
			"summary": "Return the total number of transactions",
			"description": "Returns the total number of transaction blocks known to the server.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The total number of transaction blocks.",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Total transaction blocks example",
					"params": [],
					"result": {
						"name": "result",
						"value": "3541747040"
					}
				}
			]
		},
		{
			"name": "sui_getTransactionBlock",
			"summary": "Return the transaction response object.",
			"description": "Returns detailed information about a transaction block by digest, including input, effects, events, and timestamp.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "digest",
					"required": true,
					"description": "The digest of the queried transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "options",
					"required": true,
					"description": "Options to control which fields are returned.",
					"schema": {
						"type": "object",
						"properties": {
							"showInput": {
								"type": "boolean"
							},
							"showRawInput": {
								"type": "boolean"
							},
							"showEffects": {
								"type": "boolean"
							},
							"showEvents": {
								"type": "boolean"
							},
							"showObjectChanges": {
								"type": "boolean"
							},
							"showBalanceChanges": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The transaction block response.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get transaction block example",
					"params": [
						{
							"name": "digest",
							"value": "2pDaMQ1uTz1EEbfiZcTUoyRUP22vVqUpZowgZxLXdGUG"
						},
						{
							"name": "options",
							"value": {
								"showInput": true,
								"showRawInput": false,
								"showEffects": true,
								"showEvents": true,
								"showObjectChanges": false,
								"showBalanceChanges": false
							}
						}
					],
					"result": {
						"name": "result",
						"value": {
							"digest": "2pDaMQ1uTz1EEbfiZcTUoyRUP22vVqUpZowgZxLXdGUG",
							"transaction": {
								"data": {
									"messageVersion": "v1",
									"transaction": {
										"kind": "ProgrammableTransaction",
										"inputs": [
											{
												"type": "object",
												"objectType": "immOrOwnedObject",
												"objectId": "0xd9f6db5103a374a81a161549ac2e0f044e67df0c2d3f5a551069c272c592ca1f",
												"version": "541127851",
												"digest": "6AEizdtWki8Zsukh1fkMQNZcLAeYnB7xqUegvuhXTrFZ"
											},
											{
												"type": "pure",
												"valueType": "u64",
												"value": "4000000000000000"
											},
											{
												"type": "pure",
												"valueType": "address",
												"value": "0x935029ca5219502a47ac9b69f556ccf6e2198b5e7815cf50f68846f723739cbd"
											}
										],
										"transactions": [
											{
												"SplitCoins": [
													{
														"Input": 0
													},
													[
														{
															"Input": 1
														}
													]
												]
											},
											{
												"TransferObjects": [
													[
														{
															"Result": 0
														},
														{
															"Input": 2
														}
													]
												]
											}
										]
									},
									"sender": "0xac5bceec1b789ff840d7d4e6ce4ce61c90d190a7f8c4f4ddf0bff6ee2413c33c",
									"gasData": {
										"payment": [
											{
												"objectId": "0x0466a9a57add505b7b85ac485054f9b71f574f4504d9c70acd8f73ef11e0dc30",
												"version": 541127851,
												"digest": "4zPZiohyjWYFtUDnvGCqFxrjV8K8rVaR6r2dZwsm2L2k"
											},
											{
												"objectId": "0x1cc196b6cf0618880961593cea61043bf211312faff296dd3e6417fd130692c8",
												"version": 546760283,
												"digest": "9venMS9EFSATK4adgcgrLLZkGNzdg3YHgmTfxtr7cKAQ"
											}
										],
										"owner": "0xac5bceec1b789ff840d7d4e6ce4ce61c90d190a7f8c4f4ddf0bff6ee2413c33c",
										"price": "740",
										"budget": "3818976"
									}
								},
								"txSignatures": [
									"AMpIvSOCvmDhxtfRmUIP1+wHS1P7uNjG/nbbXKgBO9lQ9TxSDexchRpp6gj1nkIu0mdrW1c5yT+1VFH78nHvXgiT5a1NeBxNOvDF96KyiveJ7afzY9L9GdrGlIwUCJLiDA=="
								]
							},
							"effects": {
								"status": {
									"status": "success"
								},
								"executedEpoch": "757",
								"gasUsed": {
									"computationCost": "740000",
									"storageCost": "3663200",
									"storageRebate": "3280464",
									"nonRefundableStorageFee": "33136"
								},
								"modifiedAtVersions": [
									{
										"objectId": "0x0466a9a57add505b7b85ac485054f9b71f574f4504d9c70acd8f73ef11e0dc30",
										"sequenceNumber": "541127851"
									},
									{
										"objectId": "0x1cc196b6cf0618880961593cea61043bf211312faff296dd3e6417fd130692c8",
										"sequenceNumber": "546760283"
									},
									{
										"objectId": "0xd9f6db5103a374a81a161549ac2e0f044e67df0c2d3f5a551069c272c592ca1f",
										"sequenceNumber": "541127851"
									}
								],
								"created": [
									{
										"owner": {
											"AddressOwner": "0x935029ca5219502a47ac9b69f556ccf6e2198b5e7815cf50f68846f723739cbd"
										},
										"reference": {
											"objectId": "0x6f0a2c043864007581261b041d4bf68ae6da5a821f6c500f86f0c49555fa5253",
											"version": 546760284,
											"digest": "HQSEjogwi8yhLm9yfABqXYXni3Z2xYBs8NM5PDVqxS3j"
										}
									}
								],
								"mutated": [
									{
										"owner": {
											"AddressOwner": "0xac5bceec1b789ff840d7d4e6ce4ce61c90d190a7f8c4f4ddf0bff6ee2413c33c"
										},
										"reference": {
											"objectId": "0x0466a9a57add505b7b85ac485054f9b71f574f4504d9c70acd8f73ef11e0dc30",
											"version": 546760284,
											"digest": "CiJgoU28EjjE31XCbwCn1EhjDr7PABKu4FeRwKTkR8ax"
										}
									},
									{
										"owner": {
											"AddressOwner": "0xac5bceec1b789ff840d7d4e6ce4ce61c90d190a7f8c4f4ddf0bff6ee2413c33c"
										},
										"reference": {
											"objectId": "0xd9f6db5103a374a81a161549ac2e0f044e67df0c2d3f5a551069c272c592ca1f",
											"version": 546760284,
											"digest": "6UX8kadeV2g8BEJHHCxviqeQyejaPoJa1sVKDBCgz2kz"
										}
									}
								],
								"deleted": [
									{
										"objectId": "0x1cc196b6cf0618880961593cea61043bf211312faff296dd3e6417fd130692c8",
										"version": 546760284,
										"digest": "7gyGAp71YXQRoxmFBaHxofQXAipvgHyBKPyxmdSJxyvz"
									}
								],
								"gasObject": {
									"owner": {
										"AddressOwner": "0xac5bceec1b789ff840d7d4e6ce4ce61c90d190a7f8c4f4ddf0bff6ee2413c33c"
									},
									"reference": {
										"objectId": "0x0466a9a57add505b7b85ac485054f9b71f574f4504d9c70acd8f73ef11e0dc30",
										"version": 546760284,
										"digest": "CiJgoU28EjjE31XCbwCn1EhjDr7PABKu4FeRwKTkR8ax"
									}
								},
								"dependencies": [
									"3ouqWx1G3NgVmDewUmp2VNXuoHUgFSCtX7o2ok7DELiK",
									"4Dre3aB1q4Y8ofehS76bCmPDTCcymdeVQuw9HMgg6bVQ"
								]
							},
							"events": [],
							"timestampMs": "1746765615941",
							"checkpoint": "143012710"
						}
					}
				}
			]
		},
		{
			"name": "sui_multiGetObjects",
			"summary": "Return the object data for a list of objects",
			"description": "Retrieves on-chain metadata and content for multiple object IDs. The request may include display, owner, and type information as specified via options.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "object_ids",
					"required": true,
					"description": "The IDs of the queried objects.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Options for specifying the content to be returned.",
					"schema": {
						"type": "object",
						"properties": {
							"showType": {
								"type": "boolean"
							},
							"showOwner": {
								"type": "boolean"
							},
							"showPreviousTransaction": {
								"type": "boolean"
							},
							"showDisplay": {
								"type": "boolean"
							},
							"showContent": {
								"type": "boolean"
							},
							"showBcs": {
								"type": "boolean"
							},
							"showStorageRebate": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A list of object data returned from the chain.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"data": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									},
									"type": {
										"type": "string"
									},
									"owner": {
										"type": "object",
										"properties": {
											"AddressOwner": {
												"type": "string"
											}
										}
									},
									"previousTransaction": {
										"type": "string"
									},
									"storageRebate": {
										"type": "string"
									},
									"content": {
										"type": "object",
										"properties": {
											"dataType": {
												"type": "string"
											},
											"type": {
												"type": "string"
											},
											"hasPublicTransfer": {
												"type": "boolean"
											},
											"fields": {
												"type": "object",
												"properties": {
													"balance": {
														"type": "string"
													},
													"id": {
														"type": "object",
														"properties": {
															"id": {
																"type": "string"
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Fetch multiple objects",
					"params": [
						{
							"name": "object_ids",
							"value": [
								"0x77b3482580ee8d5bdc5b824808df54bfec4fc817622e5add0e48f749f01def98",
								"0x9060d87664c26a3f9a509228c21b16dc6797cf787c839a07edc03e6338421091",
								"0xb37379c527753c5c8ab783f697e7b61439368cd75ebe63d633af32ffb4a022d1"
							]
						},
						{
							"name": "options",
							"value": {
								"showType": true,
								"showOwner": true,
								"showPreviousTransaction": true,
								"showDisplay": false,
								"showContent": true,
								"showBcs": false,
								"showStorageRebate": true
							}
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"data": {
									"objectId": "0x77b3482580ee8d5bdc5b824808df54bfec4fc817622e5add0e48f749f01def98",
									"version": "1",
									"digest": "2QwXW3qzMEZPAyyP9VHtXbC2tp7iomypQc5XnkyPsu5d",
									"type": "0x2::coin::Coin<0x2::sui::SUI>",
									"owner": {
										"AddressOwner": "0x504d411325e3c7f89d412044fe99007efb0f94f1e64d2e8090c619a39299d87e"
									},
									"previousTransaction": "GcjpL3GJBoiqc7RNwfV1R4411dFPYz4hTNyXQchsq6Sa",
									"storageRebate": "100",
									"content": {
										"dataType": "moveObject",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"hasPublicTransfer": true,
										"fields": {
											"balance": "100000000",
											"id": {
												"id": "0x77b3482580ee8d5bdc5b824808df54bfec4fc817622e5add0e48f749f01def98"
											}
										}
									}
								}
							}
						]
					}
				}
			]
		},
		{
			"name": "sui_multiGetTransactionBlocks",
			"summary": "Retrieve multiple transaction blocks by digest",
			"description": "Returns an ordered list of transaction block responses for the provided digests. The method throws an error if the input contains duplicates or exceeds the maximum allowed size.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "digests",
					"required": true,
					"description": "List of transaction digests to query.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "options",
					"required": true,
					"description": "Options to control which fields are returned in the response.",
					"schema": {
						"type": "object",
						"properties": {
							"showInput": {
								"type": "boolean"
							},
							"showRawInput": {
								"type": "boolean"
							},
							"showEffects": {
								"type": "boolean"
							},
							"showEvents": {
								"type": "boolean"
							},
							"showObjectChanges": {
								"type": "boolean"
							},
							"showBalanceChanges": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "List of transaction block responses.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object"
					}
				}
			},
			"examples": [
				{
					"name": "Fetch a transaction block with options",
					"params": [
						{
							"name": "digests",
							"value": [
								"8b3byDuRojHXqmSz16PsyzfdXJEY5nZBGTM23gMsMAY8"
							]
						},
						{
							"name": "options",
							"value": {
								"showInput": true,
								"showRawInput": false,
								"showEffects": true,
								"showEvents": true,
								"showObjectChanges": false,
								"showBalanceChanges": false
							}
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"digest": "8b3byDuRojHXqmSz16PsyzfdXJEY5nZBGTM23gMsMAY8",
								"transaction": {
									"data": {
										"messageVersion": "v1",
										"transaction": {
											"kind": "ProgrammableTransaction",
											"inputs": [
												{
													"type": "object",
													"objectType": "immOrOwnedObject",
													"objectId": "0x704c8c0d8052be7b5ca7174222a8980fb2ad3cd640f4482f931deb6436902627",
													"version": "17914894",
													"digest": "EtB9hPj2sgFNvi5AmdePGWVjzTY8avMcDBbXmU8KKrav"
												}
											],
											"transactions": [
												{
													"MergeCoins": [
														"..."
													]
												},
												{
													"MoveCall": {
														"...": null
													}
												},
												{
													"TransferObjects": [
														"..."
													]
												}
											]
										}
									},
									"sender": "0x8b35e67a519fffa11a9c74f169228ff1aa085f3a3d57710af08baab8c02211b9",
									"gasData": {
										"payment": [
											{
												"objectId": "0x05fa83c7371003767a1a9a204a4f788df7880bbb2d1a8813612848c0684a1508",
												"version": 17914894,
												"digest": "8QS7xEpuhpVyE5FYtAwFokGMVgEiTuwxeScmm9NKH6gL"
											}
										],
										"owner": "0x8b35e67a519fffa11a9c74f169228ff1aa085f3a3d57710af08baab8c02211b9",
										"price": "780",
										"budget": "1560000"
									}
								},
								"txSignatures": [
									"AHwNUODZnfOCQ66fNxaFhRxcJVp8ph6YG2nDMBmHDKW+t10A2tgLOwm+ZlCfflC59Ymvx43c2PVnK4mT10/NDQgVReFJgPk3gCeodtmcp+/EUo0Iat5xJMpD5Jps73bUpA=="
								],
								"effects": {
									"status": {
										"status": "success"
									},
									"executedEpoch": "120",
									"gasUsed": {
										"computationCost": "780000",
										"storageCost": "31000400",
										"storageRebate": "43187760",
										"nonRefundableStorageFee": "436240"
									},
									"transactionDigest": "8b3byDuRojHXqmSz16PsyzfdXJEY5nZBGTM23gMsMAY8",
									"gasObject": {
										"owner": {
											"AddressOwner": "0x8b35e67a519fffa11a9c74f169228ff1aa085f3a3d57710af08baab8c02211b9"
										},
										"reference": {
											"objectId": "0x05fa83c7371003767a1a9a204a4f788df7880bbb2d1a8813612848c0684a1508",
											"version": 17917509,
											"digest": "2UgthUKMotpLrFxCfTsfzjMzxtdcFM43nJu3LLdEa3z3"
										}
									}
								},
								"events": [],
								"timestampMs": "1691758371497",
								"checkpoint": "10066505"
							}
						]
					}
				}
			]
		},
		{
			"name": "sui_tryGetPastObject",
			"summary": "Get object information for a specific past version",
			"description": "Returns object details for a specified version. Note that nodes may prune older versions depending on their configuration, and retrieval is not guaranteed.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "object_id",
					"required": true,
					"description": "The ID of the queried object.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "version",
					"required": true,
					"description": "The specific version to query. No default is applied.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Options to specify which fields are returned in the object.",
					"schema": {
						"type": "object",
						"properties": {
							"showType": {
								"type": "boolean"
							},
							"showOwner": {
								"type": "boolean"
							},
							"showPreviousTransaction": {
								"type": "boolean"
							},
							"showDisplay": {
								"type": "boolean"
							},
							"showContent": {
								"type": "boolean"
							},
							"showBcs": {
								"type": "boolean"
							},
							"showStorageRebate": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The response describing the object version if found.",
				"schema": {
					"type": "object",
					"properties": {
						"status": {
							"type": "string",
							"description": "Status of the lookup, e.g. \"VersionFound\", \"ObjectNotExists\"."
						},
						"details": {
							"description": "Either object details or the object ID if not found.",
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "object",
									"properties": {
										"objectId": {
											"type": "string"
										},
										"version": {
											"type": "string"
										},
										"digest": {
											"type": "string"
										},
										"type": {
											"type": "string"
										},
										"owner": {
											"type": "object",
											"properties": {
												"AddressOwner": {
													"type": "string"
												}
											}
										},
										"previousTransaction": {
											"type": "string"
										},
										"storageRebate": {
											"type": "string"
										},
										"content": {
											"type": "object",
											"properties": {
												"dataType": {
													"type": "string"
												},
												"type": {
													"type": "string"
												},
												"hasPublicTransfer": {
													"type": "boolean"
												},
												"fields": {
													"type": "object",
													"properties": {
														"balance": {
															"type": "string"
														},
														"id": {
															"type": "object",
															"properties": {
																"id": {
																	"type": "string"
																}
															}
														}
													}
												}
											}
										}
									}
								}
							]
						}
					}
				}
			},
			"examples": [
				{
					"name": "Try get past object version",
					"params": [
						{
							"name": "object_id",
							"value": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
						},
						{
							"name": "version",
							"value": 4
						},
						{
							"name": "options",
							"value": {
								"showType": true,
								"showOwner": true,
								"showPreviousTransaction": true,
								"showDisplay": false,
								"showContent": true,
								"showBcs": false,
								"showStorageRebate": true
							}
						}
					],
					"result": {
						"name": "result",
						"value": {
							"status": "VersionFound",
							"details": {
								"objectId": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760",
								"version": "4",
								"digest": "5VPAwDXy3BL72ehFc7gSJoz27ahMd6spUg5YwYc4ibcv",
								"type": "0x2::coin::Coin<0x2::sui::SUI>",
								"owner": {
									"AddressOwner": "0x3568c40e814d9d5396d23087a0fd641e91e0e00df6c012cded9ef9ba5e5bf042"
								},
								"previousTransaction": "5jQByoouHBwaico5pQB73GdbzerC2StjTiHh5garBjiV",
								"storageRebate": "100",
								"content": {
									"dataType": "moveObject",
									"type": "0x2::coin::Coin<0x2::sui::SUI>",
									"hasPublicTransfer": true,
									"fields": {
										"balance": "10000",
										"id": {
											"id": "0x11af4b844ff94b3fbef6e36b518da3ad4c5856fa686464524a876b463d129760"
										}
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "sui_tryMultiGetPastObjects",
			"summary": "Get multiple objects at specified past versions",
			"description": "Returns the object data for each requested version. No guarantee is provided that historical versions will be available due to node-specific pruning behavior.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "past_objects",
					"required": true,
					"description": "A list of objects and versions to retrieve.",
					"schema": {
						"type": "array",
						"items": {
							"type": "object",
							"required": [
								"objectId",
								"version"
							],
							"properties": {
								"objectId": {
									"type": "string",
									"description": "The ID of the object."
								},
								"version": {
									"type": "string",
									"description": "The version number of the object."
								}
							}
						}
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Options to specify which object fields to include in the response.",
					"schema": {
						"type": "object",
						"properties": {
							"showType": {
								"type": "boolean"
							},
							"showOwner": {
								"type": "boolean"
							},
							"showPreviousTransaction": {
								"type": "boolean"
							},
							"showDisplay": {
								"type": "boolean"
							},
							"showContent": {
								"type": "boolean"
							},
							"showBcs": {
								"type": "boolean"
							},
							"showStorageRebate": {
								"type": "boolean"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A list of past object results corresponding to the input requests.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"status": {
								"type": "string",
								"description": "Retrieval status, e.g. \"VersionFound\" or \"ObjectNotExists\"."
							},
							"details": {
								"oneOf": [
									{
										"type": "string"
									},
									{
										"type": "object",
										"properties": {
											"objectId": {
												"type": "string"
											},
											"version": {
												"type": "string"
											},
											"digest": {
												"type": "string"
											},
											"type": {
												"type": "string"
											},
											"owner": {
												"type": "object",
												"properties": {
													"AddressOwner": {
														"type": "string"
													}
												}
											},
											"previousTransaction": {
												"type": "string"
											},
											"storageRebate": {
												"type": "string"
											},
											"content": {
												"type": "object",
												"properties": {
													"dataType": {
														"type": "string"
													},
													"type": {
														"type": "string"
													},
													"hasPublicTransfer": {
														"type": "boolean"
													},
													"fields": {
														"type": "object",
														"properties": {
															"balance": {
																"type": "string"
															},
															"id": {
																"type": "object",
																"properties": {
																	"id": {
																		"type": "string"
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								]
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Multi get past object versions",
					"params": [
						{
							"name": "past_objects",
							"value": [
								{
									"objectId": "0x38b3186a7bb26a1ab2c982a0a9b482aa70f5a010fffc60f20194ef0f597474e8",
									"version": "4"
								},
								{
									"objectId": "0xceaf9ee4582d3a233101e322a22cb2a5bea2e681ea5af4e59bd1abb0bb4fcb27",
									"version": "12"
								}
							]
						},
						{
							"name": "options",
							"value": {
								"showType": true,
								"showOwner": true,
								"showPreviousTransaction": true,
								"showDisplay": false,
								"showContent": true,
								"showBcs": false,
								"showStorageRebate": true
							}
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"status": "VersionFound",
								"details": {
									"objectId": "0x38b3186a7bb26a1ab2c982a0a9b482aa70f5a010fffc60f20194ef0f597474e8",
									"version": "4",
									"digest": "hvBGBXvKVhC7XYgVPujuiLjxASR6UGAkSFrCRtVxX1F",
									"type": "0x2::coin::Coin<0x2::sui::SUI>",
									"owner": {
										"AddressOwner": "0x47866ff92885a3c21a7703f564721c198308aa0c71b771ada6b96c16fc9c0fa7"
									},
									"previousTransaction": "6heEteheiLZcS8iVNXsNUnU7oVjzT7UHYzprGcuWQ4gG",
									"storageRebate": "100",
									"content": {
										"dataType": "moveObject",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"hasPublicTransfer": true,
										"fields": {
											"balance": "10000",
											"id": {
												"id": "0x38b3186a7bb26a1ab2c982a0a9b482aa70f5a010fffc60f20194ef0f597474e8"
											}
										}
									}
								}
							},
							{
								"status": "VersionFound",
								"details": {
									"objectId": "0xceaf9ee4582d3a233101e322a22cb2a5bea2e681ea5af4e59bd1abb0bb4fcb27",
									"version": "12",
									"digest": "B5z4YkAgTi78fdxMbxG3fv2V4YBkhpc8PRCPz8MzLtbf",
									"type": "0x2::coin::Coin<0x2::sui::SUI>",
									"owner": {
										"AddressOwner": "0xa6ced287081357950315a8842c3870f2d83f980fe0996a92d351d6749a0a0b47"
									},
									"previousTransaction": "BLN2oUCHmwmaAXXCxbojTcozUqZYfvXx4Bkgi7xcgyVc",
									"storageRebate": "100",
									"content": {
										"dataType": "moveObject",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"hasPublicTransfer": true,
										"fields": {
											"balance": "20000",
											"id": {
												"id": "0x38b3186a7bb26a1ab2c982a0a9b482aa70f5a010fffc60f20194ef0f597474e8"
											}
										}
									}
								}
							}
						]
					}
				}
			]
		},
		{
			"name": "suix_getAllBalances",
			"summary": "Get all coin balances for an address",
			"description": "Returns the total balance for each coin type owned by the specified address, including the number of coin objects and any locked amounts.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "owner",
					"required": true,
					"description": "The owner's Sui address.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A list of balance entries, one for each coin type the address owns.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"coinType": {
								"type": "string",
								"description": "The full type tag of the coin (e.g., 0x2::sui::SUI)."
							},
							"coinObjectCount": {
								"type": "integer",
								"description": "The number of coin objects for this coin type."
							},
							"totalBalance": {
								"type": "string",
								"description": "The total balance, summed across all coin objects of this type."
							},
							"lockedBalance": {
								"type": "object",
								"description": "Locked balance breakdown if any."
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get all balances",
					"params": [
						{
							"name": "owner",
							"value": "0xe883a1df96561884e46d8e29cfb4e127bb6fd2719c33af1c16239a25a469e0a6"
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"coinType": "0x2::sui::SUI",
								"coinObjectCount": 5,
								"totalBalance": "5000000000",
								"lockedBalance": {}
							}
						]
					}
				}
			]
		},
		{
			"name": "suix_getAllCoins",
			"summary": "Get all coin objects owned by an address",
			"description": "Returns a paginated list of all Coin objects owned by the specified address. Each Coin object includes metadata such as coin type, balance, and transaction history.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "owner",
					"required": true,
					"description": "The owner's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "Optional paging cursor from a previous response.",
					"schema": {
						"type": "string",
						"nullable": true
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of results to return.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Paginated list of coin objects for the given address.",
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "array",
							"description": "The list of Coin objects owned by the address.",
							"items": {
								"type": "object",
								"properties": {
									"coinType": {
										"type": "string",
										"description": "The full type tag of the coin."
									},
									"coinObjectId": {
										"type": "string",
										"description": "The object ID of the coin."
									},
									"version": {
										"type": "string",
										"description": "The object version."
									},
									"digest": {
										"type": "string",
										"description": "Digest of the coin object."
									},
									"balance": {
										"type": "string",
										"description": "The coin balance."
									},
									"previousTransaction": {
										"type": "string",
										"description": "The transaction digest that last modified this coin."
									}
								}
							}
						},
						"nextCursor": {
							"type": "string",
							"nullable": true,
							"description": "Cursor for the next page."
						},
						"hasNextPage": {
							"type": "boolean",
							"description": "Whether more pages are available."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get all coin objects",
					"params": [
						{
							"name": "owner",
							"value": "0xe883a1df96561884e46d8e29cfb4e127bb6fd2719c33af1c16239a25a469e0a6"
						},
						{
							"name": "cursor",
							"value": "0x1c574d9f2db5f293a799cc82795486aa8ce2962f831c7c6a433cbdcd84639acb"
						},
						{
							"name": "limit",
							"value": 3
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [
								{
									"coinType": "0x2::sui::SUI",
									"coinObjectId": "0x861c5e055605b2bb1199faf653a8771e448930bc95a0369fad43a9870a2e5878",
									"version": "103626",
									"digest": "Ao1QyN9UTmYzb2ead3D5xhSBk7TvACRvmnJW8gRbwP99",
									"balance": "200000000",
									"previousTransaction": "7dp5WtTmtGp83EXYYFMzjBJRFeSgR67AzqMETLrfgeFx"
								},
								{
									"coinType": "0x2::sui::SUI",
									"coinObjectId": "0x7e769678d059761bff8a8f3944642e4c33a6e4fb0b55f8face36fadaa22f2a0d",
									"version": "103626",
									"digest": "5taVxHU9QLQD5cNdqxt8kNGAab93GMG4vX7zYDxEaohx",
									"balance": "200000000",
									"previousTransaction": "9xLdMXezY8d1yRA2TtN6pYjapyy2EVKHWNriGPFGCFvd"
								},
								{
									"coinType": "0x2::sui::SUI",
									"coinObjectId": "0xa323d541ba5cf9e34919d2644cda38a263f69f47ae954dec65295231e0d2c7c8",
									"version": "103626",
									"digest": "82ZNKSSueWUQkpFNbBZGHSr3sUL5Rxfr7ucVRsvgQzz2",
									"balance": "200000000",
									"previousTransaction": "5xexWFq6QpGHBQyC9P2cbAJXq9qm2EjzfuRM9NwS1uyG"
								}
							],
							"nextCursor": "abcd",
							"hasNextPage": true
						}
					}
				}
			]
		},
		{
			"name": "suix_getBalance",
			"summary": "Get the total balance for a specific coin type",
			"description": "Returns the total coin balance for a single coin type owned by the specified address. If no coin type is specified, defaults to the native SUI coin type.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "owner",
					"required": true,
					"description": "The owner's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coin_type",
					"required": false,
					"description": "Fully qualified type name of the coin. If omitted, defaults to `0x2::sui::SUI`.\n",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The balance data for the requested coin type.",
				"schema": {
					"type": "object",
					"properties": {
						"coinType": {
							"type": "string",
							"description": "The coin type queried."
						},
						"coinObjectCount": {
							"type": "integer",
							"description": "Number of coin objects owned of the specified type."
						},
						"totalBalance": {
							"type": "string",
							"description": "Total balance in base units of the coin."
						},
						"lockedBalance": {
							"type": "object",
							"description": "Object describing any locked funds, if applicable."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get balance for SUI coin",
					"params": [
						{
							"name": "owner",
							"value": "0xe883a1df96561884e46d8e29cfb4e127bb6fd2719c33af1c16239a25a469e0a6"
						},
						{
							"name": "coin_type",
							"value": "0x2::sui::SUI"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"coinType": "0x2::sui::SUI",
							"coinObjectCount": 5,
							"totalBalance": "5000000000",
							"lockedBalance": {}
						}
					}
				}
			]
		},
		{
			"name": "suix_getCoins",
			"summary": "Get Coin objects for a specific coin type owned by an address",
			"description": "Returns all Coin objects of the specified coin type owned by the given address. If the coin type is not provided, defaults to `0x2::sui::SUI`.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "owner",
					"required": true,
					"description": "The owner's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coin_type",
					"required": false,
					"description": "Fully qualified type name of the coin (e.g., `0x2::sui::SUI`). Defaults to `0x2::sui::SUI` if omitted.\n",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "Optional paging cursor to paginate results.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of items to return in a single page.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A page of Coin objects and pagination metadata.",
				"schema": {
					"type": "object",
					"properties": {
						"data": {
							"type": "array",
							"description": "List of Coin objects.",
							"items": {
								"type": "object",
								"properties": {
									"coinType": {
										"type": "string",
										"description": "Type of the coin."
									},
									"coinObjectId": {
										"type": "string",
										"description": "Object ID of the coin."
									},
									"version": {
										"type": "string",
										"description": "Version of the coin object."
									},
									"digest": {
										"type": "string",
										"description": "Digest of the coin object."
									},
									"balance": {
										"type": "string",
										"description": "Balance of the coin object."
									},
									"lockedUntilEpoch": {
										"type": "string",
										"nullable": true,
										"description": "Optional epoch number until which the coin is locked."
									},
									"previousTransaction": {
										"type": "string",
										"description": "Digest of the previous transaction affecting this coin."
									}
								}
							}
						},
						"nextCursor": {
							"type": "string",
							"nullable": true,
							"description": "Cursor pointing to the next page of results, if any."
						},
						"hasNextPage": {
							"type": "boolean",
							"description": "Whether there are more results available after this page."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get SUI coins owned by an address",
					"params": [
						{
							"name": "owner",
							"value": "0xe883a1df96561884e46d8e29cfb4e127bb6fd2719c33af1c16239a25a469e0a6"
						},
						{
							"name": "coin_type",
							"value": "0x2::sui::SUI"
						},
						{
							"name": "cursor",
							"value": "0x1c574d9f2db5f293a799cc82795486aa8ce2962f831c7c6a433cbdcd84639acb"
						},
						{
							"name": "limit",
							"value": 3
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [
								{
									"coinType": "0x2::sui::SUI",
									"coinObjectId": "0xb770280feece9abe5f4683ee9a1b5baa76e3426d3dd46e9e17ae45a294d8a486",
									"version": "2960614",
									"digest": "CwcAqcZsw9toDkJjg2WjUvdY5U8o914CwzbTSUeEgPRR",
									"balance": "1000000000",
									"lockedUntilEpoch": null,
									"previousTransaction": "DsYAh2efV1nD4UuEQXMeicPBgeYD4UbQSDpLg9mKTMzc"
								}
							],
							"nextCursor": "0xb770280feece9abe5f4683ee9a1b5baa76e3426d3dd46e9e17ae45a294d8a486",
							"hasNextPage": false
						}
					}
				}
			]
		},
		{
			"name": "suix_getCommitteeInfo",
			"summary": "Return the committee information for a specific epoch",
			"description": "Retrieves the list of validator public keys and their voting power for the specified epoch. If no epoch is specified, the latest available epoch is used by default.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "epoch",
					"required": false,
					"description": "Epoch number to retrieve committee info for. Defaults to the latest epoch if not provided.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Committee information for the specified or latest epoch.",
				"schema": {
					"type": "object",
					"properties": {
						"epoch": {
							"type": "string",
							"description": "The epoch number this committee is for."
						},
						"validators": {
							"type": "array",
							"description": "A list of validator entries. Each entry is a 2-item array: [base64-encoded public key, voting power as string].\n",
							"items": {
								"type": "array",
								"items": [
									{
										"type": "string",
										"description": "Base64-encoded public key of the validator."
									},
									{
										"type": "string",
										"description": "Voting power assigned to the validator."
									}
								]
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get latest committee info",
					"params": [],
					"result": {
						"name": "result",
						"value": {
							"epoch": "734",
							"validators": [
								[
									"jc/20VUECmVvSBmxMRG1LFdGqGunLzlfuv4uw4R9HoFA5iSnUf32tfIFC8cgXPnTAATJCwx0Cv/TJs5nPMKyOi0k1T4q/rKG38Zo/UBgCJ1tKxe3md02+Q0zLlSnozjU",
									"305"
								],
								[
									"mfJe9h+AMrkUY2RgmCxcxvE07x3a52ZX8sv+wev8jQlzdAgN9vzw3Li8Sw2OCvXYDrv/K0xZn1T0LWMS38MUJ2B4wcw0fru+xRmL4lhRPzhrkw0CwnSagD4jMJVevRoQ",
									"37"
								]
							]
						}
					}
				}
			]
		},
		{
			"name": "suix_getDynamicFieldObject",
			"summary": "Get a dynamic field object by name",
			"description": "Returns information about a specific dynamic field object, identified by its parent object ID and field name.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "parent_object_id",
					"required": true,
					"description": "The ID of the queried parent object that owns the dynamic field.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "name",
					"required": true,
					"description": "The name of the dynamic field, specified as a struct containing type and value.",
					"schema": {
						"type": "object",
						"required": [
							"type",
							"value"
						],
						"description": "The name of a dynamic field, consisting of its type and value.",
						"properties": {
							"type": {
								"type": "string"
							},
							"value": {
								"type": "string"
							}
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The resolved dynamic field object response.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get a dynamic field object",
					"params": [
						{
							"name": "parent_object_id",
							"value": "0x3ddea0f8c3da994d9ead562ce76e36fdef6a382da344930c73d1298b0e9644b8"
						},
						{
							"name": "name",
							"value": {
								"type": "0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField",
								"value": "some_value"
							}
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": {
								"objectId": "0x3ddea0f8c3da994d9ead562ce76e36fdef6a382da344930c73d1298b0e9644b8",
								"version": "1",
								"digest": "Faiv4yqGR4HjAW8WhMN1NHHNStxXgP3u22dVPyvLad2z",
								"type": "0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField",
								"owner": {
									"AddressOwner": "0x5ea6f7a348f4a7bd1a9ab069eb7f63865de3075cc5a4e62432f634b50fd2bb2b"
								},
								"previousTransaction": "5qTpesGST3v9NmMTkzV7HHNZRJh52BSqUTErc6L6XGm",
								"storageRebate": "100",
								"content": {
									"dataType": "moveObject",
									"type": "0x0000000000000000000000000000000000000000000000000000000000000009::test::TestField",
									"hasPublicTransfer": true,
									"fields": {}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "suix_getDynamicFields",
			"summary": "Get dynamic fields of an object",
			"description": "Returns a paginated list of dynamic field objects owned by a specified parent object ID. Dynamic fields allow objects to store flexible, extensible key-value mappings.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "parent_object_id",
					"required": true,
					"description": "The ID of the parent object that owns the dynamic fields.",
					"schema": {
						"type": "string",
						"description": "A 32-byte hexadecimal Sui address (e.g., 0x...)."
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "An optional paging cursor (ObjectID). If provided, returns items after this ID.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of items per page.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A page of dynamic fields owned by the object.",
				"schema": {
					"type": "object",
					"required": [
						"data",
						"nextCursor",
						"hasNextPage"
					],
					"properties": {
						"data": {
							"type": "array",
							"description": "A list of results.",
							"items": {
								"type": "object"
							}
						},
						"nextCursor": {
							"description": "Cursor for fetching the next page.",
							"type": "string",
							"nullable": true
						},
						"hasNextPage": {
							"type": "boolean"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get dynamic fields by parent ID",
					"params": [
						{
							"name": "parent_object_id",
							"value": "0xb3ba434a82d446c530044680cc4679eb59252e50e4435eddf7f6b959f39a4f7d"
						},
						{
							"name": "cursor",
							"value": "0xba483c73a9b79bcc592cc5f163465ff1bc5c5d2e"
						},
						{
							"name": "limit",
							"value": 2
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [],
							"nextCursor": "0x000000000000000000000000ba483c73a9b79bcc592cc5f163465ff1bc5c5d2e",
							"hasNextPage": false
						}
					}
				}
			]
		},
		{
			"name": "suix_getLatestSuiSystemState",
			"summary": "Get the latest SUI system state",
			"description": "Returns the latest SUI system state object from the blockchain, including information such as current epoch, gas price, validator set, and various protocol-level configuration values.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The current system state including validator information and protocol configuration.",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Get latest system state",
					"params": [],
					"result": {
						"name": "result",
						"value": {
							"epoch": "733",
							"protocolVersion": "82",
							"systemStateVersion": "2",
							"storageFundTotalObjectStorageRebates": "1867278075428400",
							"storageFundNonRefundableBalance": "104608443378269",
							"referenceGasPrice": "1000",
							"safeMode": false,
							"safeModeStorageRewards": "0",
							"safeModeComputationRewards": "0",
							"safeModeStorageRebates": "0",
							"safeModeNonRefundableStorageFee": "0",
							"epochStartTimestampMs": "1747080104903",
							"epochDurationMs": "86400000",
							"stakeSubsidyStartEpoch": "0",
							"maxValidatorCount": "150",
							"minValidatorJoiningStake": "30000000000000000",
							"validatorLowStakeThreshold": "20000000000000000",
							"validatorVeryLowStakeThreshold": "15000000000000000",
							"validatorLowStakeGracePeriod": "7",
							"stakeSubsidyBalance": "722892969163061985",
							"stakeSubsidyDistributionCounter": "733",
							"stakeSubsidyCurrentDistributionAmount": "79766443076875",
							"stakeSubsidyPeriodLength": "30",
							"stakeSubsidyDecreaseRate": 1000,
							"totalStake": "6892525341580160950",
							"activeValidators": {
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"suiAddress",
										"name",
										"votingPower",
										"gasPrice",
										"commissionRate",
										"nextEpochStake"
									],
									"properties": {
										"suiAddress": {
											"type": "string",
											"description": "A 32-byte hexadecimal Sui address (e.g., 0x...)."
										},
										"name": {
											"type": "string"
										},
										"votingPower": {
											"type": "string"
										},
										"gasPrice": {
											"type": "string"
										},
										"commissionRate": {
											"type": "string"
										},
										"nextEpochStake": {
											"type": "string"
										}
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "suix_getOwnedObjects",
			"summary": "Get owned objects by address",
			"description": "Returns a paginated list of objects owned by the specified Sui address. Use filters and options to refine the returned data. For better pagination consistency, use `suix_queryObjects`.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "address",
					"required": true,
					"description": "The owner's Sui address.",
					"schema": {
						"type": "string",
						"description": "A 32-byte hexadecimal Sui address (e.g., 0x...)."
					}
				},
				{
					"name": "query",
					"required": false,
					"description": "Optional filters and field selectors.",
					"schema": {
						"type": "object"
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "An optional paging cursor (ObjectID).",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Max number of results to return.",
					"schema": {
						"type": "integer"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A page of objects owned by the address.",
				"schema": {
					"type": "object",
					"required": [
						"data",
						"nextCursor",
						"hasNextPage"
					],
					"properties": {
						"data": {
							"type": "array",
							"description": "A list of results.",
							"items": {
								"type": "object"
							}
						},
						"nextCursor": {
							"description": "Cursor for fetching the next page.",
							"type": "string",
							"nullable": true
						},
						"hasNextPage": {
							"type": "boolean"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get SUI coins owned by address",
					"params": [
						{
							"name": "address",
							"value": "0xdbc9abc01a87906b033a75750e741edb2df5ea5d55c96a611371d22799d26827"
						},
						{
							"name": "query",
							"value": {
								"filter": {
									"MatchAll": [
										{
											"StructType": "0x2::coin::Coin<0x2::sui::SUI>"
										},
										{
											"AddressOwner": "0xdbc9abc01a87906b033a75750e741edb2df5ea5d55c96a611371d22799d26827"
										},
										{
											"Version": "13488"
										}
									]
								},
								"options": {
									"showType": true,
									"showOwner": true,
									"showPreviousTransaction": true,
									"showDisplay": false,
									"showContent": false,
									"showBcs": false,
									"showStorageRebate": false
								}
							}
						},
						{
							"name": "cursor",
							"value": "0x0cd4bb4d4f520fe9bbf0cf1cebe3f2549412826c3c9261bff9786c240123749f"
						},
						{
							"name": "limit",
							"value": 3
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [
								{
									"data": {
										"objectId": "0x0b37a91692359a98496738a58c17a9334aeacc435c70ab9635e47a277d8f8dd9",
										"version": "13488",
										"digest": "FZzfCnKCSRW2jN9AwkiarjYQapViUQAh799aiRMZ4YC2",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"owner": {
											"AddressOwner": "0xdbc9abc01a87906b033a75750e741edb2df5ea5d55c96a611371d22799d26827"
										},
										"previousTransaction": "AJhAseKLEndWYT45FbvYGgCJQTqZP537xqNnthY9FqSa",
										"storageRebate": "100"
									}
								},
								{
									"data": {
										"objectId": "0xd4feace07fc863a2eef286c3e95ed48e2c181bb65db5beaf7ea664b4ca6b744c",
										"version": "13488",
										"digest": "3cxBDcfnkVgtXWhnMnKKkMGtZdiEorUhb1vdp2DkVyfi",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"owner": {
											"AddressOwner": "0xdbc9abc01a87906b033a75750e741edb2df5ea5d55c96a611371d22799d26827"
										},
										"previousTransaction": "8qCvxDHh5LtDfF95Ci9G7vvQN2P6y4v55S9xoKBYp7FM",
										"storageRebate": "100"
									}
								},
								{
									"data": {
										"objectId": "0xe26860fac6839ce2d7ed7e6f29d276a1b4c23f2d9a9b6f0d8b2c17beace292b7",
										"version": "13488",
										"digest": "3tX9sgYC4A6nVKGjKEE5xxW6t4zkvDL9BwjuaxMg8arP",
										"type": "0x2::coin::Coin<0x2::sui::SUI>",
										"owner": {
											"AddressOwner": "0xdbc9abc01a87906b033a75750e741edb2df5ea5d55c96a611371d22799d26827"
										},
										"previousTransaction": "5Ka3vDaDy9h5UYk3Maz3vssWHrhbcGXQgwg8fL2ygyTi",
										"storageRebate": "100"
									}
								}
							],
							"nextCursor": "0xe26860fac6839ce2d7ed7e6f29d276a1b4c23f2d9a9b6f0d8b2c17beace292b7",
							"hasNextPage": true
						}
					}
				}
			]
		},
		{
			"name": "suix_getReferenceGasPrice",
			"summary": "Get the current reference gas price",
			"description": "Returns the reference gas price (in MIST) for the network. This value represents the suggested fee per unit of gas and can be used to estimate transaction costs.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The reference gas price in MIST.",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Get reference gas price",
					"params": [],
					"result": {
						"name": "result",
						"value": "740"
					}
				}
			]
		},
		{
			"name": "suix_getStakes",
			"summary": "Governance Read API - Return all [DelegatedStake]",
			"description": "Retrieves all delegated staking positions associated with the specified Sui address. Each entry includes the validator address, the staking pool, and the individual stake details such as amount, status, and epochs.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "owner",
					"required": true,
					"description": "The Sui address of the staking position owner.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "List of staking entries, grouped by validator address.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"validatorAddress": {
								"type": "string",
								"description": "Sui address of the validator receiving the stake."
							},
							"stakingPool": {
								"type": "string",
								"description": "Sui object ID of the associated staking pool."
							},
							"stakes": {
								"type": "array",
								"description": "Individual delegated stake entries.",
								"items": {
									"type": "object",
									"properties": {
										"stakedSuiId": {
											"type": "string",
											"description": "Object ID representing the staked SUI coin."
										},
										"stakeRequestEpoch": {
											"type": "string",
											"description": "Epoch in which the staking request was submitted."
										},
										"stakeActiveEpoch": {
											"type": "string",
											"description": "Epoch in which the stake becomes active."
										},
										"principal": {
											"type": "string",
											"description": "Amount of SUI staked."
										},
										"status": {
											"type": "string",
											"description": "Current status of the stake (e.g., Active, Pending, Unstaked)."
										},
										"estimatedReward": {
											"type": "string",
											"nullable": true,
											"description": "Estimated reward for the active stake (optional)."
										}
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get all delegated stakes for an address",
					"params": [
						{
							"name": "owner",
							"value": "0x7d20dcdb2bca4f508ea9613994683eb4e76e9c4ed371169677c1be02aaf0b58e"
						}
					],
					"result": {
						"name": "result",
						"value": [
							{
								"validatorAddress": "0x3befb84f03a24386492bd3b05b1fd386172eb450e5059ce7df0ea6d9d6cefcaa",
								"stakingPool": "0x9a95cf69368e31b4dbe8ee9bdb3c0587bbc79d8fc6edf4007e185a962fd906df",
								"stakes": [
									{
										"stakedSuiId": "0xb4eeb46b70f0bebcae832aeef9f7c5db76052ab656e5f81853d0cf701cdbc8eb",
										"stakeRequestEpoch": "62",
										"stakeActiveEpoch": "63",
										"principal": "200000000000",
										"status": "Active",
										"estimatedReward": "520000000"
									},
									{
										"stakedSuiId": "0xf27ab513fc6ef8c344406c78da3d5ad3a5fcc295dc8803c15989a62d33ee8590",
										"stakeRequestEpoch": "142",
										"stakeActiveEpoch": "143",
										"principal": "200000000000",
										"status": "Pending"
									}
								]
							},
							{
								"validatorAddress": "0x14cfd5e91c13a481370240e392464c329a203fb9f0a8158aaab9b2a90044b26e",
								"stakingPool": "0x14cc7fee4100fdcabda6d15c63c4b49c45ae23f2b936495cd38b1a4b04010295",
								"stakes": [
									{
										"stakedSuiId": "0xbaa75ac72e548aeecf2ce8b4e88530651d6e8f93e0fb79b4bc65a512beb5b9f3",
										"stakeRequestEpoch": "244",
										"stakeActiveEpoch": "245",
										"principal": "200000000000",
										"status": "Unstaked"
									}
								]
							}
						]
					}
				}
			]
		},
		{
			"name": "suix_getStakesByIds",
			"summary": "Governance Read API - Return one or more [DelegatedStake]",
			"description": "Returns information about one or more staking positions specified by their `stakedSuiId`. If a stake has been withdrawn, its status will be `\"Unstaked\"`.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "staked_sui_ids",
					"required": true,
					"description": "A list of object IDs representing staked SUI positions.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "One or more delegated stake entries grouped under their validator and pool.",
				"schema": {
					"type": "object",
					"properties": {
						"validatorAddress": {
							"type": "string",
							"description": "Sui address of the validator associated with the stake."
						},
						"stakingPool": {
							"type": "string",
							"description": "Object ID of the staking pool linked to this validator."
						},
						"stakes": {
							"type": "array",
							"description": "List of individual delegated stake objects.",
							"items": {
								"type": "object",
								"properties": {
									"stakedSuiId": {
										"type": "string",
										"description": "Object ID representing the staked SUI coin."
									},
									"stakeRequestEpoch": {
										"type": "string",
										"description": "Epoch during which the stake was requested."
									},
									"stakeActiveEpoch": {
										"type": "string",
										"description": "Epoch when the stake became or will become active."
									},
									"principal": {
										"type": "string",
										"description": "Amount of SUI staked."
									},
									"status": {
										"type": "string",
										"description": "Stake status - Active, Pending, or Unstaked."
									},
									"estimatedReward": {
										"type": "string",
										"nullable": true,
										"description": "Estimated reward for the stake if applicable."
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get stakes by ID",
					"params": [
						{
							"name": "staked_sui_ids",
							"value": [
								"0xa6379c19b3aa9aa878fc1deaf69c1dbb1de4224de8b62de04e4962b593e037e9"
							]
						}
					],
					"result": {
						"name": "result",
						"value": {
							"validatorAddress": "0x754eb2eed23e6c6bb32c89fe1f21ab588374445e72e0402aea014b2956105799",
							"stakingPool": "0x63ee67e81398729f87d81d62f399c041b0f8d0938923ea7e3917608ee62df437",
							"stakes": [
								{
									"stakedSuiId": "0x378423de90ed03b694cecf443c72b5387b29a731d26d98108d7abc4902107d7d",
									"stakeRequestEpoch": "62",
									"stakeActiveEpoch": "63",
									"principal": "200000000000",
									"status": "Active",
									"estimatedReward": "520000000"
								},
								{
									"stakedSuiId": "0x6a8e0f8fea6fda5488462e58724c034462b6064a08845e2ae2942fe7c4ee816d",
									"stakeRequestEpoch": "244",
									"stakeActiveEpoch": "245",
									"principal": "200000000000",
									"status": "Unstaked"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "suix_getTotalSupply",
			"summary": "Coin Query API – Return total supply for a coin",
			"description": "Returns the total supply of a specific coin type on the network.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "coin_type",
					"required": true,
					"description": "Fully qualified type name for the coin (e.g., `0x2::sui::SUI`).",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The total supply object for the specified coin type.",
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "string",
							"description": "Total coin supply as a 64-bit unsigned integer string."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Get total supply for SUI",
					"params": [
						{
							"name": "coin_type",
							"value": "0x2::sui::SUI"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"value": "10000000000000000000"
						}
					}
				}
			]
		},
		{
			"name": "suix_queryEvents",
			"summary": "Query events using filter criteria",
			"description": "Returns a paginated list of events that match the given query criteria. You can filter by sender, package, module, event type, and more. Supports pagination and ordering.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "query",
					"required": true,
					"description": "The event query criteria (e.g., MoveModule, Sender).",
					"schema": {
						"type": "object"
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "Optional paging cursor, an EventID { txDigest, eventSeq } object.",
					"schema": {
						"type": "object",
						"description": "A unique identifier for an event, composed of a transaction digest and event sequence number.",
						"required": [
							"txDigest",
							"eventSeq"
						],
						"properties": {
							"txDigest": {
								"type": "string"
							},
							"eventSeq": {
								"type": "string"
							}
						}
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of events to return.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "descending_order",
					"required": false,
					"description": "Whether to return results in descending order.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A page of matched events.",
				"schema": {
					"type": "object",
					"required": [
						"data",
						"nextCursor",
						"hasNextPage"
					],
					"properties": {
						"data": {
							"type": "array",
							"description": "A list of results.",
							"items": {
								"type": "object"
							}
						},
						"nextCursor": {
							"description": "Cursor for fetching the next page.",
							"type": "string",
							"nullable": true
						},
						"hasNextPage": {
							"type": "boolean"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Query MoveModule events",
					"params": [
						{
							"name": "query",
							"value": {
								"MoveModule": {
									"package": "0x0000000000000000000000000000000000000000000000000000000000000002",
									"module": "deepbook_utils",
									"type": "0xdee9::clob_v2::DepositAsset<0x8da140bad1be69f7e64abf9f494b094dd3a77242577cab0ad658c9436bed225e::coin::COIN>"
								}
							}
						},
						{
							"name": "cursor",
							"value": null
						},
						{
							"name": "limit",
							"value": 3
						},
						{
							"name": "descending_order",
							"value": false
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [],
							"nextCursor": null,
							"hasNextPage": false
						}
					}
				}
			]
		},
		{
			"name": "suix_queryTransactionBlocks",
			"summary": "Query transactions using filter criteria",
			"description": "Returns a paginated list of transaction blocks that match the given query criteria.  You can filter by input object, sender, transaction kind, and more. Supports pagination and ordering.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "query",
					"required": true,
					"description": "Transaction query filter and field options.",
					"schema": {
						"type": "object",
						"properties": {
							"filter": {
								"type": "object"
							},
							"options": {
								"type": "object",
								"nullable": true
							}
						}
					}
				},
				{
					"name": "cursor",
					"required": false,
					"description": "Optional paging cursor, a transaction digest string.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "limit",
					"required": false,
					"description": "Maximum number of results to return.",
					"schema": {
						"type": "integer"
					}
				},
				{
					"name": "descending_order",
					"required": false,
					"description": "Whether to return results in descending order.",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A page of matched transaction blocks.",
				"schema": {
					"type": "object",
					"required": [
						"data",
						"nextCursor",
						"hasNextPage"
					],
					"properties": {
						"data": {
							"type": "array",
							"description": "A list of results.",
							"items": {
								"type": "object"
							}
						},
						"nextCursor": {
							"description": "Cursor for fetching the next page.",
							"type": "string",
							"nullable": true
						},
						"hasNextPage": {
							"type": "boolean"
						}
					}
				}
			},
			"examples": [
				{
					"name": "Query transactions using InputObject filter",
					"params": [
						{
							"name": "query",
							"value": {
								"filter": {
									"InputObject": "0x8da140bad1be69f7e64abf9f494b094dd3a77242577cab0ad658c9436bed225e"
								},
								"options": null
							}
						},
						{
							"name": "cursor",
							"value": "44G1v9zusjuKqKjeAqZz2GBvBWd1MGiNPQGB4pZeagNb"
						},
						{
							"name": "limit",
							"value": 100
						},
						{
							"name": "descending_order",
							"value": false
						}
					],
					"result": {
						"name": "result",
						"value": {
							"data": [
								{
									"digest": "GUPcK4cmRmgsTFr52ab9f6fnzNVg3Lz6hF2aXFcsRzaD"
								},
								{
									"digest": "B2iV1SVbBjgTKfbJKPQrvTT6F3kNdekFuBwY9tQcAxV2"
								},
								{
									"digest": "8QrPa4x9iNG5r2zQfmeH8pJoVjjtq9AGzp8rp2fxi8Sk"
								},
								{
									"digest": "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F"
								}
							],
							"nextCursor": "3nek86HEjXZ7K3EtrAcBG4wMrCS21gqr8BqwwC6M6P7F",
							"hasNextPage": false
						}
					}
				}
			]
		},
		{
			"name": "suix_resolveNameServiceAddress",
			"summary": "Resolve a SuiNS name to its associated address",
			"description": "Returns the resolved address for the provided SuiNS name. This is typically used to map human-readable names (e.g., example.sui) to their corresponding Sui addresses.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "name",
					"required": true,
					"description": "The human-readable SuiNS name to resolve.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The resolved Sui address corresponding to the provided name.",
				"schema": {
					"type": "string",
					"description": "A 32-byte hexadecimal Sui address (e.g., 0x...)."
				}
			},
			"examples": [
				{
					"name": "Resolve a SuiNS name",
					"params": [
						{
							"name": "name",
							"value": "example.sui"
						}
					],
					"result": {
						"name": "result",
						"value": "0x214a4199264348df2364acd683a3971a9927a5252747f4e0776f0506922f9db0"
					}
				}
			]
		},
		{
			"name": "unsafe_batchTransaction",
			"summary": "Create an unsigned batched transaction",
			"description": "Creates a BCS-serialized batched transaction that is not signed. This can be used to execute multiple actions atomically in one transaction block.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "single_transaction_params",
					"required": true,
					"description": "A list of individual transaction instructions to include in the batch.",
					"schema": {
						"type": "array",
						"items": {
							"type": "object",
							"description": "Individual transaction request parameter.",
							"properties": {
								"kind": {
									"type": "string",
									"description": "The kind of transaction (e.g. TransferObject, MoveCall, etc)."
								},
								"data": {
									"type": "object",
									"description": "The parameters for the specific transaction kind."
								}
							}
						}
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "The gas object to be used. If omitted, one will be selected automatically.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The maximum amount of gas to be used for this transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "txn_builder_mode",
					"required": false,
					"description": "Whether this is a regular or dev-inspect transaction.",
					"schema": {
						"type": "string",
						"enum": [
							"Commit",
							"DevInspect"
						]
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The batched transaction block as BCS-encoded data, plus gas and input metadata.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "BCS serialized transaction data bytes (base64-encoded, without type tag)."
						},
						"gas": {
							"type": "array",
							"description": "Gas objects used in the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "All input objects used in this transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Create batched transaction",
					"params": [
						{
							"name": "signer",
							"value": "0x7d20dcdb2bca4f508ea9613994683eb4e76e9c4ed371169677c1be02aaf0b58e"
						},
						{
							"name": "single_transaction_params",
							"value": [
								{
									"kind": "TransferObject",
									"data": {
										"recipient": "0x9b9f3d0c8593d68164661b7f3de35308a3ffde34cb4f08879642a6a2b6ceca69",
										"objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc"
									}
								}
							]
						},
						{
							"name": "gas",
							"value": "0xe8d8c7ce863f313da3dbd92a83ef26d128b88fe66bf26e0e0d09cdaf727d1d84"
						},
						{
							"name": "gas_budget",
							"value": "10000000"
						},
						{
							"name": "txn_builder_mode",
							"value": "Commit"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACACBqEB6aOvXIBwES+Ahkizbvv43uihqC3kbZUE6WoRCKFwEA...",
							"gas": [
								{
									"objectId": "0xe8d8c7ce863f313da3dbd92a83ef26d128b88fe66bf26e0e0d09cdaf727d1d84",
									"version": "2",
									"digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
								}
							],
							"inputObjects": [
								{
									"objectId": "0x4f82f1c8587b98d64c00bfb46c3843bd8bf6ccfa7c65a86138698cd1fdcac3dc",
									"version": "2",
									"digest": "Cv7n2YaM7Am1ssZGu4khsFkcKHnpgVhwFCSs4kLjrtLW"
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_mergeCoins",
			"summary": "Create an unsigned transaction to merge multiple coins into one coin",
			"description": "Constructs a BCS-encoded transaction block that merges the balance of `coin_to_merge` into `primary_coin`. This transaction must be signed and then submitted using a separate execute call. The gas object must be owned by the signer.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "primary_coin",
					"required": true,
					"description": "The coin object to merge into. This coin will remain after the transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coin_to_merge",
					"required": true,
					"description": "The coin object to be merged. It will be destroyed and its balance added to `primary_coin`.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "The gas object to be used. If omitted, the node will auto-select one from the signer's owned coins.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget for the transaction. The transaction fails if gas used exceeds this.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The unsigned transaction block that merges coins.",
				"schema": {
					"type": "object",
					"properties": {
						"gas": {
							"type": "array",
							"description": "The gas object(s) selected for this transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "List of objects the transaction references.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									},
									"objectType": {
										"type": "string"
									}
								}
							}
						},
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS transaction data, ready for signing."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Merge coins",
					"params": [
						{
							"name": "signer",
							"value": "0x4c05f4f76ed81d210e9a29ac0756c7a3129e4b9ecacbbb9fc1579505947630cf"
						},
						{
							"name": "primary_coin",
							"value": "0x5b14e6b640d6254959803aafff56b3d42c559760f38c3f98a91f557233b8ebc9"
						},
						{
							"name": "coin_to_merge",
							"value": "0x47011883c7c75aaeb5beec48ade6eebb428bb8a89a340936e9b24fcbacdc67ea"
						},
						{
							"name": "gas",
							"value": "0x8aPfVmE7k1h3BFju4WFhGJ59oWpMFSiRqsCa1EsyJxtS"
						},
						{
							"name": "gas_budget",
							"value": "3000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"gas": [
								{
									"objectId": "0x8aPfVmE7k1h3BFju4WFhGJ59oWpMFSiRqsCa1EsyJxtS",
									"version": "1",
									"digest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm"
								}
							],
							"inputObjects": [
								{
									"objectId": "0x5b14e6b640d6254959803aafff56b3d42c559760f38c3f98a91f557233b8ebc9",
									"version": "1",
									"digest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm",
									"objectType": "Coin"
								},
								{
									"objectId": "0x47011883c7c75aaeb5beec48ade6eebb428bb8a89a340936e9b24fcbacdc67ea",
									"version": "1",
									"digest": "BhbWpBeESxuRWvmvLMyb2JNUuFa6j4aG1T4WUiPgKAHm",
									"objectType": "Coin"
								}
							],
							"txBytes": "BASE64_ENCODED_BCS_BYTES_HERE"
						}
					}
				}
			]
		},
		{
			"name": "unsafe_moveCall",
			"summary": "Create an unsigned transaction to execute a Move call",
			"description": "Constructs a BCS-encoded transaction block that performs a Move call to a specific function in a Move module. This unsigned transaction must be signed and submitted separately.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "package_object_id",
					"required": true,
					"description": "The Move package ID containing the target module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "module",
					"required": true,
					"description": "The name of the Move module.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "function",
					"required": true,
					"description": "The name of the Move function to call.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "type_arguments",
					"required": true,
					"description": "Type arguments passed to the Move function.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "arguments",
					"required": true,
					"description": "Function arguments in SuiJson format.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "Gas object to be used. Will be auto-selected if not provided.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "Maximum gas budget for the transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "execution_mode",
					"required": false,
					"description": "Whether this is a normal execution or a dev inspect. Defaults to \"Commit\".",
					"schema": {
						"type": "string",
						"enum": [
							"Commit",
							"DevInspect"
						]
					}
				}
			],
			"result": {
				"name": "result",
				"description": "An unsigned transaction block containing the Move call.",
				"schema": {
					"type": "object",
					"properties": {
						"gas": {
							"type": "array",
							"description": "The gas object(s) used.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "Objects involved in the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "string"
									},
									"digest": {
										"type": "string"
									},
									"objectType": {
										"type": "string"
									}
								}
							}
						},
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS transaction data."
						}
					}
				}
			},
			"examples": [
				{
					"name": "Move call - borrow from bag",
					"params": [
						{
							"name": "signer",
							"value": "0x00c364252964511b32b084c17a492093d5b762cbe2766d46911912718e56950f"
						},
						{
							"name": "package_object_id",
							"value": "0x0000000000000000000000000000000000000000000000000000000000000002"
						},
						{
							"name": "module",
							"value": "bag"
						},
						{
							"name": "function",
							"value": "borrow"
						},
						{
							"name": "type_arguments",
							"value": [
								"0x2::devnet_nft::MintNFTEvent"
							]
						},
						{
							"name": "arguments",
							"value": [
								"copy",
								"drop"
							]
						},
						{
							"name": "gas",
							"value": "0x30dab78d58471a78496eb71c2c6e77ba268f0390"
						},
						{
							"name": "gas_budget",
							"value": "1"
						},
						{
							"name": "execution_mode",
							"value": "Commit"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"gas": [
								{
									"objectId": "0x30dab78d58471a78496eb71c2c6e77ba268f0390",
									"version": "1",
									"digest": "sEnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt"
								}
							],
							"inputObjects": [
								{
									"objectId": "0xa6379c19b3aa9aa878fc1deaf69c1dbb1de4224de8b62de04e4962b593e037e9",
									"version": "1",
									"digest": "EnRQXe1hDGAJCFyF2ds2GmPHdvf9V6yxf24LisEsDkYt",
									"objectType": "MoveObject"
								}
							],
							"txBytes": "BASE64_ENCODED_TX_BYTES"
						}
					}
				}
			]
		},
		{
			"name": "unsafe_pay",
			"summary": "Send Coin<T> to a list of addresses",
			"description": "Create an unsigned transaction to send Coin<T> to a list of recipients,  where T can be any coin type. The specified gas object must not appear  in the input_coins array. If not provided, the node will select one automatically.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "input_coins",
					"required": true,
					"description": "List of Coin<T> object IDs to use for sending value.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "recipients",
					"required": true,
					"description": "The recipient addresses. Must have the same length as `amounts`.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "amounts",
					"required": true,
					"description": "The amounts to transfer to each recipient, in the same order.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "Object ID of the gas coin to use. Must not be in input_coins.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget for the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Unsigned transaction for sending Coin<T>.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS serialized transaction bytes."
						},
						"gas": {
							"type": "array",
							"description": "Gas object(s) selected for the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "All objects involved in this transaction (coins, gas, etc.).",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Transfer Coin<T> to 1 recipient",
					"params": [
						{
							"name": "signer",
							"value": "0x00c364252964511b32b084c17a492093d5b762cbe2766d46911912718e56950f"
						},
						{
							"name": "input_coins",
							"value": [
								"0xa6379c19b3aa9aa878fc1deaf69c1dbb1de4224de8b62de04e4962b593e037e9"
							]
						},
						{
							"name": "recipients",
							"value": [
								"0x8933942921bd522d69d7af12f875ba4f4963ad01431df8403597dfa8692f417d"
							]
						},
						{
							"name": "amounts",
							"value": [
								"10"
							]
						},
						{
							"name": "gas",
							"value": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAADAQCmN5wZs6qaqHj8Her2nB27HeQiTei2LeBOSWK1k+A36Q4DMCEAAAAAIF...",
							"gas": [
								{
									"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
									"version": 1,
									"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xa6379c19b3aa9aa878fc1deaf69c1dbb1de4224de8b62de04e4962b593e037e9",
										"version": 556794638,
										"digest": "6afcUrFL3VjDUHd7EUTPgCM2Tbw2vt1X96kVDhZqWh6r"
									}
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
										"version": 1,
										"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_payAllSui",
			"summary": "Transfer all SUI coins to a single recipient",
			"description": "Creates an unsigned transaction that transfers all SUI coins to one recipient.  All SUI from the input coins are consolidated into the first coin, which is  then transferred and used as the gas object. Remaining input coins are deleted.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "input_coins",
					"required": true,
					"description": "List of Coin<SUI> object IDs to use, including the one used for gas.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "recipient",
					"required": true,
					"description": "The recipient's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget for the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Unsigned transaction that transfers all SUI.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS serialized transaction bytes."
						},
						"gas": {
							"type": "array",
							"description": "Gas object(s) selected for the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "All objects involved in this transaction (SUI coins).",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Send all SUI to one recipient",
					"params": [
						{
							"name": "signer",
							"value": "0x00c364252964511b32b084c17a492093d5b762cbe2766d46911912718e56950f"
						},
						{
							"name": "input_coins",
							"value": [
								"0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7"
							]
						},
						{
							"name": "recipient",
							"value": "0xeeb30f4dc675a7d49b8abedf58eb2e3738facfc554c80f4b27ab62aa02878f56"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAABACDusw9NxnWn1JuKvt9Y6y43OPrPxVTID0snq2KqAoePVgEBAQABAAAAw2QlK...",
							"gas": [
								{
									"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
									"version": 1,
									"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
										"version": 1,
										"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_paySui",
			"summary": "Send SUI coins to multiple recipients",
			"description": "Creates an unsigned transaction that sends SUI to multiple recipients. The transaction uses SUI coins for both transfer and gas without requiring a separate gas object. 1. Debits each input coin to create new coins for recipients. 2. Consolidates residual SUI into the first coin, which becomes the gas coin. 3. Updates the first coin balance to: total_input - total_output - gas_cost. 4. Deletes all other input coins.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "input_coins",
					"required": true,
					"description": "List of Coin<SUI> object IDs to use, including the one used for gas.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "recipients",
					"required": true,
					"description": "List of recipient Sui addresses.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "amounts",
					"required": true,
					"description": "List of amounts (same order as recipients).",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget for the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Unsigned transaction that transfers SUI to recipients.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS serialized transaction bytes."
						},
						"gas": {
							"type": "array",
							"description": "Gas object used for the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "All input SUI coin objects involved.",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Transfer SUI to one recipient",
					"params": [
						{
							"name": "signer",
							"value": "0xeeb30f4dc675a7d49b8abedf58eb2e3738facfc554c80f4b27ab62aa02878f56"
						},
						{
							"name": "input_coins",
							"value": [
								"0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7"
							]
						},
						{
							"name": "recipients",
							"value": [
								"0x1f446cc6caa6dff121d1540568e91e89b7e0d36f6e009522c59265c627ed0361"
							]
						},
						{
							"name": "amounts",
							"value": [
								"2"
							]
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACAAgCAAAAAAAAAAAgH0Rsxsqm3/Eh0VQFaOkeibfg029uAJUixZJlxiftA2ECAgABAQA...",
							"gas": [
								{
									"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
									"version": 1,
									"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
										"version": 1,
										"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_publish",
			"summary": "Publish a Move module package",
			"description": "Creates an unsigned transaction that publishes a Move module package to the Sui blockchain. The transaction includes the compiled module bytecode, a list of dependency addresses, and gas settings.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "sender",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "compiled_modules",
					"required": true,
					"description": "List of compiled Move module byte arrays (base64-encoded).",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "dependencies",
					"required": true,
					"description": "List of object IDs for all transitive Move dependencies.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "Object ID of the gas coin to use. Auto-selected if omitted.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "Maximum gas budget allowed for the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Unsigned transaction containing the Move package publish operation.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "BCS-serialized unsigned transaction, base64-encoded."
						},
						"gas": {
							"type": "object",
							"description": "The gas object used for this transaction.",
							"properties": {
								"objectId": {
									"type": "string"
								},
								"version": {
									"type": "integer"
								},
								"digest": {
									"type": "string"
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "All input objects used in the transaction (e.g., gas coin).",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Publish a Move module",
					"params": [
						{
							"name": "sender",
							"value": "0x9c74337b14141ba3b0357c6625f756b47e76c7f7fa6370dec809cfc6500f54ca"
						},
						{
							"name": "compiled_modules",
							"value": [
								"UDYCDa2aWEDMU0HrzbHIwSynps1KS/SmcWkdXjWE8j1Q/EXOnhbI2+0QILrztBoHkxDT8VpkxGe2ZgprmWO4Dw=="
							]
						},
						{
							"name": "dependencies",
							"value": [
								"0x06850c139e7f8923edd306226efe08d7ed699eafa8f8b8e59a7fa6aa31f481ff"
							]
						},
						{
							"name": "gas_budget",
							"value": "2"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAEBYQBviFz6Y6H4RjBva6ARJNNMc6TT7ATjOibU4ESkWPM8r1nMCMq1OKoR1XrCk9D6J9FtMT9G+kqiBZ3lsU7wwuIDBE8TbGiR+lASjfxn4meOl/IjFf3ci1P8x8FTKwafVU0w2reNWEcaeElutxwsbne6Jo8DkDoOobmA6nL3RXhPeThmlRJ0z5Vlc6AGAAAAAAAg52EjC2IvYUY3YUndrVNlQfdL5hj0pWzgMM0rSmicQbwBAAAAAAAAAAEAAAAAAAAA",
							"gas": {
								"objectId": "0x3a0ea1b980ea72f745784f793866951274cf9565",
								"version": 434291,
								"digest": "52EjC2IvYUY3YUndrVNlQfdL5hj0pWzgMM0rSmicQbw="
							},
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x3a0ea1b980ea72f745784f793866951274cf9565",
										"version": 434291,
										"digest": "52EjC2IvYUY3YUndrVNlQfdL5hj0pWzgMM0rSmicQbw="
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_requestAddStake",
			"summary": "Stake SUI with a validator using multiple input coins",
			"description": "Creates an unsigned transaction to stake SUI by selecting one or more SUI coins,  specifying the amount, and choosing a validator's address. This operation deposits the funds  into the validator’s staking pool. Gas must be paid with a separate coin.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The address of the transaction signer.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coins",
					"required": true,
					"description": "A list of Coin<SUI> object IDs to be used for staking.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "amount",
					"required": true,
					"description": "The amount to stake (in SUI base units).",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "validator",
					"required": true,
					"description": "The address of the validator to which the stake is delegated.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas",
					"required": false,
					"description": "The object ID of the gas coin to be used. If not provided, one will be auto-selected.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "Maximum gas budget for the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The unsigned transaction for adding stake.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "The unsigned transaction encoded in base64."
						},
						"gas": {
							"type": "array",
							"description": "The gas object to be used.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "List of objects required as inputs (e.g., stake coin, Move modules).",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Stake 2 SUI to a validator",
					"params": [
						{
							"name": "signer",
							"value": "0x1f446cc6caa6dff121d1540568e91e89b7e0d36f6e009522c59265c627ed0361"
						},
						{
							"name": "coins",
							"value": [
								"0x74274e3dcc1bcf7360b291e0fd7d5a66c468d56c766664028d34cdd760c00090"
							]
						},
						{
							"name": "amount",
							"value": "2"
						},
						{
							"name": "validator",
							"value": "0x88127002d43aac4a92422b4b35d41e17d72b62d0336751ec52e341c8b8d10ba7"
						},
						{
							"name": "gas",
							"value": "0x8d776bfe8433e298973f7018e195906664985a80d060a288af6f9848094738bb"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAAEAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQEAAAAAAAAAAQEAdCdOPcwbz3NgspHg/X1aZsRo1Wx2ZmQCjTTN12DAAJCkIFQAAAAAACC/HMsNq7PPzkJSKt1qkBzkDWjrvOSrW8fnMi8SJMWFIwAJAQIAAAAAAAAAACCIEnAC1DqsSpJCK0s11B4X1yti0DNnUexS40HIuNELpwIFAAEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMKc3VpX3N5c3RlbRpyZXF1ZXN0X2FkZF9zdGFrZV9tdWxfY29pbgAEAQAAAgAAAQIAAQMAH0Rsxsqm3/Eh0VQFaOkeibfg029uAJUixZJlxiftA2EBC78rbAPLD14T1jSUU168V4VsaKHY/2c0zCGk5G36vA8p4XAAAAAAACAlGdyE6dJy1R1HDv2UJPmpwIxeq/b4rO9kZbkPBIZy1x9EbMbKpt/xIdFUBWjpHom34NNvbgCVIsWSZcYn7QNh6AMAAAAAAADQBwAAAAAAAAA=",
							"gas": [
								{
									"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
									"version": 7397673,
									"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
								}
							],
							"inputObjects": [
								{
									"SharedMoveObject": {
										"id": "0x0000000000000000000000000000000000000000000000000000000000000005",
										"initial_shared_version": "1",
										"mutable": true
									}
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x74274e3dcc1bcf7360b291e0fd7d5a66c468d56c766664028d34cdd760c00090",
										"version": 5513380,
										"digest": "Ds2LSHthqBzpEFDix7iLprGaTFgeDgyZtcDhTmZvDntJ"
									}
								},
								{
									"MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000003"
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
										"version": 7397673,
										"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_requestWithdrawStake",
			"summary": "Withdraw a stake from a validator's staking pool",
			"description": "Creates an unsigned transaction that requests withdrawal of a staked SUI object  from a validator's staking pool. The gas coin must not be part of the staked assets.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "staked_sui",
					"required": true,
					"description": "StakedSui object ID.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas",
					"required": true,
					"description": "Gas object to be used in this transaction. If not provided, one will be auto-selected by the node.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget for the transaction. The transaction will fail if the gas cost exceeds this value.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The unsigned transaction to withdraw stake.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "Base64-encoded BCS transaction bytes."
						},
						"gas": {
							"type": "array",
							"description": "The gas object used in the transaction.",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"description": "List of input objects involved in the transaction.",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Withdraw stake",
					"params": [
						{
							"name": "signer",
							"value": "0xeeb30f4dc675a7d49b8abedf58eb2e3738facfc554c80f4b27ab62aa02878f56"
						},
						{
							"name": "staked_sui",
							"value": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7"
						},
						{
							"name": "gas",
							"value": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7"
						},
						{
							"name": "gas_budget",
							"value": "5000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQEAAAAAAAAAAQEA7mXfRGyJZQRRLLNag/glEMEP0vq13itRo6Y/9vcQbacBAAAAAAAAACAK12msl7LT8P5mymJEPw7iN/uuGhV/TB71nx0TlEikMQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMKc3VpX3N5c3RlbRZyZXF1ZXN0X3dpdGhkcmF3X3N0YWtlAAIBAAABAQDusw9NxnWn1JuKvt9Y6y43OPrPxVTID0snq2KqAoePVgHuZd9EbIllBFEss1qD+CUQwQ/S+rXeK1Gjpj/29xBtpwEAAAAAAAAAIArXaayXstPw/mbKYkQ/DuI3+64aFX9MHvWfHROUSKQx7rMPTcZ1p9Sbir7fWOsuNzj6z8VUyA9LJ6tiqgKHj1bkAgAAAAAAAIgTAAAAAAAAAA==",
							"gas": [
								{
									"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
									"version": 1,
									"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
								}
							],
							"inputObjects": [
								{
									"SharedMoveObject": {
										"id": "0x0000000000000000000000000000000000000000000000000000000000000005",
										"initial_shared_version": "1",
										"mutable": true
									}
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
										"version": 1,
										"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
									}
								},
								{
									"MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000003"
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0xee65df446c896504512cb35a83f82510c10fd2fab5de2b51a3a63ff6f7106da7",
										"version": 1,
										"digest": "jKbAsTuqaK9k6hb27Z5xxnQVmTSWoU6dkL82x44c2dW"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_splitCoin",
			"summary": "Create an unsigned transaction to split a coin object into multiple coins.",
			"description": "Creates a transaction that splits a coin into multiple coins with specific amounts. This is useful for dividing SUI coins before transferring or staking.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coin_object_id",
					"required": true,
					"description": "The coin object to be split.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "split_amounts",
					"required": true,
					"description": "The amounts to split out from the coin.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				},
				{
					"name": "gas",
					"required": true,
					"description": "The gas object to be used in this transaction. If not specified, the node selects one automatically.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget. The transaction fails if the cost exceeds this amount.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The unsigned transaction bytes and input objects.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "BCS serialized transaction data bytes, base64 encoded."
						},
						"gas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Split coin into one output",
					"params": [
						{
							"name": "signer",
							"value": "0x563ee81d153032ef327b349420cf91e28a8d5528cbdcae5c108093a8a3879abb"
						},
						{
							"name": "coin_object_id",
							"value": "0x8d776bfe8433e298973f7018e195906664985a80d060a288af6f9848094738bb"
						},
						{
							"name": "split_amounts",
							"value": [
								"2"
							]
						},
						{
							"name": "gas",
							"value": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACAQAAP5wPUztPcrOOTf2Q8mwp8FLrhVq4+xkS0grC45rDvCKgEAAAAAAAIPTdUyUhkhrkLz3h/2BpV7H2ZXm6WUv66fIHIPSPLJavAAkBAgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA3BheQlzcGxpdF92ZWMBB4XFtkmIexd3hWGjoJvBpHQrn5nJp5dj6JrMCl3cI+y1A2V0aANFVEgAAgEAAAEBAFY+6B0VMDLvMns0lCDPkeKKjVUoy9yuXBCAk6ijh5q7AQu/K2wDyw9eE9Y0lFNevFeFbGih2P9nNMwhpORt+rwPKeFwAAAAAAAgJRnchOnSctUdRw79lCT5qcCMXqv2+KzvZGW5DwSGctdWPugdFTAy7zJ7NJQgz5Hiio1VKMvcrlwQgJOoo4eau+gDAAAAAAAA0AcAAAAAAAAA",
							"gas": [
								{
									"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
									"version": 7397673,
									"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc",
										"version": 1089570,
										"digest": "HUrDhmdBEtQW8LBAd2fdQrqznLedy16rPjME6WdZqCsG"
									}
								},
								{
									"MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000002"
								},
								{
									"MovePackage": "0x85c5b649887b17778561a3a09bc1a4742b9f99c9a79763e89acc0a5ddc23ecb5"
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
										"version": 7397673,
										"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_splitCoinEqual",
			"summary": "Create an unsigned transaction to split a coin object into multiple equal-size coins.",
			"description": "Splits a coin into multiple equally-sized parts. The transaction returns `txBytes` and the objects involved.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "coin_object_id",
					"required": true,
					"description": "The coin object to be split.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "split_count",
					"required": true,
					"description": "The number of equal-size coins to split into.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas",
					"required": true,
					"description": "The gas object to use in this transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The maximum gas budget for executing the transaction.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The unsigned transaction bytes and object metadata.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string",
							"description": "BCS serialized transaction data bytes (base64)."
						},
						"gas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Split coin into 2 equal parts",
					"params": [
						{
							"name": "signer",
							"value": "0x563ee81d153032ef327b349420cf91e28a8d5528cbdcae5c108093a8a3879abb"
						},
						{
							"name": "coin_object_id",
							"value": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc"
						},
						{
							"name": "split_count",
							"value": "2"
						},
						{
							"name": "gas",
							"value": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACAQAAP5wPUztPcrOOTf2Q8mwp8FLrhVq4+xkS0grC45rDvCKgEAAAAAAAIPTdUyUhkhrkLz3h/2BpV7H2ZXm6WUv66fIHIPSPLJavAAgCAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDcGF5D2RpdmlkZV9hbmRfa2VlcAEHhcW2SYh7F3eFYaOgm8GkdCufmcmnl2PomswKXdwj7LUDZXRoA0VUSAACAQAAAQEAVj7oHRUwMu8yezSUIM+R4oqNVSjL3K5cEICTqKOHmrsBC78rbAPLD14T1jSUU168V4VsaKHY/2c0zCGk5G36vA8p4XAAAAAAACAlGdyE6dJy1R1HDv2UJPmpwIxeq/b4rO9kZbkPBIZy11Y+6B0VMDLvMns0lCDPkeKKjVUoy9yuXBCAk6ijh5q76AMAAAAAAADQBwAAAAAAAAA",
							"gas": [
								{
									"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
									"version": 7397673,
									"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc",
										"version": 1089570,
										"digest": "HUrDhmdBEtQW8LBAd2fdQrqznLedy16rPjME6WdZqCsG"
									}
								},
								{
									"MovePackage": "0x0000000000000000000000000000000000000000000000000000000000000002"
								},
								{
									"MovePackage": "0x85c5b649887b17778561a3a09bc1a4742b9f99c9a79763e89acc0a5ddc23ecb5"
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
										"version": 7397673,
										"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_transferObject",
			"summary": "Create an unsigned transaction to transfer an object from one address to another.",
			"description": "Transfers an object that supports public transfer from the signer to a recipient address. The gas object must be distinct from the object being transferred.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "object_id",
					"required": true,
					"description": "The object to be transferred.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas",
					"required": true,
					"description": "The gas object used for this transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget (uint64).",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "recipient",
					"required": true,
					"description": "The address to which the object is transferred.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Transaction block bytes and object metadata for signing and execution.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string"
						},
						"gas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Transfer a coin object to a recipient",
					"params": [
						{
							"name": "signer",
							"value": "0x563ee81d153032ef327b349420cf91e28a8d5528cbdcae5c108093a8a3879abb"
						},
						{
							"name": "object_id",
							"value": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc"
						},
						{
							"name": "gas",
							"value": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						},
						{
							"name": "recipient",
							"value": "0xeeb30f4dc675a7d49b8abedf58eb2e3738facfc554c80f4b27ab62aa02878f56"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACACDusw9NxnWn1JuKvt9Y6y43OPrPxVTID0snq2KqAoePVgEAAD+cD1M7T3Kzjk39kPJsKfBS64VauPsZEtIKwuOaw7wioBAAAAAAACD03VMlIZIa5C894f9gaVex9mV5ullL+unyByD0jyyWrwEBAQEBAAEAAFY+6B0VMDLvMns0lCDPkeKKjVUoy9yuXBCAk6ijh5q7AQu/K2wDyw9eE9Y0lFNevFeFbGih2P9nNMwhpORt+rwPKeFwAAAAAAAgJRnchOnSctUdRw79lCT5qcCMXqv2+KzvZGW5DwSGctdWPugdFTAy7zJ7NJQgz5Hiio1VKMvcrlwQgJOoo4eau+gDAAAAAAAA0AcAAAAAAAAA",
							"gas": [
								{
									"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
									"version": 7397673,
									"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc",
										"version": 1089570,
										"digest": "HUrDhmdBEtQW8LBAd2fdQrqznLedy16rPjME6WdZqCsG"
									}
								},
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x0bbf2b6c03cb0f5e13d63494535ebc57856c68a1d8ff6734cc21a4e46dfabc0f",
										"version": 7397673,
										"digest": "3VpxVaviG7RykDVLx1A21yT5YD1QFJpo1AWv5hJxQjKt"
									}
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "unsafe_transferSui",
			"summary": "Create an unsigned transaction to send a SUI coin object to a Sui address.",
			"description": "Transfers SUI to a recipient using a single coin object, which is also used to pay gas. Internally performs a split and transfer using the same coin.\n> ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.\n",
			"params": [
				{
					"name": "signer",
					"required": true,
					"description": "The transaction signer's Sui address.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "sui_object_id",
					"required": true,
					"description": "The SUI coin object to use in this transaction.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "gas_budget",
					"required": true,
					"description": "The gas budget, the transaction will fail if exceeded.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "recipient",
					"required": true,
					"description": "The address receiving the SUI.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "amount",
					"required": true,
					"description": "The amount of SUI to transfer.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Transaction bytes and related input object metadata.",
				"schema": {
					"type": "object",
					"properties": {
						"txBytes": {
							"type": "string"
						},
						"gas": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"objectId": {
										"type": "string"
									},
									"version": {
										"type": "integer"
									},
									"digest": {
										"type": "string"
									}
								}
							}
						},
						"inputObjects": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Transfer SUI and pay gas from same coin",
					"params": [
						{
							"name": "signer",
							"value": "0x563ee81d153032ef327b349420cf91e28a8d5528cbdcae5c108093a8a3879abb"
						},
						{
							"name": "sui_object_id",
							"value": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc"
						},
						{
							"name": "gas_budget",
							"value": "2000"
						},
						{
							"name": "recipient",
							"value": "0xeeb30f4dc675a7d49b8abedf58eb2e3738facfc554c80f4b27ab62aa02878f56"
						},
						{
							"name": "amount",
							"value": "2"
						}
					],
					"result": {
						"name": "result",
						"value": {
							"txBytes": "AAACACDusw9NxnWn1JuKvt9Y6y43OPrPxVTID0snq2KqAoePVgAIAgAAAAAAAAACAgABAQEAAQECAAABAABWPugdFTAy7zJ7NJQgz5Hiio1VKMvcrlwQgJOoo4eauwEAP5wPUztPcrOOTf2Q8mwp8FLrhVq4+xkS0grC45rDvCKgEAAAAAAAIPTdUyUhkhrkLz3h/2BpV7H2ZXm6WUv66fIHIPSPLJavVj7oHRUwMu8yezSUIM+R4oqNVSjL3K5cEICTqKOHmrvoAwAAAAAAANAHAAAAAAAAAA==",
							"gas": [
								{
									"objectId": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc",
									"version": 1089570,
									"digest": "HUrDhmdBEtQW8LBAd2fdQrqznLedy16rPjME6WdZqCsG"
								}
							],
							"inputObjects": [
								{
									"ImmOrOwnedMoveObject": {
										"objectId": "0x003f9c0f533b4f72b38e4dfd90f26c29f052eb855ab8fb1912d20ac2e39ac3bc",
										"version": 1089570,
										"digest": "HUrDhmdBEtQW8LBAd2fdQrqznLedy16rPjME6WdZqCsG"
									}
								}
							]
						}
					}
				}
			]
		}
	]
}