{
	"x-generated-warning": "⚠️ This file is auto-generated. Do not edit manually",
	"$schema": "https://meta.open-rpc.org/",
	"openrpc": "1.2.4",
	"info": {
		"title": "Alchemy Bitcoin JSON-RPC Specification",
		"description": "A specification of the standard JSON-RPC methods for Bitcoin.",
		"version": "0.0.0"
	},
	"servers": [
		{
			"url": "https://bitcoin-mainnet.alchemy-blast.com/v2",
			"name": "Bitcoin Mainnet"
		},
		{
			"url": "https://bitcoin-mainnet.alchemy-blast.com/v2",
			"name": "Bitcoin Testnet"
		}
	],
	"methods": [
		{
			"name": "decoderawtransaction",
			"summary": "Decode a raw transaction hex string",
			"description": "Decodes a serialized, hex-encoded Bitcoin transaction. Returns detailed information about inputs, outputs, size, witness data, etc.\n",
			"params": [
				{
					"name": "hexstring",
					"required": true,
					"description": "The transaction hex string to decode.",
					"schema": {
						"title": "Raw Transaction Hex",
						"type": "string",
						"pattern": "^[a-fA-F0-9]+$",
						"description": "A serialized, hex-encoded Bitcoin transaction.",
						"example": "0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
					}
				},
				{
					"name": "iswitness",
					"required": false,
					"description": "Indicates whether the transaction includes witness data. If omitted, heuristic decoding is applied.\n",
					"schema": {
						"type": "boolean",
						"example": true
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A JSON object representing the decoded transaction.",
				"schema": {
					"type": "object",
					"properties": {
						"txid": {
							"title": "Bitcoin Transaction ID",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "A 64-character hex string identifying a transaction.",
							"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
						},
						"hash": {
							"title": "Bitcoin Block Hash",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "The transaction hash (differs from txid for witness transactions).",
							"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
						},
						"size": {
							"type": "integer",
							"example": 107
						},
						"vsize": {
							"type": "integer",
							"example": 107
						},
						"weight": {
							"type": "integer",
							"example": 428
						},
						"version": {
							"type": "integer",
							"example": 2
						},
						"locktime": {
							"type": "integer",
							"example": 0
						},
						"vin": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"txid": {
										"title": "Bitcoin Transaction ID",
										"type": "string",
										"pattern": "^[a-fA-F0-9]{64}$",
										"description": "A 64-character hex string identifying a transaction.",
										"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
									},
									"vout": {
										"type": "integer",
										"example": 0
									},
									"scriptSig": {
										"type": "object",
										"properties": {
											"asm": {
												"type": "string",
												"example": ""
											},
											"hex": {
												"type": "string",
												"example": ""
											}
										}
									},
									"txinwitness": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"sequence": {
										"type": "integer",
										"example": 4294967295
									}
								}
							}
						},
						"vout": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"value": {
										"type": "number",
										"format": "double",
										"example": 0
									},
									"n": {
										"type": "integer",
										"example": 0
									},
									"scriptPubKey": {
										"type": "object",
										"properties": {
											"asm": {
												"type": "string",
												"example": "OP_RETURN 00010203"
											},
											"desc": {
												"type": "string",
												"example": "raw(6a0400010203)"
											},
											"hex": {
												"type": "string",
												"example": "6a0400010203"
											},
											"type": {
												"type": "string",
												"example": "nulldata"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "decodescript",
			"summary": "Decode a hex-encoded script",
			"description": "Decodes a hex-encoded script and provides detailed information about it.\n",
			"params": [
				{
					"name": "hexstring",
					"required": true,
					"description": "The hex-encoded script.",
					"schema": {
						"title": "Hex-encoded Script",
						"type": "string",
						"pattern": "^[a-fA-F0-9]+$",
						"description": "A hex-encoded script for use in decoding.",
						"example": "0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Decoded script information.",
				"schema": {
					"type": "object",
					"properties": {
						"asm": {
							"type": "string",
							"description": "The script public key in the form of a string.",
							"example": "0 0x01 0x01 0x02 0x93"
						},
						"type": {
							"type": "string",
							"description": "Output type (e.g., nonstandard, pubkeyhash, scripthash, etc.).",
							"example": "nonstandard"
						},
						"reqSigs": {
							"type": "integer",
							"description": "Number of required signatures.",
							"example": 1
						},
						"addresses": {
							"type": "array",
							"description": "A list of Bitcoin addresses used in the transaction.",
							"example": [
								"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080"
							],
							"items": {
								"type": "string"
							}
						},
						"p2sh": {
							"type": "string",
							"description": "Address of the P2SH script wrapping this redeem script.",
							"example": "3CMNFxN1oHBc4R1EpboAL5yzHGgE611Xou"
						},
						"segwit": {
							"type": "object",
							"description": "Result of a witness script public key wrapping this redeem script.",
							"properties": {
								"asm": {
									"type": "string",
									"description": "The script public key in the form of string.",
									"example": "0 751e76e8199196d454941c45d1b3a323f1433bd6"
								},
								"hex": {
									"type": "string",
									"description": "The hex of the script's public key.",
									"example": "0014751e76e8199196d454941c45d1b3a323f1433bd6"
								},
								"type": {
									"type": "string",
									"description": "Type of the script public key.",
									"example": "witness_v0_keyhash"
								},
								"reqSigs": {
									"type": "integer",
									"description": "Required signatures.",
									"example": 1
								},
								"addresses": {
									"type": "array",
									"description": "List of Bitcoin addresses.",
									"example": [
										"bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080"
									],
									"items": {
										"type": "string"
									}
								},
								"p2sh-segwit": {
									"type": "string",
									"description": "Address of the P2SH script wrapping this witness redeem script.",
									"example": "3NukJ6fYZJ5Kk8bPjycAnruZkE5Q7UW7i8"
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "estimatesmartfee",
			"summary": "Estimate smart fee for confirmation within target blocks",
			"description": "Estimates the approximate fee per kilobyte required for a transaction to begin confirmation within `conf_target` blocks. Uses BIP 141 virtual transaction size.\n",
			"params": [
				{
					"name": "conf_target",
					"required": true,
					"description": "Number of blocks within which confirmation is targeted.",
					"schema": {
						"type": "integer",
						"minimum": 1,
						"maximum": 1008,
						"example": 6
					}
				},
				{
					"name": "estimate_mode",
					"required": false,
					"description": "Fee estimate mode. Options are \"UNSET\", \"ECONOMICAL\", or \"CONSERVATIVE\".\n",
					"schema": {
						"type": "string",
						"enum": [
							"UNSET",
							"ECONOMICAL",
							"CONSERVATIVE"
						],
						"example": "CONSERVATIVE"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Estimated fee rate and corresponding target blocks.",
				"schema": {
					"type": "object",
					"properties": {
						"feerate": {
							"type": "number",
							"format": "double",
							"description": "Estimated fee rate in BTC per KB.",
							"example": 0.00021051
						},
						"blocks": {
							"type": "integer",
							"description": "The actual confirmation target (may differ if estimate unavailable).",
							"example": 6
						}
					}
				}
			}
		},
		{
			"name": "getbestblockhash",
			"summary": "Get the best (tip) block hash of the longest valid chain",
			"description": "Returns the hash of the most-work fully-validated tip block in the active Bitcoin blockchain.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The hash of the best block in the longest chain.",
				"schema": {
					"title": "Bitcoin Block Hash",
					"type": "string",
					"pattern": "^[a-fA-F0-9]{64}$",
					"description": "A 64-character hex string representing the block hash.",
					"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
				}
			}
		},
		{
			"name": "getblock",
			"summary": "Get block details by block hash",
			"description": "Returns information about a block, based on the provided block hash.\n",
			"params": [
				{
					"name": "blockhash",
					"required": true,
					"description": "The hash of the block to retrieve.",
					"schema": {
						"title": "Bitcoin Block Hash",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string representing the block hash.",
						"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
					}
				},
				{
					"name": "verbosity",
					"required": false,
					"description": "Level of detail to return.  - 0: hex-encoded string, - 1: basic block info, - 2: with transactions, - 3: with transactions + input prevouts.\n",
					"schema": {
						"type": "integer",
						"default": 1,
						"enum": [
							0,
							1,
							2,
							3
						]
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The block object or hex string, depending on verbosity.",
				"schema": {
					"title": "Bitcoin Block",
					"type": "object",
					"required": [
						"hash",
						"confirmations",
						"height",
						"version",
						"merkleroot",
						"time",
						"tx"
					],
					"properties": {
						"hash": {
							"type": "string",
							"description": "The block hash.",
							"example": "00000000000000000001135510bc76c371b4b425c9c69e5c2f474e96c51bedc6"
						},
						"confirmations": {
							"type": "integer",
							"description": "Number of confirmations or -1 if block not on main chain.",
							"example": 134
						},
						"size": {
							"type": "integer",
							"description": "Block size in bytes.",
							"example": 1234567
						},
						"strippedsize": {
							"type": "integer",
							"description": "Block size excluding witness data.",
							"example": 900000
						},
						"weight": {
							"type": "integer",
							"description": "Block weight as defined in BIP 141.",
							"example": 399936
						},
						"height": {
							"type": "integer",
							"description": "Block height or index.",
							"example": 812345
						},
						"version": {
							"type": "integer",
							"description": "Block version.",
							"example": 543210
						},
						"versionHex": {
							"type": "string",
							"description": "Block version in hex.",
							"example": "20000000"
						},
						"merkleroot": {
							"type": "string",
							"description": "Merkle root.",
							"example": "4d44f3c6209fa0c44f67a8e9f867e0d6a5e1d79ad0ec10a2d258c31753d0512e"
						},
						"time": {
							"type": "integer",
							"description": "Block time in UNIX timestamp.",
							"example": 1700000000
						},
						"mediantime": {
							"type": "integer",
							"description": "Median block time.",
							"example": 1699995000
						},
						"nonce": {
							"type": "integer",
							"description": "Nonce used for mining.",
							"example": 1234567890
						},
						"bits": {
							"type": "string",
							"description": "nBits field of block header.",
							"example": "170d5c6f"
						},
						"difficulty": {
							"type": "number",
							"format": "double",
							"description": "Difficulty at the time of mining.",
							"example": 3421101832.109
						},
						"chainwork": {
							"type": "string",
							"description": "Expected number of hashes to produce the chain.",
							"example": "000000000000000000000000000000000000000000f8f8f8f8f8f8f8f8f8f8f8"
						},
						"nTx": {
							"type": "integer",
							"description": "Number of transactions in the block.",
							"example": 2456
						},
						"previousblockhash": {
							"type": "string",
							"description": "Hash of the previous block.",
							"example": "00000000000000000001135510bc76c371b4b425c9c69e5c2f474e96c51bedc6"
						},
						"nextblockhash": {
							"type": "string",
							"description": "Hash of the next block.",
							"example": "000000000000000000006058431de7ad87def03c28228bb5742b343dc223e399"
						},
						"tx": {
							"type": "array",
							"description": "List of transaction IDs included in the block.",
							"items": {
								"type": "string",
								"description": "Transaction ID",
								"example": "c86b4846175942038cc9da086e506aa8a441beada92f1678fb1fe35d640366db"
							}
						}
					}
				}
			}
		},
		{
			"name": "getblockchaininfo",
			"summary": "Retrieve general information about the blockchain.",
			"description": "Returns an object containing state details related to blockchain processing, network, and storage information.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "Blockchain status information.",
				"schema": {
					"title": "Bitcoin Blockchain Info",
					"type": "object",
					"required": [
						"chain",
						"blocks",
						"headers",
						"bestblockhash",
						"difficulty",
						"time",
						"mediantime",
						"verificationprogress",
						"initialblockdownload",
						"chainwork",
						"size_on_disk",
						"pruned"
					],
					"properties": {
						"chain": {
							"type": "string",
							"description": "Current network name (main, test, regtest).",
							"example": "main"
						},
						"blocks": {
							"type": "integer",
							"description": "The current number of blocks.",
							"example": 830259
						},
						"headers": {
							"type": "integer",
							"description": "The current number of headers.",
							"example": 830259
						},
						"bestblockhash": {
							"type": "string",
							"description": "The hash of the best block.",
							"example": "000000000000000000025c1be24710e2455dbd3d9560e45b4f5d904e9717598c"
						},
						"difficulty": {
							"type": "number",
							"format": "double",
							"description": "The current difficulty.",
							"example": 75502165623893.72
						},
						"time": {
							"type": "integer",
							"description": "Timestamp of the best block.",
							"example": 1707812560
						},
						"mediantime": {
							"type": "integer",
							"description": "Median time of the blockchain.",
							"example": 1707809509
						},
						"verificationprogress": {
							"type": "number",
							"format": "double",
							"description": "Estimate of verification progress (0.0–1.0).",
							"example": 0.9999995194235158
						},
						"initialblockdownload": {
							"type": "boolean",
							"description": "Whether the node is in IBD (initial block download).",
							"example": false
						},
						"chainwork": {
							"type": "string",
							"description": "Expected number of hashes required to produce the chain.",
							"example": "00000000000000000000000000000000000000006a17a5b7216cb5116d1778a0"
						},
						"size_on_disk": {
							"type": "integer",
							"description": "Estimated size of the blockchain stored on disk in bytes.",
							"example": 623055614995
						},
						"pruned": {
							"type": "boolean",
							"description": "If the blockchain is pruned.",
							"example": false
						},
						"warnings": {
							"type": "string",
							"description": "Any network or blockchain warnings.",
							"example": ""
						}
					}
				}
			}
		},
		{
			"name": "getblockcount",
			"summary": "Get the current block count",
			"description": "Returns the number of blocks in the longest fully validated blockchain.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The number of blocks in the current best blockchain.",
				"schema": {
					"title": "Block Height",
					"type": "integer",
					"minimum": 0,
					"description": "The block height (index) used to fetch the block hash.",
					"example": 23465
				}
			}
		},
		{
			"name": "getblockhash",
			"summary": "Get block hash by block height",
			"description": "Returns the hash of the block at a given height (index) in the active Bitcoin blockchain.\n",
			"params": [
				{
					"name": "height",
					"required": true,
					"description": "The height of the block to retrieve the hash for.",
					"schema": {
						"title": "Block Height",
						"type": "integer",
						"minimum": 0,
						"description": "The block height (index) used to fetch the block hash.",
						"example": 23465
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The hash of the block at the specified height.",
				"schema": {
					"title": "Bitcoin Block Hash",
					"type": "string",
					"pattern": "^[a-fA-F0-9]{64}$",
					"description": "A 64-character hex string representing the block hash.",
					"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
				}
			}
		},
		{
			"name": "getblockheader",
			"summary": "Get block header by block hash",
			"description": "Returns the block header for the specified block hash.\n",
			"params": [
				{
					"name": "blockhash",
					"required": true,
					"description": "The block hash to retrieve the header for.",
					"schema": {
						"title": "Bitcoin Block Hash",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string representing the block hash.",
						"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
					}
				},
				{
					"name": "verbose",
					"required": false,
					"description": "Whether to return a JSON object (true) or raw hex-encoded string (false). Default is true.\n",
					"schema": {
						"type": "boolean",
						"default": true
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The block header as an object or hex string depending on verbose.",
				"schema": {
					"oneOf": [
						{
							"title": "Block Header (Verbose = true)",
							"type": "object",
							"required": [
								"hash",
								"confirmations",
								"height",
								"version",
								"versionHex",
								"merkleroot",
								"time",
								"mediantime",
								"nonce",
								"bits",
								"difficulty",
								"chainwork",
								"nTx",
								"previousblockhash",
								"nextblockhash"
							],
							"properties": {
								"hash": {
									"type": "string",
									"description": "Hash of the block.",
									"example": "000000000000000000013f2851d71e6ea8dfcc9151654ca4cbbbfd759122589f"
								},
								"confirmations": {
									"type": "integer",
									"description": "Number of confirmations, or -1 if not on main chain.",
									"example": 45595
								},
								"height": {
									"type": "integer",
									"description": "Block height or index.",
									"example": 784665
								},
								"version": {
									"type": "integer",
									"description": "Block version.",
									"example": 683581440
								},
								"versionHex": {
									"type": "string",
									"description": "Block version in hex.",
									"example": "28bea000"
								},
								"merkleroot": {
									"type": "string",
									"description": "Merkle root of the block.",
									"example": "d8f4f9edd1c0a37a705289b7202a3d3b67ef46a20f88c27c88fe757aa87f17c5"
								},
								"time": {
									"type": "integer",
									"description": "Block time (UNIX timestamp).",
									"example": 1681051849
								},
								"mediantime": {
									"type": "integer",
									"description": "Median time of previous 11 blocks.",
									"example": 1681049210
								},
								"nonce": {
									"type": "integer",
									"description": "Nonce used to generate this block.",
									"example": 2450381578
								},
								"bits": {
									"type": "string",
									"description": "Compact target (difficulty) representation.",
									"example": "1705e0b2"
								},
								"difficulty": {
									"type": "number",
									"format": "double",
									"description": "Network difficulty at time of block.",
									"example": 47887764338536.25
								},
								"chainwork": {
									"type": "string",
									"description": "Expected number of hashes to produce the chain up to this block.",
									"example": "000000000000000000000000000000000000000045155fb82c72a339d3522688"
								},
								"nTx": {
									"type": "integer",
									"description": "Number of transactions in the block.",
									"example": 169
								},
								"previousblockhash": {
									"type": "string",
									"description": "Hash of the previous block.",
									"example": "00000000000000000001135510bc76c371b4b425c9c69e5c2f474e96c51bedc6"
								},
								"nextblockhash": {
									"type": "string",
									"description": "Hash of the next block.",
									"example": "000000000000000000006058431de7ad87def03c28228bb5742b343dc223e399"
								}
							}
						},
						{
							"type": "string",
							"description": "Hex-encoded block header"
						}
					]
				}
			}
		},
		{
			"name": "getblockstats",
			"summary": "Get per-block statistics",
			"description": "Calculates various statistics for a given block by hash or height.\n",
			"params": [
				{
					"name": "hash_or_height",
					"required": true,
					"description": "The block hash (string) or height (integer) of the target block.",
					"schema": {
						"oneOf": [
							{
								"title": "Bitcoin Block Hash",
								"type": "string",
								"pattern": "^[a-fA-F0-9]{64}$",
								"description": "A 64-character hex string representing the block hash.",
								"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
							},
							{
								"title": "Block Height",
								"type": "integer",
								"minimum": 0,
								"description": "The block height (index) used to fetch the block hash.",
								"example": 23465
							}
						]
					}
				},
				{
					"name": "stats",
					"required": false,
					"description": "Optional list of specific stats to retrieve. If empty or omitted, returns all stats.\n",
					"schema": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A set of statistical metrics for the specified block.",
				"schema": {
					"title": "Bitcoin Block Statistics",
					"type": "object",
					"properties": {
						"avgfee": {
							"type": "integer",
							"description": "Average fee in the block (satoshis)",
							"example": 3510
						},
						"avgfeerate": {
							"type": "integer",
							"description": "Average fee rate",
							"example": 12
						},
						"avgtxsize": {
							"type": "integer",
							"description": "Average transaction size",
							"example": 234
						},
						"blockhash": {
							"title": "Bitcoin Block Hash",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "A 64-character hex string representing the block hash.",
							"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
						},
						"feerate_percentiles": {
							"type": "array",
							"description": "Feerates at 10th, 25th, 50th, 75th, and 90th percentile",
							"example": [
								1,
								3,
								5,
								10,
								20
							],
							"items": {
								"type": "integer"
							}
						},
						"height": {
							"title": "Block Height",
							"type": "integer",
							"minimum": 0,
							"description": "The block height (index) used to fetch the block hash.",
							"example": 23465
						},
						"ins": {
							"type": "integer",
							"description": "Number of inputs",
							"example": 4890
						},
						"outs": {
							"type": "integer",
							"description": "Number of outputs",
							"example": 5100
						},
						"maxfee": {
							"type": "integer",
							"example": 100000
						},
						"maxfeerate": {
							"type": "integer",
							"example": 150
						},
						"maxtxsize": {
							"type": "integer",
							"example": 1024
						},
						"medianfee": {
							"type": "integer",
							"example": 3200
						},
						"mediantime": {
							"type": "integer",
							"example": 1681049210
						},
						"mediantxsize": {
							"type": "integer",
							"example": 225
						},
						"minfee": {
							"type": "integer",
							"example": 50
						},
						"minfeerate": {
							"type": "integer",
							"example": 1
						},
						"mintxsize": {
							"type": "integer",
							"example": 120
						},
						"subsidy": {
							"type": "integer",
							"example": 625000000
						},
						"swtotal_size": {
							"type": "integer",
							"example": 800000
						},
						"swtotal_weight": {
							"type": "integer",
							"example": 3200000
						},
						"swtxs": {
							"type": "integer",
							"example": 1800
						},
						"time": {
							"type": "integer",
							"example": 1700000000
						},
						"total_out": {
							"type": "integer",
							"example": 12500000000
						},
						"total_size": {
							"type": "integer",
							"example": 1200000
						},
						"total_weight": {
							"type": "integer",
							"example": 3999999
						},
						"totalfee": {
							"type": "integer",
							"example": 520000
						},
						"txs": {
							"type": "integer",
							"example": 2456
						},
						"utxo_increase": {
							"type": "integer",
							"example": 123
						},
						"utxo_size_inc": {
							"type": "integer",
							"example": 456
						}
					}
				}
			}
		},
		{
			"name": "getchaintips",
			"summary": "Get information about all known tips in the block tree",
			"description": "Returns information about all known tips in the block tree, including the active chain tip and orphaned branches.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "An array of chain tip information objects.",
				"schema": {
					"type": "array",
					"items": {
						"title": "Bitcoin Chain Tip",
						"type": "object",
						"required": [
							"height",
							"hash",
							"branchlen",
							"status"
						],
						"properties": {
							"height": {
								"type": "integer",
								"description": "The height of the chain tip.",
								"example": 812345
							},
							"hash": {
								"type": "string",
								"description": "The block hash of the chain tip.",
								"example": "0000000000000000000a7f31c7ec617cb84c7fcd41b40f42b79b1cbd407d8c5f"
							},
							"branchlen": {
								"type": "integer",
								"description": "Length of the branch connecting the tip to the main chain (0 for main chain).",
								"example": 0
							},
							"status": {
								"type": "string",
								"description": "Status of the chain tip: - active: tip of the main chain - valid-fork: fully validated but not active - valid-headers: headers valid but blocks not fully validated - headers-only: only headers are available - invalid: contains at least one invalid block\n",
								"enum": [
									"active",
									"valid-fork",
									"valid-headers",
									"headers-only",
									"invalid"
								],
								"example": "active"
							}
						}
					}
				}
			}
		},
		{
			"name": "getchaintxstats",
			"summary": "Get chain transaction statistics",
			"description": "Calculates statistics about the overall transaction rate and volume of the blockchain over a window of blocks.\n",
			"params": [
				{
					"name": "nblocks",
					"required": false,
					"description": "The size of the window in number of blocks. Defaults to approximately one month.",
					"schema": {
						"type": "integer",
						"example": 2016
					}
				},
				{
					"name": "blockhash",
					"required": false,
					"description": "The block hash at which the window ends. Defaults to chain tip.",
					"schema": {
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"example": "000000000000000000035c8582f22752a268f5695379597ce9405e10c4051be6"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The calculated chain transaction statistics.",
				"schema": {
					"title": "Bitcoin Chain Transaction Statistics",
					"type": "object",
					"required": [
						"time",
						"txcount",
						"window_final_block_hash",
						"window_final_block_height",
						"window_block_count",
						"window_tx_count",
						"window_interval",
						"txrate"
					],
					"properties": {
						"time": {
							"type": "integer",
							"description": "Timestamp for the last block in the window (UNIX epoch).",
							"example": 1707831750
						},
						"txcount": {
							"type": "integer",
							"description": "Total number of transactions up to the final block.",
							"example": 965252756
						},
						"window_final_block_hash": {
							"type": "string",
							"description": "Hash of the final block in the window.",
							"example": "000000000000000000035c8582f22752a268f5695379597ce9405e10c4051be6"
						},
						"window_final_block_height": {
							"type": "integer",
							"description": "Height of the final block in the window.",
							"example": 830289
						},
						"window_block_count": {
							"type": "integer",
							"description": "Number of blocks included in the window.",
							"example": 2016
						},
						"window_tx_count": {
							"type": "integer",
							"description": "Number of transactions in the window.",
							"example": 4723063
						},
						"window_interval": {
							"type": "integer",
							"description": "Elapsed time (in seconds) across the window.",
							"example": 1103416
						},
						"txrate": {
							"type": "number",
							"format": "double",
							"description": "Average transaction rate per second across the window.",
							"example": 4.280401045480581
						}
					}
				}
			}
		},
		{
			"name": "getconnectioncount",
			"summary": "Get the number of connections to other nodes",
			"description": "Returns the number of connections to other nodes (both inbound and outbound).\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The total number of connections.",
				"schema": {
					"type": "integer",
					"example": 8
				}
			}
		},
		{
			"name": "getdifficulty",
			"summary": "Get the current proof-of-work difficulty",
			"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "The difficulty of the current best block as a floating-point number.",
				"schema": {
					"title": "Bitcoin Proof-of-Work Difficulty",
					"type": "number",
					"format": "double",
					"description": "The proof-of-work difficulty as a multiple of the minimum difficulty.",
					"example": 75502165623893.72
				}
			}
		},
		{
			"name": "getindexinfo",
			"summary": "Get information about one or all available indices",
			"description": "Returns the state of one or all available indices currently running.  You can optionally filter the results by a specific index name.\n",
			"params": [
				{
					"name": "index_name",
					"required": false,
					"description": "Filter results for an index with a specific name.\n",
					"schema": {
						"type": "string",
						"example": "txindex"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A mapping of index names to their respective info.",
				"schema": {
					"type": "object",
					"additionalProperties": {
						"type": "object",
						"properties": {
							"txindex": {
								"type": "string",
								"description": "The index name.",
								"example": "txindex"
							},
							"synced": {
								"type": "boolean",
								"description": "Whether the index is fully synced.",
								"example": true
							},
							"best_block_height": {
								"type": "integer",
								"description": "The block height to which the index is synced.",
								"example": 830289
							}
						}
					}
				}
			}
		},
		{
			"name": "getmemoryinfo",
			"summary": "Get memory usage information",
			"description": "Returns information about memory usage, either general statistics (\"stats\") or heap information (\"mallocinfo\").\n",
			"params": [
				{
					"name": "mode",
					"required": false,
					"description": "Determines what kind of information is returned: - \"stats\" returns general statistics about memory usage. - \"mallocinfo\" returns an XML string describing low-level heap state.\n",
					"schema": {
						"type": "string",
						"enum": [
							"stats",
							"mallocinfo"
						]
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Memory usage details.",
				"schema": {
					"type": "object",
					"properties": {
						"locked": {
							"type": "object",
							"description": "Information about locked memory.",
							"properties": {
								"used": {
									"type": "integer",
									"description": "Used memory in KB.",
									"example": 352
								},
								"free": {
									"type": "integer",
									"description": "Free memory in KB.",
									"example": 65184
								},
								"total": {
									"type": "integer",
									"description": "Total memory available in KB.",
									"example": 65536
								},
								"locked": {
									"type": "integer",
									"description": "Locked memory in KB.",
									"example": 65536
								},
								"chunks_used": {
									"type": "integer",
									"description": "Number of used memory chunks.",
									"example": 1
								},
								"chunks_free": {
									"type": "integer",
									"description": "Number of free memory chunks.",
									"example": 1
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "getmempoolancestors",
			"summary": "Get mempool ancestors of a transaction",
			"description": "Returns the in-mempool ancestors of a given transaction.\n",
			"params": [
				{
					"name": "txid",
					"required": true,
					"description": "The transaction ID whose ancestors to retrieve.",
					"schema": {
						"title": "Bitcoin Transaction ID",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string identifying a transaction.",
						"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
					}
				},
				{
					"name": "verbose",
					"required": false,
					"description": "Whether to return detailed info (true) or just txids (false).",
					"schema": {
						"type": "boolean",
						"default": false
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The mempool ancestors of the specified transaction.",
				"schema": {
					"oneOf": [
						{
							"type": "array",
							"description": "A list of ancestor transaction IDs.",
							"items": {
								"title": "Bitcoin Transaction ID",
								"type": "string",
								"pattern": "^[a-fA-F0-9]{64}$",
								"description": "A 64-character hex string identifying a transaction.",
								"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
							},
							"example": [
								"b86ae732473ff2c91c04073ec9cbef5e4ddaa701741e141e41345df72122b795",
								"d97af732473ff2c91c04073ec9cbef5e4ddaa701741e141e41345df72122b796"
							]
						},
						{
							"type": "object",
							"additionalProperties": {
								"type": "object",
								"properties": {
									"size": {
										"type": "integer",
										"example": 237
									},
									"fee": {
										"type": "number",
										"example": 0.00001
									},
									"modifiedfee": {
										"type": "number",
										"example": 0.000011
									},
									"time": {
										"type": "integer",
										"example": 1714400000
									},
									"descendantcount": {
										"type": "integer",
										"example": 2
									},
									"ancestorcount": {
										"type": "integer",
										"example": 3
									},
									"depends": {
										"type": "array",
										"example": [
											"6f8c6e8d3021d8a1db71eae3cb8db00f1c99d0f94f3b5782e6cfc155b55f3c55",
											"a4d47b8bdee5f5b8c098c9ac9aa4e3ec113d9f305a4f723d617a92439ab244cb"
										],
										"items": {
											"type": "string"
										}
									},
									"spentby": {
										"type": "array",
										"example": [
											"fe5289e5f1f32f2a45c85b2e351c5edebf7f76aa86e31bb8a2983d4f8d95a63a"
										],
										"items": {
											"type": "string"
										}
									}
								}
							}
						}
					]
				}
			}
		},
		{
			"name": "getmempooldescendants",
			"summary": "Get mempool descendants of a transaction",
			"description": "Returns the in-mempool descendants of a given transaction.\n",
			"params": [
				{
					"name": "txid",
					"required": true,
					"description": "The transaction ID whose descendants to retrieve.",
					"schema": {
						"title": "Bitcoin Transaction ID",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string identifying a transaction.",
						"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
					}
				},
				{
					"name": "verbose",
					"required": false,
					"description": "Whether to return detailed info (true) or just txids (false).",
					"schema": {
						"type": "boolean",
						"default": false
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The mempool descendants of the specified transaction.",
				"schema": {
					"oneOf": [
						{
							"type": "array",
							"description": "A list of descendant transaction IDs.",
							"items": {
								"title": "Bitcoin Transaction ID",
								"type": "string",
								"pattern": "^[a-fA-F0-9]{64}$",
								"description": "A 64-character hex string identifying a transaction.",
								"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
							},
							"example": [
								"c3b9f342fc90837fd4a22878b59fdf5cdeae1b4e4586224b0df1b3a2e3e6e9c8",
								"a2e34d98cb7e98b8d85d3a991c8d1cbd3e7a3f17b4acdf4768c88fa3e0e9d8bc"
							]
						},
						{
							"type": "object",
							"additionalProperties": {
								"type": "object",
								"properties": {
									"size": {
										"type": "integer",
										"example": 192
									},
									"fee": {
										"type": "number",
										"example": 0.000012
									},
									"modifiedfee": {
										"type": "number",
										"example": 0.000013
									},
									"time": {
										"type": "integer",
										"example": 1714400500
									},
									"descendantcount": {
										"type": "integer",
										"example": 1
									},
									"ancestorcount": {
										"type": "integer",
										"example": 1
									},
									"depends": {
										"type": "array",
										"example": [
											"fe84b3e08b3f434a8d36b37c4b5a2dcd73f8e95c9b5b7ed46cc6ef3d3c5b2cdd"
										],
										"items": {
											"title": "Bitcoin Transaction ID",
											"type": "string",
											"pattern": "^[a-fA-F0-9]{64}$",
											"description": "A 64-character hex string identifying a transaction.",
											"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
										}
									},
									"spentby": {
										"type": "array",
										"example": [],
										"items": {
											"title": "Bitcoin Transaction ID",
											"type": "string",
											"pattern": "^[a-fA-F0-9]{64}$",
											"description": "A 64-character hex string identifying a transaction.",
											"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
										}
									}
								}
							}
						}
					]
				}
			}
		},
		{
			"name": "getmempoolinfo",
			"summary": "Retrieve information about the mempool state",
			"description": "Provides information about the TX memory pool's current state, including memory usage, transaction count, and relay fee settings.\n",
			"params": [],
			"result": {
				"name": "result",
				"description": "Mempool state information.",
				"schema": {
					"type": "object",
					"required": [
						"loaded",
						"size",
						"bytes",
						"usage",
						"total_fee",
						"maxmempool",
						"mempoolminfee",
						"minrelaytxfee",
						"incrementalrelayfee",
						"unbroadcastcount",
						"fullrbf"
					],
					"properties": {
						"loaded": {
							"type": "boolean",
							"description": "Whether the mempool is fully loaded.",
							"example": true
						},
						"size": {
							"type": "integer",
							"description": "Number of transactions in the mempool.",
							"example": 52173
						},
						"bytes": {
							"type": "integer",
							"description": "Total size of mempool in bytes.",
							"example": 93871836
						},
						"usage": {
							"type": "integer",
							"description": "Total dynamic memory usage for the mempool (in bytes).",
							"example": 288621536
						},
						"total_fee": {
							"type": "number",
							"format": "double",
							"description": "Total fees of all transactions in the mempool in BTC.",
							"example": 7.90326757
						},
						"maxmempool": {
							"type": "integer",
							"description": "Maximum allowed memory usage for the mempool in bytes.",
							"example": 300000000
						},
						"mempoolminfee": {
							"type": "number",
							"format": "double",
							"description": "Minimum fee rate for transactions to be accepted into the mempool (in BTC/kvB).",
							"example": 0.00001773
						},
						"minrelaytxfee": {
							"type": "number",
							"format": "double",
							"description": "Minimum fee rate for relaying transactions (in BTC/kvB).",
							"example": 0.00001
						},
						"incrementalrelayfee": {
							"type": "number",
							"format": "double",
							"description": "Incremental relay fee rate used for BIP 125 replacement (in BTC/kvB).",
							"example": 0.00001
						},
						"unbroadcastcount": {
							"type": "integer",
							"description": "Number of transactions waiting for initial broadcast acknowledgement.",
							"example": 0
						},
						"fullrbf": {
							"type": "boolean",
							"description": "Whether full Replace-by-Fee is enabled.",
							"example": false
						}
					}
				}
			}
		},
		{
			"name": "getrawmempool",
			"summary": "Get raw mempool transaction data",
			"description": "Returns either a list of transaction IDs currently in the mempool or detailed metadata for each transaction, depending on the verbosity level.\n",
			"params": [
				{
					"name": "verbose",
					"required": false,
					"description": "If true, returns detailed info per transaction. If false, returns a list of txids.\n",
					"schema": {
						"type": "boolean",
						"default": false,
						"example": false
					}
				},
				{
					"name": "mempool_sequence",
					"required": false,
					"description": "When verbose is false, includes mempool sequence number in the response.\n",
					"schema": {
						"type": "boolean",
						"default": false,
						"example": true
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Mempool data depending on verbosity level.",
				"schema": {
					"oneOf": [
						{
							"type": "object",
							"required": [
								"txids",
								"mempool_sequence"
							],
							"properties": {
								"txids": {
									"type": "array",
									"description": "List of transaction IDs in the mempool.",
									"example": [
										"b86ae732473ff2c91c04073ec9cbef5e4ddaa701741e141e41345df72122b795",
										"d97af732473ff2c91c04073ec9cbef5e4ddaa701741e141e41345df72122b796"
									],
									"items": {
										"title": "Bitcoin Transaction ID",
										"type": "string",
										"pattern": "^[a-fA-F0-9]{64}$",
										"description": "A 64-character hex string identifying a transaction.",
										"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
									}
								},
								"mempool_sequence": {
									"type": "integer",
									"description": "The mempool sequence number.",
									"example": 43210
								}
							}
						},
						{
							"type": "object",
							"description": "Map of txid to transaction metadata when verbose is true.",
							"additionalProperties": {
								"type": "object",
								"properties": {
									"vsize": {
										"type": "integer",
										"description": "Virtual transaction size (vbytes).",
										"example": 234
									},
									"weight": {
										"type": "integer",
										"description": "Transaction weight as defined in BIP 141.",
										"example": 936
									},
									"time": {
										"type": "integer",
										"description": "UNIX timestamp when transaction entered mempool.",
										"example": 1714400000
									},
									"height": {
										"type": "integer",
										"description": "Block height when the transaction entered mempool.",
										"example": 840000
									},
									"descendantcount": {
										"type": "integer",
										"example": 2
									},
									"descendantsize": {
										"type": "integer",
										"example": 480
									},
									"ancestorcount": {
										"type": "integer",
										"example": 1
									},
									"ancestorsize": {
										"type": "integer",
										"example": 234
									},
									"wtxid": {
										"title": "Bitcoin Transaction ID",
										"type": "string",
										"pattern": "^[a-fA-F0-9]{64}$",
										"description": "A 64-character hex string identifying a transaction.",
										"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
									},
									"fees": {
										"type": "object",
										"properties": {
											"base": {
												"type": "number",
												"example": 0.0001
											},
											"modified": {
												"type": "number",
												"example": 0.0001
											},
											"ancestor": {
												"type": "number",
												"example": 0.0001
											},
											"descendant": {
												"type": "number",
												"example": 0.0002
											}
										}
									},
									"depends": {
										"type": "array",
										"example": [],
										"items": {
											"type": "string"
										}
									},
									"spentby": {
										"type": "array",
										"example": [],
										"items": {
											"type": "string"
										}
									},
									"bip125-replaceable": {
										"type": "boolean",
										"example": true
									},
									"unbroadcast": {
										"type": "boolean",
										"example": false
									}
								}
							}
						}
					]
				}
			}
		},
		{
			"name": "getrawtransaction",
			"summary": "Retrieve raw transaction data by txid",
			"description": "Returns the raw transaction representation for a given transaction ID (`txid`).  If `verbose` is true, returns a JSON object with detailed information;  otherwise, returns a serialized hex-encoded string.\n",
			"params": [
				{
					"name": "txid",
					"required": true,
					"description": "The transaction ID to fetch.",
					"schema": {
						"title": "Bitcoin Transaction ID",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string identifying a transaction.",
						"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
					}
				},
				{
					"name": "verbose",
					"required": false,
					"description": "Return verbose JSON or just the raw hex string.",
					"schema": {
						"type": "boolean",
						"default": false,
						"example": true
					}
				},
				{
					"name": "blockhash",
					"required": false,
					"description": "The block in which to look for the transaction (if not in the mempool).",
					"schema": {
						"title": "Bitcoin Block Hash",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string representing the block hash.",
						"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Raw transaction data.",
				"schema": {
					"oneOf": [
						{
							"type": "string",
							"description": "Raw transaction as hex string.",
							"example": "0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
						},
						{
							"type": "object",
							"properties": {
								"txid": {
									"title": "Bitcoin Transaction ID",
									"type": "string",
									"pattern": "^[a-fA-F0-9]{64}$",
									"description": "A 64-character hex string identifying a transaction.",
									"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
								},
								"hash": {
									"title": "Bitcoin Block Hash",
									"type": "string",
									"pattern": "^[a-fA-F0-9]{64}$",
									"description": "A 64-character hex string representing the block hash.",
									"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
								},
								"size": {
									"type": "integer",
									"example": 102076
								},
								"vsize": {
									"type": "integer",
									"example": 54421
								},
								"weight": {
									"type": "integer",
									"example": 217681
								},
								"locktime": {
									"type": "integer",
									"example": 0
								},
								"blockhash": {
									"title": "Bitcoin Block Hash",
									"type": "string",
									"pattern": "^[a-fA-F0-9]{64}$",
									"description": "A 64-character hex string representing the block hash.",
									"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
								},
								"confirmations": {
									"type": "integer",
									"example": 100
								},
								"time": {
									"type": "integer",
									"example": 1681218131
								},
								"blocktime": {
									"type": "integer",
									"example": 1681218131
								}
							}
						}
					]
				}
			}
		},
		{
			"name": "gettxout",
			"summary": "Get details about an unspent transaction output",
			"description": "Returns details about an unspent transaction output (UTXO), optionally including mempool data.\n",
			"params": [
				{
					"name": "txid",
					"required": true,
					"description": "The transaction ID.",
					"schema": {
						"title": "Bitcoin Transaction ID",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string identifying a transaction.",
						"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
					}
				},
				{
					"name": "n",
					"required": true,
					"description": "The vout number.",
					"schema": {
						"type": "integer",
						"example": 1
					}
				},
				{
					"name": "include_mempool",
					"required": false,
					"description": "Whether to include outputs spent in the mempool. Default is true.\n",
					"schema": {
						"type": "boolean",
						"default": true,
						"example": true
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Details about the specified unspent output, or null if not found.",
				"schema": {
					"type": "object",
					"nullable": true,
					"properties": {
						"bestblock": {
							"title": "Bitcoin Block Hash",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "A 64-character hex string representing the block hash.",
							"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
						},
						"confirmations": {
							"type": "integer",
							"description": "Number of confirmations for the transaction.",
							"example": 3
						},
						"value": {
							"type": "number",
							"format": "float",
							"description": "The amount in BTC.",
							"example": 0.015
						},
						"scriptPubKey": {
							"type": "object",
							"description": "The public key script info.",
							"properties": {
								"asm": {
									"type": "string",
									"example": "OP_DUP OP_HASH160 89abcdefabbaabbaabbaabbaabbaabbaabbaabba OP_EQUALVERIFY OP_CHECKSIG"
								},
								"hex": {
									"type": "string",
									"example": "76a91489abcdefabbaabbaabbaabbaabbaabbaabbaabba88ac"
								},
								"reqSigs": {
									"type": "integer",
									"example": 1
								},
								"type": {
									"type": "string",
									"example": "pubkeyhash"
								},
								"addresses": {
									"type": "array",
									"example": [
										"bc1qexampleaddresshere"
									],
									"items": {
										"type": "string"
									}
								}
							}
						},
						"coinbase": {
							"type": "boolean",
							"description": "True if the output is from a coinbase transaction.",
							"example": false
						}
					}
				}
			}
		},
		{
			"name": "gettxoutproof",
			"summary": "Get a proof that one or more transactions are included in a block",
			"description": "Returns a hex-encoded proof that the specified transaction(s) were included in a block. This proof can be used to verify the inclusion of transactions without relying on a full node.\n",
			"params": [
				{
					"name": "txids",
					"required": true,
					"description": "An array of transaction IDs to generate proof for.",
					"schema": {
						"type": "array",
						"example": [
							"ee652f0b40209bd02468de0c6336854f5efdd79fb865560aef2c46f4fa0b4a07",
							"cee11bc3bb3d9db8c4813ed2072a14369a15fcfb9e6bc5cb37a0b5bcc6aa59aa"
						],
						"items": {
							"title": "Bitcoin Transaction ID",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "A 64-character hex string identifying a transaction.",
							"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
						}
					}
				},
				{
					"name": "blockhash",
					"required": false,
					"description": "The block in which to search for the txid(s). If omitted, the node will try to locate it.",
					"schema": {
						"title": "Bitcoin Block Hash",
						"type": "string",
						"pattern": "^[a-fA-F0-9]{64}$",
						"description": "A 64-character hex string representing the block hash.",
						"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "A hex-encoded proof that the specified transactions are part of a block.",
				"schema": {
					"type": "string",
					"example": "00000020f2...<proof-hex>..."
				}
			}
		},
		{
			"name": "gettxoutsetinfo",
			"summary": "Get statistics about the current UTXO set",
			"description": "Returns statistics about the unspent transaction output (UTXO) set. Only the current chain tip is supported; querying specific blocks is not available.\n",
			"params": [
				{
					"name": "use_index",
					"required": false,
					"description": "Whether to use `coinstatsindex` if available. Defaults to true.\n",
					"schema": {
						"type": "boolean",
						"example": true
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Statistics on the current state of the UTXO set.",
				"schema": {
					"type": "object",
					"properties": {
						"height": {
							"type": "integer",
							"description": "The current block height.",
							"example": 840000
						},
						"bestblock": {
							"title": "Bitcoin Block Hash",
							"type": "string",
							"pattern": "^[a-fA-F0-9]{64}$",
							"description": "A 64-character hex string representing the block hash.",
							"example": "00000000000000000000669ed57030eb18020ee7029c064f10505156be203d80"
						},
						"txouts": {
							"type": "integer",
							"description": "Total number of unspent outputs.",
							"example": 85000000
						},
						"bogosize": {
							"type": "integer",
							"description": "A meaningless metric used for comparison purposes.",
							"example": 630000000
						},
						"hash_serialized_3": {
							"type": "string",
							"description": "The serialized hash of the UTXO set.",
							"example": "ecf93f60c3e1c3d7e765b9206be60453a21650f0a3abfef87c30d972d03c434b"
						},
						"muhash": {
							"type": "string",
							"description": "A MuHash of the UTXO set, used for integrity checks.",
							"example": "cc4c74e5d7bba2f98ef8bf3aaa0f6521e8d833f26084e604206b65e7d7f3f9ec"
						},
						"total_amount": {
							"type": "number",
							"format": "double",
							"description": "Total amount in BTC of all UTXOs.",
							"example": 19000000.12345678
						},
						"transactions": {
							"type": "integer",
							"description": "Number of transactions with unspent outputs.",
							"example": 62000000
						},
						"disk_size": {
							"type": "integer",
							"description": "Estimated size of the UTXO set on disk, in bytes.",
							"example": 50331648
						}
					}
				}
			}
		},
		{
			"name": "sendrawtransaction",
			"summary": "Submit a raw transaction to the Bitcoin network",
			"description": "Broadcasts a raw transaction (hex-encoded) to the network. Useful for rebroadcasting transactions not originating from your wallet.\n",
			"params": [
				{
					"name": "hexstring",
					"required": true,
					"description": "The hex-encoded raw transaction.",
					"schema": {
						"title": "Raw Transaction Hex",
						"type": "string",
						"pattern": "^[a-fA-F0-9]+$",
						"description": "A serialized, hex-encoded Bitcoin transaction.",
						"example": "0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
					}
				},
				{
					"name": "maxfeerate",
					"required": false,
					"description": "Reject transactions whose fee rate is higher than this value (in BTC/kB). Set to 0 to disable the check.\n",
					"schema": {
						"oneOf": [
							{
								"type": "number"
							},
							{
								"type": "string"
							}
						],
						"example": 0
					}
				}
			],
			"result": {
				"name": "result",
				"description": "The transaction ID (txid) of the submitted transaction.",
				"schema": {
					"type": "string",
					"example": "e3e703ecf6a58b5a97a7cb94077dd5fa872728d2c54e24e0564f85eeedddc37e"
				}
			}
		},
		{
			"name": "submitpackage",
			"summary": "Submit a set of serialized raw transactions",
			"description": "Submits a package containing multiple raw transactions to the mempool for validation and acceptance.\n",
			"params": [
				{
					"name": "package",
					"required": true,
					"description": "An array of raw transactions (serialized hex strings) to be submitted as a package.\n",
					"schema": {
						"type": "array",
						"example": [
							"0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
						],
						"items": {
							"type": "string"
						}
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Transaction results keyed by `wtxid`.",
				"schema": {
					"type": "object",
					"additionalProperties": {
						"type": "object",
						"properties": {
							"txid": {
								"title": "Bitcoin Transaction ID",
								"type": "string",
								"pattern": "^[a-fA-F0-9]{64}$",
								"description": "A 64-character hex string identifying a transaction.",
								"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
							},
							"other_wtxid": {
								"type": "string",
								"description": "(Optional) The wtxid of a different transaction with the same txid but different witness found in mempool.",
								"example": "7c9b2f0e6f4d3c4a2b8a7c9b2f0e6f7d3c2b1a0f9e8d7c6b5a49382716151413"
							},
							"vsize": {
								"type": "integer",
								"description": "Virtual transaction size as defined in BIP 141.",
								"example": 225
							},
							"fees": {
								"type": "object",
								"properties": {
									"base": {
										"type": "number",
										"format": "double",
										"description": "The base transaction fee in BTC.",
										"example": 0.0001
									},
									"effective_feerate": {
										"type": "number",
										"format": "double",
										"description": "(Optional) The effective feerate in BTC per KvB.",
										"example": 0.00005
									},
									"effective_includes": {
										"type": "array",
										"description": "(Optional) The wtxids whose fees are included in effective-feerate.",
										"example": [
											"abcd1234ef567890abcd1234ef567890abcd1234ef567890abcd1234ef567890",
											"def56789abcd1234ef567890abcd1234ef567890abcd1234ef567890abcd1234"
										],
										"items": {
											"type": "string"
										}
									}
								}
							},
							"replaced_transactions": {
								"type": "array",
								"description": "List of txids of transactions that were replaced.",
								"example": [
									"abcd1234ef567890abcd1234ef567890abcd1234ef567890abcd1234ef567890",
									"1234abcd5678ef901234abcd5678ef901234abcd5678ef901234abcd5678ef90"
								],
								"items": {
									"type": "string"
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "testmempoolaccept",
			"summary": "Test if raw transactions would be accepted by the mempool",
			"description": "Indicates whether one or more raw transactions (serialized, hex-encoded) would be accepted by the mempool.\n",
			"params": [
				{
					"name": "rawtxs",
					"required": true,
					"description": "An array of hex-encoded raw transactions to test for mempool acceptance.\n",
					"schema": {
						"type": "array",
						"items": {
							"title": "Raw Transaction Hex",
							"type": "string",
							"pattern": "^[a-fA-F0-9]+$",
							"description": "A serialized, hex-encoded Bitcoin transaction.",
							"example": "0200000000010142d6bd07c424e975fe821c978e720f9a55f9981d62c290cea5ccd06b455d79b90000000000fdffffff028096980000000000160014d3620fe180a0beb8fcc9682fe92e5a25f0feccd370cd2f0100000000160014076d998f6b12c3d1da6217d967154f42a5e0afd30247304402204549b10ea1698d4b4605be1d3bfff810f6135395386207664a66f5bb8bd1470902205fb86c95bfbe7b502195ffa65276d292fb074fe18ba171ef0a35395211384091012103cb5de30b343b35cc09b50f064eb289dd3e252f6985fc4309fba795cc950316afcfa50d00"
						}
					}
				},
				{
					"name": "maxfeerate",
					"required": false,
					"description": "Reject transactions whose fee rate is higher than the specified value, expressed in BTC/kB.\n",
					"schema": {
						"type": "number",
						"example": 0
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Result of the mempool acceptance test for each transaction.",
				"schema": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"txid": {
								"title": "Bitcoin Transaction ID",
								"type": "string",
								"pattern": "^[a-fA-F0-9]{64}$",
								"description": "A 64-character hex string identifying a transaction.",
								"example": "1780283cf12e80484bd86cb7792b69504ffb8e8a0a7e5025f797f4cff94a5736"
							},
							"allowed": {
								"type": "boolean",
								"description": "Whether the transaction would be accepted to the mempool.",
								"example": false
							},
							"reject-reason": {
								"type": "string",
								"description": "Reason for rejection if not allowed.",
								"nullable": true,
								"example": "txn-mempool-conflict"
							}
						}
					}
				}
			}
		},
		{
			"name": "validateaddress",
			"summary": "Validate a Bitcoin address",
			"description": "Verifies the validity of a given Bitcoin address and provides additional metadata about it.\n",
			"params": [
				{
					"name": "address",
					"required": true,
					"description": "The Bitcoin address to validate.",
					"schema": {
						"title": "Bitcoin Address",
						"type": "string",
						"pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$",
						"description": "A valid Bitcoin address.",
						"example": "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Validation result and metadata about the address.",
				"schema": {
					"type": "object",
					"properties": {
						"isvalid": {
							"type": "boolean",
							"description": "Whether the address is valid.",
							"example": true
						},
						"address": {
							"type": "string",
							"description": "The validated Bitcoin address.",
							"example": "bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl"
						},
						"scriptPubKey": {
							"type": "string",
							"description": "The hex encoded scriptPubKey generated by the address.",
							"example": "0014d3620fe180a0beb8fcc9682fe92e5a25f0feccd3"
						},
						"isscript": {
							"type": "boolean",
							"description": "Whether the address corresponds to a script.",
							"example": false
						},
						"iswitness": {
							"type": "boolean",
							"description": "Whether the address is a witness address.",
							"example": true
						},
						"witness_version": {
							"type": "integer",
							"description": "The version number of the witness program.",
							"example": 0
						},
						"witness_program": {
							"type": "string",
							"description": "The hex value of the witness program.",
							"example": "d3620fe180a0beb8fcc9682fe92e5a25f0feccd3"
						}
					}
				}
			}
		},
		{
			"name": "verifymessage",
			"summary": "Verify a signed message",
			"description": "Verifies a message signature using the corresponding Bitcoin address. Returns true if the signature is valid and matches the given address.\n",
			"params": [
				{
					"name": "address",
					"required": true,
					"description": "The Bitcoin address to use for the signature.",
					"schema": {
						"title": "Bitcoin Address",
						"type": "string",
						"pattern": "^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$",
						"description": "A valid Bitcoin address.",
						"example": "bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kygt080"
					}
				},
				{
					"name": "signature",
					"required": true,
					"description": "The base64-encoded signature provided by the signer.",
					"schema": {
						"title": "Base64-encoded Signature",
						"type": "string",
						"description": "A cryptographic signature encoded in Base64.",
						"example": "H+W1KJq4ZaFyRE7a7ZoXQ34TjLGEGbl2zMR2r5Su1O7+XKj9FExV6pBF5CQ4Zg2EiLTuWb7+6W5zkHHbyMHU2noU="
					}
				},
				{
					"name": "message",
					"required": true,
					"description": "The message that was signed.",
					"schema": {
						"type": "string",
						"example": "This is a test message"
					}
				}
			],
			"result": {
				"name": "result",
				"description": "Whether the signature is valid for the message and address.",
				"schema": {
					"type": "boolean",
					"example": true
				}
			}
		}
	]
}