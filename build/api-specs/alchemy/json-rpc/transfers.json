{
	"x-generated-warning": "⚠️ This file is auto-generated. Do not edit manually",
	"$schema": "https://meta.open-rpc.org/",
	"openrpc": "1.2.4",
	"info": {
		"title": "Alchemy Transfers API JSON-RPC Specification",
		"description": "A specification of the standard JSON-RPC methods for Transfers API.",
		"version": "0.0.0"
	},
	"servers": [
		{
			"url": "https://eth-mainnet.g.alchemy.com/v2",
			"name": "Mainnet"
		},
		{
			"url": "https://eth-sepolia.g.alchemy.com/v2",
			"name": "Sepolia"
		}
	],
	"methods": [
		{
			"name": "alchemy_getAssetTransfers",
			"summary": "The Transfers API allows you to easily fetch historical transactions for any address across Ethereum and supported L2s including Polygon, Arbitrum, and Optimism.",
			"params": [
				{
					"name": "fromBlock",
					"required": false,
					"description": "Inclusive from block (hex string, int, 'latest', or 'indexed'). Defaults to 0x0.",
					"schema": {
						"type": "string",
						"default": "0x0"
					}
				},
				{
					"name": "toBlock",
					"required": false,
					"description": "Inclusive to block (hex string, int, 'latest', or 'indexed'). Defaults to 'latest'.",
					"schema": {
						"type": "string",
						"default": "latest"
					}
				},
				{
					"name": "fromAddress",
					"required": false,
					"description": "Hex string 'from' address. Default is wildcard (any address).",
					"schema": {
						"title": "hex encoded address",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "toAddress",
					"required": false,
					"description": "Hex string 'to' address. Default is wildcard (any address).",
					"schema": {
						"title": "hex encoded address",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				},
				{
					"name": "contractAddresses",
					"required": false,
					"description": "Filter for ERC20/721/1155 transfers by contract address. Defaults to wildcard (any address).",
					"schema": {
						"type": "array",
						"items": {
							"title": "hex encoded address",
							"type": "string",
							"pattern": "^0x[0-9a-fA-F]{40}$"
						}
					}
				},
				{
					"name": "category",
					"required": true,
					"description": "Array of transfer categories: external, internal, erc20, erc721, erc1155, specialnft.",
					"schema": {
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"external",
								"internal",
								"erc20",
								"erc721",
								"erc1155",
								"specialnft"
							]
						}
					}
				},
				{
					"name": "order",
					"required": false,
					"description": "Return results in ascending (asc) or descending (desc) order. Defaults to 'asc'.",
					"schema": {
						"type": "string",
						"enum": [
							"asc",
							"desc"
						]
					}
				},
				{
					"name": "withMetadata",
					"required": false,
					"description": "Include additional metadata about each transfer event. Defaults to false.",
					"schema": {
						"type": "boolean",
						"default": false
					}
				},
				{
					"name": "excludeZeroValue",
					"required": false,
					"description": "Whether to exclude transfers with zero value. Defaults to true.",
					"schema": {
						"type": "boolean",
						"default": true
					}
				},
				{
					"name": "maxCount",
					"required": false,
					"description": "Max hex string number of results to return per call. Defaults to 0x3e8 (1000).",
					"schema": {
						"type": "string",
						"default": "0x3e8"
					}
				},
				{
					"name": "pageKey",
					"required": false,
					"description": "UUID for pagination. If more results are available, use the pageKey returned in the response to fetch the next page.",
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "Asset transfers",
				"description": "Returns the list of transfers, and a pageKey if additional results remain.",
				"schema": {
					"oneOf": [
						{
							"title": "Not Found (null)",
							"type": "string"
						},
						{
							"type": "object",
							"properties": {
								"pageKey": {
									"type": "string",
									"description": "Uuid of next page of results (if exists, else blank)."
								},
								"transfers": {
									"type": "array",
									"description": "Array of transfer objects sorted in ascending or descending order by block number.",
									"items": {
										"type": "object",
										"properties": {
											"category": {
												"type": "string",
												"description": "'external', 'internal', 'token', 'erc20', 'erc721', 'erc1155', 'specialnft'"
											},
											"blockNum": {
												"type": "string",
												"description": "Block number of the transfer (hex string)."
											},
											"from": {
												"type": "string",
												"description": "From address (hex string)."
											},
											"to": {
												"type": "string",
												"description": "To address (hex string). null if contract creation."
											},
											"value": {
												"type": "number",
												"nullable": true,
												"description": "Asset transfer value. null if it's an ERC721 or unknown decimals."
											},
											"erc721TokenId": {
												"type": "string",
												"nullable": true,
												"description": "(Deprecated) Legacy token ID field for ERC721 tokens. Use `tokenId` instead."
											},
											"erc1155Metadata": {
												"type": "array",
												"nullable": true,
												"description": "Array of objects with (tokenId, value) for ERC1155 transfers, null otherwise.",
												"items": {
													"type": "object",
													"properties": {
														"tokenId": {
															"type": "string"
														},
														"value": {
															"type": "string"
														}
													}
												}
											},
											"tokenId": {
												"type": "string",
												"description": "Token ID for NFT tokens (ERC721, ERC1155, etc.)."
											},
											"asset": {
												"type": "string",
												"nullable": true,
												"description": "ETH or the token's symbol. null if unavailable."
											},
											"uniqueId": {
												"type": "string",
												"description": "Unique identifier for the transfer object."
											},
											"hash": {
												"type": "string",
												"description": "Transaction hash (hex string)."
											},
											"rawContract": {
												"type": "object",
												"properties": {
													"value": {
														"type": "string",
														"nullable": true,
														"description": "Raw hex transfer value. null for NFT transfers."
													},
													"address": {
														"type": "string",
														"nullable": true,
														"description": "Contract address (hex string). null for external or internal transfers."
													},
													"decimal": {
														"type": "string",
														"nullable": true,
														"description": "Contract decimal in hex. null if not known."
													}
												}
											},
											"metadata": {
												"type": "object",
												"properties": {
													"blockTimestamp": {
														"type": "string",
														"description": "ISO-formatted timestamp of the block containing this transfer."
													}
												}
											}
										}
									}
								}
							}
						}
					]
				}
			},
			"examples": [
				{
					"name": "alchemy_getAssetTransfers example",
					"params": [
						{
							"name": "fromBlock",
							"value": "0x0"
						},
						{
							"name": "fromAddress",
							"value": "0x0000000000000000000000000000000000000000"
						},
						{
							"name": "toAddress",
							"value": "0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1"
						},
						{
							"name": "excludeZeroValue",
							"value": true
						},
						{
							"name": "category",
							"value": [
								"erc721",
								"erc1155"
							]
						}
					],
					"result": {
						"name": "Asset transfers",
						"value": {
							"transfers": [
								{
									"blockNum": "0xb0eadc",
									"uniqueId": "0x3847245c01829b043431067fb2bfa95f7b5bdc7e4246c843e7a573ab6f26f5ff:external",
									"hash": "0x3847245c01829b043431067fb2bfa95f7b5bdc7e4246c843e7a573ab6f26f5ff",
									"from": "0xef4396d9ff8107086d215a1c9f8866c54795d7c7",
									"to": "0x5c43b1ed97e52d009611d89b74fa829fe4ac56b1",
									"value": 0.5,
									"erc721TokenId": null,
									"erc1155Metadata": null,
									"tokenId": null,
									"asset": "ETH",
									"category": "external",
									"rawContract": {
										"value": "0x6f05b59d3b20000",
										"address": null,
										"decimal": "0x12"
									}
								},
								{
									"blockNum": "0xb96042",
									"uniqueId": "0x5c88806ce2e4a42c5fbd5804f340ed887995914546cf92ec39eb5472cf22c88c:external",
									"hash": "0x5c88806ce2e4a42c5fbd5804f340ed887995914546cf92ec39eb5472cf22c88c",
									"from": "0xef4396d9ff8107086d215a1c9f8866c54795d7c7",
									"to": "0x5c43b1ed97e52d009611d89b74fa829fe4ac56b1",
									"value": 0.27,
									"erc721TokenId": null,
									"erc1155Metadata": null,
									"tokenId": null,
									"asset": "ETH",
									"category": "external",
									"rawContract": {
										"value": "0x3bf3b91c95b0000",
										"address": null,
										"decimal": "0x12"
									}
								}
							],
							"pageKey": ""
						}
					}
				}
			]
		}
	]
}