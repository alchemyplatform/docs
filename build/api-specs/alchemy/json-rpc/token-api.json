{
	"x-generated-warning": "⚠️ This file is auto-generated. Do not edit manually",
	"x-fern-parameters": [
		{
			"name": "apiKey",
			"in": "path",
			"schema": {
				"type": "string",
				"default": "docs-demo",
				"description": "For higher throughput, [create your own API key](https://alchemy.com/?a=docs-demo)"
			},
			"required": true
		}
	],
	"$schema": "https://meta.open-rpc.org/",
	"openrpc": "1.2.4",
	"info": {
		"title": "Alchemy Private Transactions API JSON-RPC Specification",
		"description": "A specification of the standard JSON-RPC methods for Private Transactions API.",
		"version": "0.0.0"
	},
	"servers": [
		{
			"url": "https://eth-mainnet.g.alchemy.com/v2",
			"name": "Mainnet"
		},
		{
			"url": "https://eth-sepolia.g.alchemy.com/v2",
			"name": "Sepolia"
		}
	],
	"methods": [
		{
			"name": "alchemy_getTokenAllowance",
			"description": "Returns the token allowance by spender for a given owner.",
			"params": [
				{
					"name": "tokenAllowanceRequest",
					"required": true,
					"description": "An object specifying the token contract address, the owner address, and the spender address.\n",
					"schema": {
						"type": "object",
						"required": [
							"contract",
							"owner",
							"spender"
						],
						"properties": {
							"contract": {
								"description": "20-byte token contract address.",
								"title": "hex encoded address",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"owner": {
								"description": "20-byte address of the owner.",
								"title": "hex encoded address",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							},
							"spender": {
								"description": "20-byte address of the spender.",
								"title": "hex encoded address",
								"type": "string",
								"pattern": "^0x[0-9a-fA-F]{40}$"
							}
						}
					}
				}
			],
			"result": {
				"name": "Allowance",
				"description": "The amount that the spender is allowed to withdraw from the owner.",
				"schema": {
					"type": "string",
					"description": "A decimal string representing the allowance."
				}
			},
			"examples": [
				{
					"name": "Basic allowance example",
					"params": [
						{
							"name": "tokenAllowanceRequest",
							"value": {
								"contract": "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270",
								"owner": "0xf1a726210550c306a9964b251cbcd3fa5ecb275d",
								"spender": "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
							}
						}
					],
					"result": {
						"name": "Allowance",
						"value": "0"
					}
				}
			]
		},
		{
			"name": "alchemy_getTokenBalances",
			"description": "Returns ERC-20 token balances for a given address.",
			"params": [
				{
					"name": "address",
					"required": true,
					"description": "A 20-byte wallet address.\n",
					"schema": {
						"type": "string",
						"title": "Address",
						"default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
					}
				},
				{
					"name": "tokenSpec",
					"required": false,
					"description": "A token specification: - The string \"erc20\" - \"DEFAULT_TOKENS\" (deprecated) - An array of token contract addresses.\n",
					"schema": {
						"oneOf": [
							{
								"type": "string",
								"title": "Token Specification",
								"enum": [
									"erc20",
									"DEFAULT_TOKENS"
								],
								"default": "erc20"
							},
							{
								"type": "array",
								"title": "Array of Contract Addresses",
								"items": {
									"type": "string",
									"pattern": "^0[xX][0-9a-fA-F]{40}$"
								}
							}
						]
					}
				},
				{
					"name": "options",
					"required": false,
					"description": "Optional pagination options.\n",
					"schema": {
						"type": "object",
						"title": "Options",
						"properties": {
							"pageKey": {
								"type": "string",
								"description": "Used for pagination if more results are available."
							},
							"maxCount": {
								"type": "integer",
								"description": "Maximum number of token balances to return per call (capped at 100).",
								"default": 100
							}
						}
					}
				}
			],
			"result": {
				"name": "Token Balances",
				"description": "An object containing the queried address and an array of token balance objects.",
				"schema": {
					"type": "object",
					"properties": {
						"address": {
							"description": "Address for which token balances were returned.",
							"title": "hex encoded address",
							"type": "string",
							"pattern": "^0x[0-9a-fA-F]{40}$"
						},
						"tokenBalances": {
							"type": "array",
							"description": "Array of token balance objects. Exactly one of tokenBalance or error is non-null.",
							"items": {
								"type": "object",
								"properties": {
									"contractAddress": {
										"description": "The ERC-20 contract address.",
										"title": "hex encoded address",
										"type": "string",
										"pattern": "^0x[0-9a-fA-F]{40}$"
									},
									"tokenBalance": {
										"type": "string",
										"description": "Hex-encoded string of the token balance, or null if error is present."
									},
									"error": {
										"type": "string",
										"description": "Error message if something went wrong retrieving this token's balance; otherwise null."
									}
								}
							}
						}
					}
				}
			},
			"examples": [
				{
					"name": "Single token balance example",
					"params": [
						{
							"name": "address",
							"value": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
						},
						{
							"name": "tokenSpec",
							"value": [
								"0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
							]
						}
					],
					"result": {
						"name": "Token Balances",
						"value": {
							"address": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
							"tokenBalances": [
								{
									"contractAddress": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
									"tokenBalance": "0x0000000000000000000000000000000000000000000000000000000000000000",
									"error": null
								}
							]
						}
					}
				}
			]
		},
		{
			"name": "alchemy_getTokenMetadata",
			"description": "Returns metadata for a given token contract (name, symbol, decimals, logo).",
			"params": [
				{
					"name": "contractAddress",
					"required": true,
					"description": "A single 20-byte token contract address.",
					"schema": {
						"title": "hex encoded address",
						"type": "string",
						"pattern": "^0x[0-9a-fA-F]{40}$"
					}
				}
			],
			"result": {
				"name": "Token Metadata",
				"description": "Object with name, symbol, decimals, and an optional logo URL.",
				"schema": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "Token's name, or null if not found."
						},
						"symbol": {
							"type": "string",
							"description": "Token's symbol, or null if not found."
						},
						"decimals": {
							"type": "number",
							"description": "Number of decimals the token uses, or null if not found."
						},
						"logo": {
							"type": "string",
							"description": "URL of the token's logo image, or null if none available."
						}
					}
				}
			},
			"examples": [
				{
					"name": "USDC metadata example",
					"params": [
						{
							"name": "contractAddress",
							"value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
						}
					],
					"result": {
						"name": "Token Metadata",
						"value": {
							"name": "USD Coin",
							"symbol": "USDC",
							"decimals": 6,
							"logo": "https://static.alchemyapi.io/images/assets/3408.png"
						}
					}
				}
			]
		}
	]
}