{
	"x-generated-warning": "⚠️ This file is auto-generated. Do not edit manually",
	"x-fern-parameters": [
		{
			"name": "apiKey",
			"in": "path",
			"schema": {
				"type": "string",
				"default": "docs-demo",
				"description": "For higher throughput, [create your own API key](https://alchemy.com/?a=docs-demo)"
			},
			"required": true
		}
	],
	"$schema": "https://meta.open-rpc.org/",
	"openrpc": "1.2.4",
	"info": {
		"title": "Alchemy Wallet APIs JSON-RPC spec",
		"description": "A specification of the standard JSON-RPC methods for the Alchemy Wallet APIs.",
		"version": "0.0.0"
	},
	"servers": [
		{
			"url": "https://api.g.alchemy.com"
		}
	],
	"methods": [
		{
			"name": "wallet_requestAccount",
			"description": "This method is used to get the smart account address and relevant info for a given signer. If an account does not already exist for a given signer, this method will create one before returning the counterfactual address.",
			"params": [
				{
					"name": "requestAccountRequest",
					"required": true,
					"schema": {
						"anyOf": [
							{
								"type": "object",
								"properties": {
									"signerAddress": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"id": {
										"format": "uuid",
										"type": "string"
									},
									"creationHint": {
										"type": "object",
										"properties": {
											"accountType": {
												"type": "string",
												"enum": [
													"sma-b"
												]
											},
											"salt": {
												"type": "string",
												"pattern": "^0x(.*)$"
											}
										}
									},
									"includeCounterfactualInfo": {
										"default": false,
										"type": "boolean"
									}
								},
								"required": [
									"signerAddress"
								]
							},
							{
								"type": "object",
								"properties": {
									"accountAddress": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"includeCounterfactualInfo": {
										"default": false,
										"type": "boolean"
									}
								},
								"required": [
									"accountAddress"
								]
							}
						]
					}
				}
			],
			"result": {
				"name": "requestAccountResponse",
				"schema": {
					"type": "object",
					"required": [
						"accountAddress",
						"id"
					],
					"properties": {
						"accountAddress": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"id": {
							"format": "uuid",
							"type": "string"
						},
						"counterfactualInfo": {
							"type": "object",
							"required": [
								"factoryType",
								"factoryAddress",
								"factoryData"
							],
							"properties": {
								"factoryType": {
									"anyOf": [
										{
											"type": "string",
											"enum": [
												"LightAccountV1.0.1"
											]
										},
										{
											"type": "string",
											"enum": [
												"LightAccountV1.0.2"
											]
										},
										{
											"type": "string",
											"enum": [
												"LightAccountV1.1.0"
											]
										},
										{
											"type": "string",
											"enum": [
												"LightAccountV2.0.0"
											]
										},
										{
											"type": "string",
											"enum": [
												"LightAccountV2.0.0-MultiOwner"
											]
										},
										{
											"type": "string",
											"enum": [
												"MAv1.0.0-MultiOwner"
											]
										},
										{
											"type": "string",
											"enum": [
												"MAv1.0.0-MultiSig"
											]
										},
										{
											"type": "string",
											"enum": [
												"MAv2.0.0-sma-b"
											]
										},
										{
											"type": "string",
											"enum": [
												"MAv2.0.0-ma-ssv"
											]
										},
										{
											"type": "string",
											"enum": [
												"MAv2.0.0-ma-webauthn"
											]
										},
										{
											"type": "string",
											"enum": [
												"unknown"
											]
										}
									]
								},
								"factoryAddress": {
									"type": "string",
									"pattern": "^0x(.*)$"
								},
								"factoryData": {
									"type": "string",
									"pattern": "^0x(.*)$"
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "wallet_prepareCalls",
			"description": "This method is used to prepare a user operation for submission. It will return a built user operation and a signature request which needs to be signed by the user before submitting to wallet_sendPreparedCalls",
			"params": [
				{
					"name": "prepareCallsRequest",
					"required": true,
					"schema": {
						"type": "object",
						"required": [
							"calls",
							"from",
							"chainId"
						],
						"properties": {
							"calls": {
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"to"
									],
									"properties": {
										"to": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"data": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"value": {
											"type": "string",
											"pattern": "^0x(.*)$"
										}
									}
								}
							},
							"from": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"chainId": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"capabilities": {
								"minProperties": 1,
								"type": "object",
								"properties": {
									"permissions": {
										"type": "object",
										"required": [
											"context"
										],
										"properties": {
											"context": {
												"type": "string",
												"pattern": "^0x(.*)$"
											}
										}
									},
									"paymasterService": {
										"type": "object",
										"required": [
											"policyId"
										],
										"properties": {
											"policyId": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			],
			"result": {
				"name": "prepareCallsResponse",
				"schema": {
					"type": "object",
					"required": [
						"type",
						"data",
						"chainId",
						"signatureRequest"
					],
					"properties": {
						"type": {
							"anyOf": [
								{
									"type": "string",
									"enum": [
										"user-operation-v060"
									]
								},
								{
									"type": "string",
									"enum": [
										"user-operation-v070"
									]
								}
							]
						},
						"data": {
							"anyOf": [
								{
									"type": "object",
									"properties": {
										"sender": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"nonce": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"initCode": {
											"anyOf": [
												{
													"type": "string",
													"pattern": "^0x(.*)$"
												},
												{
													"type": "string",
													"enum": [
														"0x"
													]
												}
											]
										},
										"callData": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"callGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"verificationGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"preVerificationGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"maxFeePerGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"maxPriorityFeePerGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"paymasterAndData": {
											"anyOf": [
												{
													"type": "string",
													"pattern": "^0x(.*)$"
												},
												{
													"type": "string",
													"enum": [
														"0x"
													]
												}
											]
										}
									},
									"required": [
										"sender",
										"nonce",
										"initCode",
										"callData",
										"callGasLimit",
										"verificationGasLimit",
										"preVerificationGas",
										"maxFeePerGas",
										"maxPriorityFeePerGas",
										"paymasterAndData"
									]
								},
								{
									"type": "object",
									"properties": {
										"sender": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"nonce": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"factory": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"factoryData": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"callData": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"callGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"verificationGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"preVerificationGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"maxFeePerGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"maxPriorityFeePerGas": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"paymaster": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"paymasterData": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"paymasterVerificationGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										},
										"paymasterPostOpGasLimit": {
											"type": "string",
											"pattern": "^0x(.*)$"
										}
									},
									"required": [
										"sender",
										"nonce",
										"callData",
										"callGasLimit",
										"verificationGasLimit",
										"preVerificationGas",
										"maxFeePerGas",
										"maxPriorityFeePerGas"
									]
								}
							]
						},
						"chainId": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"signatureRequest": {
							"anyOf": [
								{
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"enum": [
												"personal_sign"
											]
										},
										"data": {
											"anyOf": [
												{
													"minLength": 1,
													"type": "string"
												},
												{
													"type": "object",
													"properties": {
														"raw": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													},
													"required": [
														"raw"
													]
												}
											]
										}
									},
									"required": [
										"type",
										"data"
									]
								},
								{
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"enum": [
												"eth_signTypedData_v4"
											]
										},
										"data": {
											"type": "object",
											"required": [
												"types",
												"primaryType",
												"message"
											],
											"properties": {
												"domain": {
													"type": "object",
													"properties": {
														"chainId": {
															"type": "number"
														},
														"name": {
															"type": "string"
														},
														"salt": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"verifyingContract": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"version": {
															"type": "string"
														}
													}
												},
												"types": {
													"type": "object",
													"patternProperties": {
														"^(.*)$": {
															"type": "array",
															"items": {
																"type": "object",
																"required": [
																	"name",
																	"type"
																],
																"properties": {
																	"name": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	}
																}
															}
														}
													}
												},
												"primaryType": {
													"type": "string"
												},
												"message": {
													"type": "object",
													"patternProperties": {
														"^(.*)$": {}
													}
												}
											}
										}
									},
									"required": [
										"type",
										"data"
									]
								}
							]
						}
					}
				}
			}
		},
		{
			"name": "wallet_sendPreparedCalls",
			"description": "This method is used after signing the signatureRequest returned from prepareCalls to submit a user operation",
			"params": [
				{
					"name": "sendPreparedCallsRequest",
					"required": true,
					"schema": {
						"type": "object",
						"required": [
							"type",
							"data",
							"chainId",
							"signature"
						],
						"properties": {
							"type": {
								"anyOf": [
									{
										"type": "string",
										"enum": [
											"user-operation-v060"
										]
									},
									{
										"type": "string",
										"enum": [
											"user-operation-v070"
										]
									}
								]
							},
							"data": {
								"anyOf": [
									{
										"type": "object",
										"properties": {
											"sender": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"nonce": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"initCode": {
												"anyOf": [
													{
														"type": "string",
														"pattern": "^0x(.*)$"
													},
													{
														"type": "string",
														"enum": [
															"0x"
														]
													}
												]
											},
											"callData": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"callGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"verificationGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"preVerificationGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"maxFeePerGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"maxPriorityFeePerGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"paymasterAndData": {
												"anyOf": [
													{
														"type": "string",
														"pattern": "^0x(.*)$"
													},
													{
														"type": "string",
														"enum": [
															"0x"
														]
													}
												]
											}
										},
										"required": [
											"sender",
											"nonce",
											"initCode",
											"callData",
											"callGasLimit",
											"verificationGasLimit",
											"preVerificationGas",
											"maxFeePerGas",
											"maxPriorityFeePerGas",
											"paymasterAndData"
										]
									},
									{
										"type": "object",
										"properties": {
											"sender": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"nonce": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"factory": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"factoryData": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"callData": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"callGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"verificationGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"preVerificationGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"maxFeePerGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"maxPriorityFeePerGas": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"paymaster": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"paymasterData": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"paymasterVerificationGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											},
											"paymasterPostOpGasLimit": {
												"type": "string",
												"pattern": "^0x(.*)$"
											}
										},
										"required": [
											"sender",
											"nonce",
											"callData",
											"callGasLimit",
											"verificationGasLimit",
											"preVerificationGas",
											"maxFeePerGas",
											"maxPriorityFeePerGas"
										]
									}
								]
							},
							"chainId": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"signature": {
								"type": "object",
								"required": [
									"type",
									"signature"
								],
								"properties": {
									"type": {
										"type": "string"
									},
									"signature": {
										"type": "string",
										"pattern": "^0x(.*)$"
									}
								}
							},
							"capabilities": {
								"type": "object",
								"required": [
									"permissions"
								],
								"properties": {
									"permissions": {
										"type": "object",
										"required": [
											"context"
										],
										"properties": {
											"context": {
												"type": "string",
												"pattern": "^0x(.*)$"
											}
										}
									}
								}
							}
						}
					}
				}
			],
			"result": {
				"name": "sendPreparedCallsResponse",
				"schema": {
					"type": "object",
					"required": [
						"preparedCallIds"
					],
					"properties": {
						"preparedCallIds": {
							"type": "array",
							"items": {
								"type": "string",
								"pattern": "^0x(.*)$"
							}
						}
					}
				}
			}
		},
		{
			"name": "wallet_createAccount",
			"description": "This method is used to create a smart account for a given signer. This method is primarly used to import existing accounts. For most cases, you should use wallet_requestAccount instead.",
			"params": [
				{
					"name": "createAccountRequest",
					"required": true,
					"schema": {
						"type": "object",
						"required": [
							"signerAddress"
						],
						"properties": {
							"signerAddress": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"id": {
								"format": "uuid",
								"type": "string"
							},
							"creationOptions": {
								"type": "object",
								"properties": {
									"accountType": {
										"type": "string",
										"enum": [
											"sma-b"
										]
									},
									"salt": {
										"type": "string",
										"pattern": "^0x(.*)$"
									}
								}
							}
						}
					}
				}
			],
			"result": {
				"name": "createAccountResponse",
				"schema": {
					"type": "object",
					"required": [
						"accountAddress",
						"id"
					],
					"properties": {
						"accountAddress": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"id": {
							"format": "uuid",
							"type": "string"
						}
					}
				}
			}
		},
		{
			"name": "wallet_createSession",
			"description": "This method is used to create a session for a given address with specified permissions.",
			"params": [
				{
					"name": "createSessionRequest",
					"required": true,
					"schema": {
						"type": "object",
						"required": [
							"account",
							"chainId",
							"key",
							"permissions"
						],
						"properties": {
							"chainId": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"expiry": {
								"type": "number"
							},
							"key": {
								"type": "object",
								"required": [
									"type",
									"publicKey"
								],
								"properties": {
									"type": {
										"anyOf": [
											{
												"type": "string",
												"enum": [
													"secp256k1"
												]
											},
											{
												"type": "string",
												"enum": [
													"contract"
												]
											}
										]
									},
									"publicKey": {
										"type": "string",
										"pattern": "^0x(.*)$"
									}
								}
							},
							"permissions": {
								"minItems": 1,
								"type": "array",
								"items": {
									"anyOf": [
										{
											"description": "allows transfer of native tokens from the account",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"native-token-transfer"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"allowance"
													],
													"properties": {
														"allowance": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "allows transfer or approval of erc20 tokens from the account",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"erc20-token-transfer"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"allowance",
														"address"
													],
													"properties": {
														"allowance": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"address": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "allows the key to spend gas for UOs",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"gas-limit"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"limit"
													],
													"properties": {
														"limit": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "grants access to all functions in a contract",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"contract-access"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"address"
													],
													"properties": {
														"address": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "grants access to functions in the account",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"account-functions"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"functions"
													],
													"properties": {
														"functions": {
															"minItems": 1,
															"type": "array",
															"items": {
																"type": "string",
																"pattern": "^0x(.*)$"
															}
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "access to a function selector in any address or contract",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"functions-on-all-contracts"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"functions"
													],
													"properties": {
														"functions": {
															"minItems": 1,
															"type": "array",
															"items": {
																"type": "string",
																"pattern": "^0x(.*)$"
															}
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "grants access to specified functions on a specific contract",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"functions-on-contract"
													]
												},
												"data": {
													"type": "object",
													"required": [
														"address",
														"functions"
													],
													"properties": {
														"address": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"functions": {
															"minItems": 1,
															"type": "array",
															"items": {
																"type": "string",
																"pattern": "^0x(.*)$"
															}
														}
													}
												}
											},
											"required": [
												"type",
												"data"
											]
										},
										{
											"description": "grants full access to everything",
											"type": "object",
											"properties": {
												"type": {
													"type": "string",
													"enum": [
														"root"
													]
												}
											},
											"required": [
												"type"
											]
										}
									]
								}
							},
							"account": {
								"type": "string",
								"pattern": "^0x(.*)$"
							}
						}
					}
				}
			],
			"result": {
				"name": "createSessionResponse",
				"schema": {
					"type": "object",
					"required": [
						"sessionId",
						"signatureRequest"
					],
					"properties": {
						"sessionId": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"signatureRequest": {
							"anyOf": [
								{
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"enum": [
												"personal_sign"
											]
										},
										"data": {
											"anyOf": [
												{
													"minLength": 1,
													"type": "string"
												},
												{
													"type": "object",
													"properties": {
														"raw": {
															"type": "string",
															"pattern": "^0x(.*)$"
														}
													},
													"required": [
														"raw"
													]
												}
											]
										}
									},
									"required": [
										"type",
										"data"
									]
								},
								{
									"type": "object",
									"properties": {
										"type": {
											"type": "string",
											"enum": [
												"eth_signTypedData_v4"
											]
										},
										"data": {
											"type": "object",
											"required": [
												"types",
												"primaryType",
												"message"
											],
											"properties": {
												"domain": {
													"type": "object",
													"properties": {
														"chainId": {
															"type": "number"
														},
														"name": {
															"type": "string"
														},
														"salt": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"verifyingContract": {
															"type": "string",
															"pattern": "^0x(.*)$"
														},
														"version": {
															"type": "string"
														}
													}
												},
												"types": {
													"type": "object",
													"patternProperties": {
														"^(.*)$": {
															"type": "array",
															"items": {
																"type": "object",
																"required": [
																	"name",
																	"type"
																],
																"properties": {
																	"name": {
																		"type": "string"
																	},
																	"type": {
																		"type": "string"
																	}
																}
															}
														}
													}
												},
												"primaryType": {
													"type": "string"
												},
												"message": {
													"type": "object",
													"patternProperties": {
														"^(.*)$": {}
													}
												}
											}
										}
									},
									"required": [
										"type",
										"data"
									]
								}
							]
						}
					}
				}
			}
		},
		{
			"name": "wallet_getCallsStatus",
			"description": "This method is used to get the status of calls IDs returned from wallet_sendPreparedCalls.",
			"params": [
				{
					"name": "getCallsStatusRequest",
					"required": true,
					"schema": {
						"description": "The call ID returned from wallet_sendPreparedCalls",
						"type": "string",
						"pattern": "^0x(.*)$"
					}
				}
			],
			"result": {
				"name": "getCallsStatusResponse",
				"schema": {
					"type": "object",
					"required": [
						"id",
						"chainId",
						"atomic",
						"status"
					],
					"properties": {
						"id": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"chainId": {
							"type": "string",
							"pattern": "^0x(.*)$"
						},
						"atomic": {
							"type": "boolean"
						},
						"status": {
							"anyOf": [
								{
									"description": "Batch has been received by the wallet but has not completed execution onchain",
									"type": "number",
									"enum": [
										100
									]
								},
								{
									"description": "Batch has been included onchain without reverts, receipts array contains info of all calls",
									"type": "number",
									"enum": [
										200
									]
								},
								{
									"description": "Batch has not been included onchain and wallet will not retry",
									"type": "number",
									"enum": [
										400
									]
								},
								{
									"description": "Batch reverted *completely* and only changes related to gas charge may have been included onchain",
									"type": "number",
									"enum": [
										500
									]
								},
								{
									"description": "Batch reverted *partially* and some changes related to batch calls may have been included onchain",
									"type": "number",
									"enum": [
										600
									]
								}
							]
						},
						"receipts": {
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"logs",
									"status",
									"blockHash",
									"blockNumber",
									"gasUsed",
									"transactionHash"
								],
								"properties": {
									"logs": {
										"type": "array",
										"items": {
											"type": "object",
											"required": [
												"address",
												"data",
												"topics"
											],
											"properties": {
												"address": {
													"type": "string",
													"pattern": "^0x(.*)$"
												},
												"data": {
													"type": "string",
													"pattern": "^0x(.*)$"
												},
												"topics": {
													"type": "array",
													"items": {
														"type": "string",
														"pattern": "^0x(.*)$"
													}
												}
											}
										}
									},
									"status": {
										"description": "0x1 for success, 0x0 for failure",
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"blockHash": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"blockNumber": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"gasUsed": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"transactionHash": {
										"type": "string",
										"pattern": "^0x(.*)$"
									}
								}
							}
						}
					}
				}
			}
		},
		{
			"name": "wallet_listAccounts",
			"description": "This method is used to list all smart accounts for a given signer.",
			"params": [
				{
					"name": "listAccountsRequest",
					"required": true,
					"schema": {
						"type": "object",
						"required": [
							"signerAddress"
						],
						"properties": {
							"signerAddress": {
								"type": "string",
								"pattern": "^0x(.*)$"
							},
							"limit": {
								"minimum": 1,
								"maximum": 100,
								"default": 100,
								"type": "number"
							},
							"after": {
								"format": "base64url",
								"type": "string"
							}
						}
					}
				}
			],
			"result": {
				"name": "listAccountsResponse",
				"schema": {
					"type": "object",
					"required": [
						"accounts",
						"meta"
					],
					"properties": {
						"accounts": {
							"type": "array",
							"items": {
								"type": "object",
								"required": [
									"accountAddress",
									"id"
								],
								"properties": {
									"accountAddress": {
										"type": "string",
										"pattern": "^0x(.*)$"
									},
									"id": {
										"format": "uuid",
										"type": "string"
									}
								}
							}
						},
						"meta": {
							"type": "object",
							"required": [
								"totalCount",
								"after"
							],
							"properties": {
								"totalCount": {
									"type": "number"
								},
								"after": {
									"anyOf": [
										{
											"format": "base64url",
											"type": "string"
										},
										{
											"type": "null"
										}
									]
								}
							}
						}
					}
				}
			}
		}
	]
}