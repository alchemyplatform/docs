- name: getblockchaininfo
  summary: Retrieve general information about the blockchain.
  description: >
    Returns an object containing state details related to blockchain processing, network, and storage information.

    > ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.
  params: []
  result:
    name: result
    description: Blockchain status information.
    schema:
      $ref: "#/components/schemas/BTC_BLOCKCHAIN_INFO"
  examples:
    - name: getblockchaininfo example
      params: []
      result:
        name: result
        value:
          chain: "main"
          blocks: 894713
          headers: 894713
          bestblockhash: "00000000000000000000eb0ae1714d3ec43cfaac74769f3bcde489daf116e4ca"
          bits: "170248b6"
          target: "0000000000000000000248b60000000000000000000000000000000000000000"
          difficulty: 123234387977050.9
          time: 1746083867
          mediantime: 1746081100
          verificationprogress: 0.9999993374725104
          initialblockdownload: false
          chainwork: "0000000000000000000000000000000000000000bfce6962cc3162143b67a1d4"
          size_on_disk: 745999541195
          pruned: false
          warnings: []

- name: getconnectioncount
  summary: Get the number of connections to other nodes
  description: >
    Returns the number of connections to other nodes (both inbound and outbound).

    > ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.
  params: []
  result:
    name: result
    description: The total number of connections.
    schema:
      type: integer
  examples:
    - name: getconnectioncount example
      params: []
      result:
        name: result
        value: 10

- name: getmemoryinfo
  summary: Get memory usage information
  description: >
    Returns information about memory usage, either general statistics ("stats") or heap information ("mallocinfo").

    > ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.
  params:
    - name: mode
      required: false
      description: >
        Determines what kind of information is returned:
        - "stats" returns general statistics about memory usage.
        - "mallocinfo" returns an XML string describing low-level heap state.
      schema:
        type: string
        enum:
          - stats
          - mallocinfo
  result:
    name: result
    description: Memory usage details.
    schema:
      type: object
      properties:
        locked:
          type: object
          description: Information about locked memory.
          properties:
            used:
              type: integer
              description: Used memory in KB.
            free:
              type: integer
              description: Free memory in KB.
            total:
              type: integer
              description: Total memory available in KB.
            locked:
              type: integer
              description: Locked memory in KB.
            chunks_used:
              type: integer
              description: Number of used memory chunks.
            chunks_free:
              type: integer
              description: Number of free memory chunks.
  examples:
    - name: getmemoryinfo stats example
      params:
        - name: mode
          value: "stats"
      result:
        name: result
        value:
          locked:
            used: 352
            free: 65184
            total: 65536
            locked: 65536
            chunks_used: 1
            chunks_free: 1

- name: validateaddress
  summary: Validate a Bitcoin address
  description: >
    Verifies the validity of a given Bitcoin address and provides additional metadata about it.

    > ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.
  params:
    - name: address
      required: true
      description: The Bitcoin address to validate.
      schema:
        $ref: "#/components/schemas/BTC_ADDRESS"
  result:
    name: result
    description: Validation result and metadata about the address.
    schema:
      type: object
      properties:
        isvalid:
          type: boolean
          description: Whether the address is valid.
        address:
          type: string
          description: The validated Bitcoin address.
        scriptPubKey:
          type: string
          description: The hex encoded scriptPubKey generated by the address.
        isscript:
          type: boolean
          description: Whether the address corresponds to a script.
        iswitness:
          type: boolean
          description: Whether the address is a witness address.
        witness_version:
          type: integer
          description: The version number of the witness program.
        witness_program:
          type: string
          description: The hex value of the witness program.
  examples:
    - name: validateaddress example
      params:
        - name: address
          value: "39L4cdhha5ueasiKz1wRVd75fHdB9NV2t7"
      result:
        name: result
        value:
          isvalid: true
          address: "39L4cdhha5ueasiKz1wRVd75fHdB9NV2t7"
          scriptPubKey: "a91453ca847feb3986cf2be405429e7e513484e0bc9387"
          isscript: true
          iswitness: false

- name: verifymessage
  summary: Verify a signed message
  description: >
    Verifies a message signature using the corresponding Bitcoin address.
    Returns true if the signature is valid and matches the given address.

    > ⚠ This endpoint is only available with [Blast](https://www.alchemy.com/docs/reference/introduction-to-blast) access.
  params:
    - name: address
      required: true
      description: The Bitcoin address to use for the signature.
      schema:
        $ref: "#/components/schemas/BTC_ADDRESS"
    - name: signature
      required: true
      description: The base64-encoded signature provided by the signer.
      schema:
        $ref: "#/components/schemas/BTC_SIGNATURE"
    - name: message
      required: true
      description: The message that was signed.
      schema:
        type: string
  result:
    name: result
    description: Whether the signature is valid for the message and address.
    schema:
      type: boolean
  examples:
    - name: verifymessage example
      params:
        - name: address
          value: "1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY"
        - name: signature
          value: "G9oR+mz9QwPZq2boSmjdtbX0VNdD+dLOFRzJ93ZDHNwhnOtJb1EDAKCK3NmPIzctQDAazX9gh3d+zdoFKc69bQ4="
        - name: message
          value: "Test message from Bitcoin"
      result:
        name: result
        value: true
