# yaml-language-server: $schema=https://meta.open-rpc.org/

$schema: https://meta.open-rpc.org/
openrpc: 1.2.4
info:
  title: Alchemy Solana JSON-RPC Specification
  description: A specification of the standard JSON-RPC methods for Solana.
  version: 0.0.0
servers:
  - url: https://solana-mainnet.g.alchemy.com/v2
    name: Solana Mainnet
  - url: https://solana-devnet.g.alchemy.com/v2
    name: Solana Devnet

methods:
  # Account methods
  - name: getAccountInfo
    description: Returns all information associated with the account of provided Pubkey.
    params:
      - name: Pubkey
        required: true
        description: Pubkey of the account to query.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object for additional settings.
        schema:
          $ref: "#/components/schemas/GetAccountInfoConfig"
    result:
      name: Account information
      description: Returns details of the account including balance, ownership, and other relevant data.
      schema:
        $ref: "#/components/schemas/AccountInfo"

  - name: getBalance
    description: Returns the lamport balance of the account of the provided Pubkey.
    params:
      - name: Pubkey
        required: true
        description: Pubkey of the account to query.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetBalanceConfig"
    result:
      name: Lamport balance
      description: Returns the balance in lamports of the account queried.
      schema:
        $ref: "#/components/schemas/LamportBalance"

  - name: getMultipleAccounts
    description: Returns the account information for a list of Pubkeys.
    params:
      - name: Pubkeys
        required: true
        description: An array of Pubkeys to query.
        schema:
          type: array
          items:
            $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetMultipleAccountsConfig"
    result:
      name: Account information
      description: An array of JSON objects containing account details.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/AccountInfo"

  - name: getTokenAccountBalance
    description: Returns the token balance of an SPL Token account.
    params:
      - name: Token account Pubkey
        required: true
        description: The Pubkey of the token account to query.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetTokenAccountBalanceConfig"
    result:
      name: Token account balance
      description: The balance of the SPL Token account.
      schema:
        $ref: "#/components/schemas/TokenBalance"

  - name: getTokenAccountsByOwner
    description: Returns all SPL Token accounts owned by the specified token owner.
    params:
      - name: Token owner Pubkey
        required: true
        description: The Pubkey of the account owner to query.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Token filter
        required: false
        description: A filter object containing either the Mint Pubkey or the Token program Pubkey.
        schema:
          type: object
          properties:
            mint:
              $ref: "#/components/schemas/Pubkey"
              description: The Pubkey of the specific token Mint to limit accounts to.
            programId:
              $ref: "#/components/schemas/Pubkey"
              description: The Pubkey of the Token program that owns the accounts.
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetTokenAccountsByOwnerConfig"
    result:
      name: Token accounts
      description: An array of JSON objects representing the token accounts owned by the specified Pubkey.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/TokenAccount"

  - name: getLargestAccounts
    description: Returns the 20 largest accounts, by lamport balance.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/LargestAccountsConfig"
    result:
      name: Largest accounts
      description: An array of objects containing the address of the account and its lamport balance.
      schema:
        $ref: "#/components/schemas/LargestAccountsList"

  # Airdrop methods
  - name: requestAirdrop
    description: Requests an airdrop of lamports to a Pubkey.
    params:
      - name: Pubkey
        required: true
        description: The Pubkey of the account to receive lamports.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Lamports
        required: true
        description: The number of lamports to airdrop, as a "u64".
        schema:
          type: integer
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/RequestAirdropConfig"
    result:
      name: Transaction signature
      description: Transaction Signature of the airdrop.
      schema:
        type: string

  # Block methods
  - name: getBlock
    description: Returns identity and transaction information about a confirmed block in the ledger.
    params:
      - name: slot
        required: true
        description: Slot number as a u64 integer.
        schema:
          type: integer
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetBlockConfig"
    result:
      name: Block information
      description: Returns block information or null if the block is not confirmed.
      schema:
        $ref: "../_shared/components/block.yaml#/components/schemas/BlockInfo"

  - name: getBlocks
    description: Returns a list of confirmed blocks between two slots.
    params:
      - name: start_slot
        required: true
        description: The starting slot.
        schema:
          type: integer
      - name: end_slot
        required: false
        description: The ending slot.
        schema:
          type: integer
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetBlocksConfig"
    result:
      name: List of confirmed blocks
      description: Returns an array of u64 integers listing confirmed blocks.
      schema:
        $ref: "#/components/schemas/SlotList"

  - name: getBlocksWithLimit
    description: Returns a list of confirmed blocks starting at the given slot.
    params:
      - name: start_slot
        required: true
        description: The starting slot.
        schema:
          type: integer
      - name: limit
        required: true
        description: The limit for the number of blocks to return.
        schema:
          type: integer
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetBlocksConfig"
    result:
      name: List of confirmed blocks
      description: Returns an array of u64 integers listing confirmed blocks starting at the start_slot.
      schema:
        $ref: "#/components/schemas/SlotList"

  - name: getBlockCommitment
    description: Returns the commitment for a particular block.
    params:
      - name: block
        required: true
        description: Block number, identified by Slot.
        schema:
          type: integer
    result:
      name: Block commitment
      description: Returns the commitment and total active stake for the block.
      schema:
        $ref: "#/components/schemas/GetBlockCommitmentResult"

  - name: getBlockProduction
    description: Returns recent block production information from the current or previous epoch.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetBlockProductionConfig"
    result:
      name: Block production information
      description: Returns block production information for the specified range.
      schema:
        $ref: "../_shared/components/block.yaml#/components/schemas/BlockProductionInfo"

  - name: getBlockTime
    description: Returns the estimated production time of a block.
    params:
      - name: block
        required: true
        description: Block number, identified by Slot.
        schema:
          $ref: "#/components/schemas/GetBlockTimeParams"
    result:
      name: Estimated production time
      description: The estimated production time of the block as a Unix timestamp.
      schema:
        $ref: "#/components/schemas/EstimatedProductionTime"

  - name: getFirstAvailableBlock
    description: Returns the slot of the lowest confirmed block that has not been purged from the ledger.
    params: []
    result:
      name: Slot
      description: The slot number of the lowest confirmed block that is still available in the ledger.
      schema:
        $ref: "#/components/schemas/FirstAvailableBlockSlot"

  - name: getGenesisHash
    description: Returns the genesis hash.
    params: []
    result:
      name: Genesis hash
      description: The genesis hash as a base-58 encoded string.
      schema:
        $ref: "#/components/schemas/GenesisHash"

  - name: getHighestSnapshotSlot
    description: Returns the highest slot information that the node has snapshots for.
    params: []
    result:
      name: Snapshot slot information
      description: Returns a JSON object with the highest full snapshot slot.
      schema:
        $ref: "#/components/schemas/HighestSnapshotSlot"

  - name: getMaxRetransmitSlot
    description: Get the max slot seen from the retransmit stage.
    params: []
    result:
      name: Slot number
      description: The maximum slot number seen from the retransmit stage.
      schema:
        $ref: "#/components/schemas/MaxSlotResult"

  - name: getMaxShredInsertSlot
    description: Get the max slot seen from after shred insert.
    params: []
    result:
      name: Slot number
      description: The maximum slot number seen after shred insert.
      schema:
        $ref: "#/components/schemas/MaxSlotResult"

  - name: getBlockHeight
    description: Returns the current block height of the node.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object containing additional request parameters.
        schema:
          $ref: "#/components/schemas/GetBlockHeightConfig"
    result:
      name: Block height
      description: The current block height, as a u64 integer.
      schema:
        $ref: "../_shared/components/block.yaml#/components/schemas/BlockHeight"

  - name: getLatestBlockhash
    description: Returns the latest blockhash.
    params:
      - name: Configuration
        required: false
        description: A configuration object with optional fields for specifying commitment and minimum context slot.
        schema:
          $ref: "#/components/schemas/GetLatestBlockhashConfig"
    result:
      name: Latest Blockhash
      description: RpcResponse object with blockhash information.
      schema:
        $ref: "#/components/schemas/LatestBlockhash"

  - name: isBlockhashValid
    description: Returns whether a blockhash is still valid or not.
    params:
      - name: blockhash
        required: true
        description: The blockhash of the block to evaluate.
        schema:
          type: string
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/IsBlockhashValidParams"
    result:
      name: Validity
      description: Indicates if the blockhash is still valid.
      schema:
        $ref: "#/components/schemas/IsBlockhashValidResult"

  # Cluster Program methods
  - name: getClusterNodes
    description: Returns information about all the nodes participating in the cluster.
    params: []
    result:
      name: List of nodes
      description: Returns an array of JSON objects, each containing information about a node in the cluster.
      schema:
        $ref: "#/components/schemas/ClusterNodesList"

  - name: getHealth
    description: Returns the current health of the node.
    params: []
    result:
      name: Health status
      description: If the node is healthy, the result is "ok".
      schema:
        $ref: "#/components/schemas/HealthStatus"

  - name: getIdentity
    description: Returns the identity pubkey for the current node.
    params: []
    result:
      name: Identity pubkey
      description: The identity pubkey of the current node.
      schema:
        $ref: "#/components/schemas/NodeIdentity"

  - name: getSlotLeader
    description: Returns the current slot leader.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/SlotConfig"
    result:
      name: Slot leader
      description: The node identity Pubkey as a base-58 encoded string.
      schema:
        $ref: "#/components/schemas/SlotLeader"

  - name: getSlotLeaders
    description: Returns the slot leaders for a given slot range.
    params:
      - name: Start slot
        required: true
        description: The starting slot as a u64 integer.
        schema:
          type: integer
      - name: Limit
        required: true
        description: The number of slot leaders to return, between 1 and 5,000.
        schema:
          type: integer
    result:
      name: Slot leaders
      description: An array of node identity public keys as base-58 encoded strings.
      schema:
        $ref: "#/components/schemas/SlotLeaders"

  - name: getVoteAccounts
    description: Returns the account info and associated stake for all voting accounts in the current bank.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetVoteAccountsConfig"
    result:
      name: Vote accounts
      description: Information about current and delinquent vote accounts.
      schema:
        $ref: "#/components/schemas/VoteAccounts"

  - name: getProgramAccounts
    description: Returns all accounts owned by the provided program Pubkey.
    params:
      - name: Pubkey
        required: true
        description: The Pubkey of the program.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetProgramAccountsConfig"
    result:
      name: Program accounts
      description: An array of JSON objects containing program account details.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/ProgramAccount"

  # Fee methods
  - name: getFeeForMessage
    description: Get the fee the network will charge for a particular Message.
    params:
      - name: Message
        required: true
        description: Base-64 encoded Message.
        schema:
          $ref: "#/components/schemas/FeeForMessageParams"
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/FeeForMessageConfig"
    result:
      name: Fee for the message
      description: The fee corresponding to the message at the specified blockhash.
      schema:
        $ref: "#/components/schemas/FeeForMessageResult"

  - name: getMinimumBalanceForRentExemption
    description: Returns the minimum balance required to make an account rent exempt.
    params:
      - name: Account data length
        required: true
        description: The account's data length in bytes.
        schema:
          $ref: "#/components/schemas/MinimumBalanceForRentExemptionParams"
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/MinimumBalanceForRentExemptionConfig"
    result:
      name: Minimum balance for rent exemption
      description: The minimum number of lamports required in the account to remain rent-free.
      schema:
        $ref: "#/components/schemas/MinimumBalanceForRentExemptionResult"

  - name: getRecentPrioritizationFees
    description: Returns a list of prioritization fees from recent blocks.
    params:
      - name: Account addresses
        required: false
        description: An array of up to 128 account addresses. If provided, the response will reflect a fee to land a transaction locking all of the provided accounts as writable.
        schema:
          type: array
          items:
            $ref: "#/components/schemas/Pubkey"
    result:
      name: Prioritization fees
      description: An array of prioritization fees observed in recent blocks.
      schema:
        $ref: "#/components/schemas/GetRecentPrioritizationFeesResult"

  # Inflation methods
  - name: getInflationGovernor
    description: Returns the current inflation governor.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetEpochInfoConfig"
    result:
      name: Inflation governor details
      description: Returns a JSON object containing the inflation governor parameters.
      schema:
        $ref: "#/components/schemas/InflationGovernor"

  - name: getInflationRate
    description: Returns the specific inflation values for the current epoch.
    params: []
    result:
      name: Inflation rate details
      description: Returns a JSON object containing the inflation values for the current epoch.
      schema:
        $ref: "#/components/schemas/InflationRate"

  - name: getInflationReward
    description: Returns the inflation or staking reward for a list of addresses for a specified epoch.
    params:
      - name: Addresses
        required: true
        description: An array of addresses to query.
        schema:
          $ref: "#/components/schemas/InflationRewardParams"
    result:
      name: Inflation reward details
      description: Returns a JSON array with reward details for each address.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/InflationReward"

  # Performance methods
  - name: getRecentPerformanceSamples
    description: Returns a list of recent performance samples, in reverse slot order.
    params:
      - name: limit
        required: false
        description: The number of samples to return.
        schema:
          type: integer
    result:
      name: Performance samples
      description: An array of performance sample data.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/PerformanceSample"

  # State methods
  - name: getEpochInfo
    description: Returns information about the current epoch.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetEpochInfoConfig"
    result:
      name: Epoch information
      description: Returns an object containing information about the current epoch.
      schema:
        $ref: "#/components/schemas/EpochInfo"

  - name: getEpochSchedule
    description: Returns the epoch schedule information from the cluster's genesis config.
    params: []
    result:
      name: Epoch schedule information
      description: Returns an object containing information about the epoch schedule.
      schema:
        $ref: "#/components/schemas/EpochSchedule"

  - name: getSlot
    description: Returns the slot that has reached the given or default commitment level.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/SlotConfig"
    result:
      name: Current slot
      description: The current slot at the specified commitment level.
      schema:
        type: integer

  - name: minimumLedgerSlot
    description: Returns the lowest slot that the node has information about in its ledger.
    params: []
    result:
      name: Minimum ledger slot
      description: The lowest slot number the node has information about.
      schema:
        $ref: "#/components/schemas/MinimumLedgerSlot"

  - name: getVersion
    description: Returns the current Solana version running on the node.
    params: []
    result:
      name: Version details
      description: The current Solana version running on the node.
      schema:
        $ref: "#/components/schemas/VersionInfo"

  # Supply methods
  - name: getSupply
    description: Returns information about the current supply of lamports.
    params:
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetSupplyConfig"
    result:
      name: Supply information
      description: An RpcResponse JSON object containing the current supply information.
      schema:
        $ref: "#/components/schemas/SupplyInfo"

  - name: getTokenSupply
    description: Returns the total supply of an SPL Token type.
    params:
      - name: Token Mint Pubkey
        required: true
        description: The Pubkey of the token Mint to query.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetTokenSupplyConfig"
    result:
      name: Token supply
      description: The total supply of the specified SPL Token.
      schema:
        $ref: "#/components/schemas/TokenBalance"

  # Transaction methods
  - name: sendTransaction
    description: Submits a signed transaction to the cluster for processing.
    params:
      - name: Transaction
        required: true
        description: Fully-signed Transaction, as encoded string.
        schema:
          type: string
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/SendTransactionConfig"
    result:
      name: Transaction signature
      description: The first signature in the transaction, used as the transaction ID.
      schema:
        $ref: "#/components/schemas/SendTransactionResult"

  - name: simulateTransaction
    description: Simulates sending a transaction.
    params:
      - name: Transaction
        required: true
        description: The transaction to simulate, as an encoded string.
        schema:
          type: string
      - name: Configuration
        required: false
        description: Optional configuration object containing additional options.
        schema:
          $ref: "#/components/schemas/SimulateTransactionConfig"
    result:
      name: Simulated transaction result
      description: The result of simulating the transaction.
      schema:
        $ref: "#/components/schemas/SimulatedTransactionResult"

  - name: getSignaturesForAddress
    description: Returns signatures for confirmed transactions that include the given address.
    params:
      - name: Account address
        required: true
        description: The account address.
        schema:
          $ref: "#/components/schemas/Pubkey"
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetSignaturesForAddressConfig"
    result:
      name: Transaction signatures
      description: An array of objects containing transaction signature information.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/SignatureInfo"

  - name: getSignatureStatuses
    description: Returns the statuses of a list of transaction signatures.
    params:
      - name: Signatures
        required: true
        description: An array of transaction signatures to confirm.
        schema:
          type: array
          items:
            type: string
      - name: Configuration
        required: false
        description: Optional configuration object.
        schema:
          $ref: "#/components/schemas/GetSignatureStatusesConfig"
    result:
      name: Transaction statuses
      description: An array containing the status of each transaction signature.
      schema:
        type: array
        items:
          $ref: "#/components/schemas/TransactionStatus"

  - name: getTransaction
    description: Returns transaction details for a confirmed transaction.
    params:
      - name: Transaction signature
        required: true
        description: Transaction signature as a base-58 encoded string.
        schema:
          type: string
      - name: Configuration
        required: false
        description: Optional configuration object containing additional settings.
        schema:
          $ref: "#/components/schemas/GetTransactionConfig"
    result:
      name: Transaction details
      description: The details of a confirmed transaction.
      schema:
        $ref: "#/components/schemas/TransactionDetails"
