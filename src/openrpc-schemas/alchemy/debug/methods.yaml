- name: debug_getRawBlock
  summary: Returns an RLP-encoded block.
  params:
    - name: BlockNumberOrTag
      required: true
      description: The block number or tag (e.g., "latest", "earliest").
      schema:
        oneOf:
          - $ref: "#/components/schemas/uint"
          - $ref: "#/components/schemas/bytes"
  result:
    name: RLP-encoded block
    description: The block encoded in RLP format.
    schema:
      type: string
  examples:
    - name: debug_getRawBlock example
      params:
        - name: BlockNumberOrTag
          value: "latest"
      result:
        name: RLP-encoded block
        value: "0xf96096f90236a09f73691f6dabca4f0a99b05d0a701995506aa311dcaa9ce9833d6f..."

- name: debug_getRawHeader
  summary: Returns an RLP-encoded header.
  params:
    - name: BlockNumberOrTag
      required: true
      description: The block number or tag (e.g., "latest", "earliest").
      schema:
        oneOf:
          - $ref: "#/components/schemas/uint"
          - $ref: "#/components/schemas/bytes"
  result:
    name: RLP-encoded header
    description: The header encoded in RLP format.
    schema:
      type: string
  examples:
    - name: debug_getRawHeader example
      params:
        - name: BlockNumberOrTag
          value: "latest"
      result:
        name: RLP-encoded header
        value: "0xf90236a09f73691f6dabca4f0a99b05d0a701995506aa311dcaa9ce9833d6f4ca474c162a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794c6e2459991bfe27cca6d86722f35da23a1e4cb97a078103ea8c47231886481d72ec1afae6eeb06c3773ce24a91323d5c9eed69d4cca0008992da2531db404f07b0871dd620a94ba346963e1b1c6dc7b00748e8593a1ea0b6c3890d9604434fc52f722848c84d1770add20cd75bbc28cdedff42940dbb56b90100200800000400000002000e0000000401000000440100000000c0400600000002000801000000040480020840048000000000400000000000000020004220000011002000000000000204000800000010010002000002000000000040a000000000000400020000010885000000000808000000008800001004002010020300005000000010002110410402000000000000000890000008000000000000000000020040000002000000000000810400000040006000004000004080020000000000000022001000000000000840400000000220250000000000080402000420000418000000000000000400040000004080040010200000000000108020020000808332026e8401c9c380833e3c3c846436f93899d883010b05846765746888676f312e32302e32856c696e7578a0112d8f15793e7df7f8dcdb21c891cff78c0d1839cb5b6dcd06116cdbb99536ae88000000000000000008a0cdb97712af6685bb9650d21d609525913293c48adda7c45990926daada335c9b"

- name: debug_getRawReceipts
  summary: Returns an array of EIP-2718 binary-encoded receipts.
  params:
    - name: BlockNumberOrTag
      required: true
      description: The block number or tag (e.g., "latest", "earliest").
      schema:
        oneOf:
          - $ref: "#/components/schemas/uint"
          - $ref: "#/components/schemas/bytes"
  result:
    name: EIP-2718 binary-encoded receipts
    description: Array of receipts encoded in EIP-2718 format.
    schema:
      type: array
      items:
        type: string
  examples:
    - name: debug_getRawReceipts example
      params:
        - name: BlockNumberOrTag
          value: "latest"
      result:
        name: EIP-2718 binary-encoded receipts
        value:
          [
            "0xf901a60182c70ebf89df89b947753cfad258efbc52a9a1452e42ffbce9be486cbf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000828d0386c1122e565f07dd28c7d1340ed5b3315a000000000000000000000000021849e99c31e3113a489d7eb0fd4d8c0edbe47afa00000000000000000000000000000000000000000000000000000000029b92700",
            "0xf901a70183018e1cbf89df89b947753cfad258efbc52a9a1452e42ffbce9be486cbf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000828d0386c1122e565f07dd28c7d1340ed5b3315a000000000000000000000000069cda9d6cc6ce05982d0b4fdf9480f2991f39b5aa00000000000000000000000000000000000000000000000000000000029b92700",
          ]

- name: debug_traceBlockByHash
  summary: Replays the block that is already present in the database.
  params:
    - name: Block hash
      required: true
      description: Block hash for the block to be traced.
      schema:
        $ref: "#/components/schemas/hash32"
    - name: Tracer
      required: false
      description: Tracer object for the call.
      schema:
        type: object
        properties:
          tracer:
            type: string
            enum: ["callTracer", "prestateTracer"]
          tracerConfig:
            type: object
            properties:
              onlyTopCall:
                type: boolean
  result:
    name: Block traces
    description: Array of block traces.
    schema:
      type: array
      items:
        type: object
  examples:
    - name: debug_traceBlockByHash example
      params:
        - name: Block hash
          value: "0x7bd8357213af34d3fe7f725d9b21187a5a58127e39aac5776fd0594e3391ea6e"
      result:
        name: Block traces
        value: []

- name: debug_traceBlockByNumber
  summary: Replays the block that is already present in the database.
  params:
    - name: Block number or tag
      required: true
      description: Block number or tag for the block to be traced.
      schema:
        oneOf:
          - $ref: "#/components/schemas/uint"
          - $ref: "#/components/schemas/bytes"
    - name: Tracer
      required: false
      description: Tracer object for the call.
      schema:
        type: object
        properties:
          tracer:
            type: string
            enum: ["callTracer", "prestateTracer"]
          tracerConfig:
            type: object
            properties:
              onlyTopCall:
                type: boolean
  result:
    name: Block traces
    description: Array of block traces.
    schema:
      type: array
      items:
        type: object
  examples:
    - name: debug_traceBlockByNumber example
      params:
        - name: Block number or tag
          value: "0xccde12"
      result:
        name: Block traces
        value: []

- name: debug_traceCall
  summary: Runs an eth_call within the context of the given block execution using the final state of parent block as the base.
  params:
    - name: Transaction Object
      required: true
      description: The transaction call object.
      schema:
        type: object
        properties:
          from:
            type: string
            pattern: "^0[xX][0-9a-fA-F]{40}$"
          to:
            type: string
            pattern: "^0[xX][0-9a-fA-F]{40}$"
          gas:
            type: string
            pattern: "^0[xX]([1-9a-fA-F][0-9a-fA-F]*|0)$"
          gasPrice:
            type: string
            pattern: "^0[xX]([1-9a-fA-F][0-9a-fA-F]*|0)$"
          value:
            type: string
            pattern: "^0[xX]([1-9a-fA-F][0-9a-fA-F]*|0)$"
          data:
            type: string
            pattern: "^0[xX][0-9a-fA-F]*$"
    - name: Block identifier
      required: true
      description: Block hash, block number (in hex), or block tag.
      schema:
        oneOf:
          - $ref: "#/components/schemas/uint"
          - $ref: "#/components/schemas/bytes"
    - name: Tracer
      required: false
      description: Tracer object for the call.
      schema:
        type: object
        properties:
          tracer:
            type: string
            enum: ["callTracer", "prestateTracer"]
          tracerConfig:
            type: object
            properties:
              onlyTopCall:
                type: boolean
  result:
    name: Call traces
    description: Array of call traces.
    schema:
      type: array
      items:
        type: object
  examples:
    - name: debug_traceCall example
      params:
        - name: Transaction Object
          value: {}
        - name: Block identifier
          value: "latest"
      result:
        name: Call traces
        value: []

- name: debug_traceTransaction
  summary: Attempts to run the transaction in the exact same manner as it was executed on the network.
  params:
    - name: Transaction hash
      required: true
      description: Hash of the transaction to be traced.
      schema:
        $ref: "#/components/schemas/hash32"
    - name: Options
      required: false
      description: Options for the call.
      schema:
        type: object
        properties:
          tracer:
            type: string
            enum: ["callTracer", "prestateTracer"]
          tracerConfig:
            type: object
            properties:
              onlyTopCall:
                type: boolean
          timeout:
            type: string
            description: A duration string that overrides the default timeout.
  result:
    name: Transaction trace
    description: Trace for the transaction.
    schema:
      type: object
  examples:
    - name: debug_traceTransaction example
      params:
        - name: Transaction hash
          value: "0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae"
      result:
        name: Transaction trace
        value: {}
