{
  "openrpc": "1.2.4",
  "info": {
    "title": "Alchemy Gas Manager Coverage API JSON-RPC Specification",
    "description": "A specification of the standard JSON-RPC methods for Gas Manager Coverage API.",
    "version": "0.0.0"
  },
  "servers": [
    {
      "url": "https://eth-mainnet.g.alchemy.com/v2/",
      "name": "Ethereum Mainnet"
    },
    {
      "url": "https://eth-sepolia.g.alchemy.com/v2/",
      "name": "Ethereum Sepolia"
    },
    {
      "url": "https://eth-holesky.g.alchemy.com/v2/",
      "name": "Ethereum Holesky"
    },
    {
      "url": "https://opt-mainnet.g.alchemy.com/v2/",
      "name": "Optimism Mainnet"
    },
    {
      "url": "https://polygon-mainnet.g.alchemy.com/v2/",
      "name": "Polygon Mainnet"
    },
    {
      "url": "https://polygon-amoy.g.alchemy.com/v2/",
      "name": "Polygon Amoy"
    },
    {
      "url": "https://arb-mainnet.g.alchemy.com/v2/",
      "name": "Arbitrum Mainnet"
    },
    {
      "url": "https://arb-sepolia.g.alchemy.com/v2/",
      "name": "Arbitrum Sepolia"
    },
    {
      "url": "https://arbnova-mainnet.g.alchemy.com/v2/",
      "name": "Arbitrum Nova"
    },
    {
      "url": "https://berachain-bartio.g.alchemy.com/v2/",
      "name": "Berachain Bartio"
    },
    {
      "url": "https://zora-mainnet.g.alchemy.com/v2/",
      "name": "Zora Mainnet"
    },
    {
      "url": "https://zora-sepolia.g.alchemy.com/v2/",
      "name": "Zora Sepolia"
    },
    {
      "url": "https://polynomial-mainnet.g.alchemy.com/v2/",
      "name": "Polynomial Mainnet"
    },
    {
      "url": "https://polynomial-sepolia.g.alchemy.com/v2/",
      "name": "Polynomial Sepolia"
    },
    {
      "url": "https://base-mainnet.g.alchemy.com/v2/",
      "name": "Base Mainnet"
    },
    {
      "url": "https://base-sepolia.g.alchemy.com/v2/",
      "name": "Base Sepolia"
    },
    {
      "url": "https://frax-mainnet.g.alchemy.com/v2/",
      "name": "Frax Mainnet"
    },
    {
      "url": "https://frax-sepolia.g.alchemy.com/v2/",
      "name": "Frax Sepolia"
    },
    {
      "url": "https://anime-sepolia.g.alchemy.com/v2/",
      "name": "Anime Sepolia"
    },
    {
      "url": "https://race-mainnet.g.alchemy.com/v2/",
      "name": "Race Mainnet"
    },
    {
      "url": "https://shape-mainnet.g.alchemy.com/v2/",
      "name": "Shape Mainnet"
    },
    {
      "url": "https://worldchain-mainnet.g.alchemy.com/v2/",
      "name": "Worldchain Mainnet"
    },
    {
      "url": "https://ink-mainnet.g.alchemy.com/v2/",
      "name": "Ink Mainnet"
    },
    {
      "url": "https://ink-sepolia.g.alchemy.com/v2/",
      "name": "Ink Sepolia"
    }
  ],
  "methods": [
    {
      "name": "alchemy_requestGasAndPaymasterAndData",
      "summary": "Requests gas and coverage for a UserOperation. Returns paymasterAndData and gas parameters if approved, errors if not. Optionally accepts fee parameter overrides to be used in the UserOperation.\n",
      "params": [
        {
          "name": "webhookData",
          "required": false,
          "description": "Additional data you wish to include in the request, such as proof of humanity.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "policyId",
          "required": false,
          "description": "The policy ID or list of policy IDs.",
          "schema": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "default": "69d524a7-e932-4214-8673-dcdcba31bb42"
          }
        },
        {
          "name": "entryPoint",
          "required": true,
          "description": "The entrypoint address the request should be sent through. This MUST be one of the entry points returned by the supportedEntryPoints RPC call and match the version of the user operation in the userOperation field.\n",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]*$",
            "default": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
          }
        },
        {
          "name": "userOperation",
          "required": true,
          "description": "Partial UserOperation object, missing gas parameters, paymasterAndData and signature fields. This can be either a v0.6 or v0.7 user operation, but MUST match the version of the entry point at the address in the entryPoint field.\n",
          "schema": {
            "title": "User Operation, either v0.6 or v0.7 (missing signature, paymasterData, and gas fields)",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account making the operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Anti-replay parameter; used as salt for first-time account creation",
                    "required": false
                  },
                  "initCode": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "The initCode of the account (needed if the account is not yet on-chain and needs creation)",
                    "required": false
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Encoded data for the primary function call or operation"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for the main execution call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "Gas for pre-verification execution and calldata"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Maximum fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Max priority fee per gas (EIP-1559)"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "Account initiating operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Account nonce or creation salt"
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for operation call"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Max fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Priority fee per gas (EIP-1559)"
                  },
                  "paymasterVerificationGasLimit": {
                    "type": "string",
                    "description": "Paymaster verification gas limit"
                  },
                  "factory": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account factory address (needed if and only if the account is not yet on-chain and needs to be created)"
                  },
                  "factoryData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for the account factory (only if the account factory exists)"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata"
                  },
                  "paymasterPostOpGasLimit": {
                    "type": "string",
                    "description": "The amount of gas to allocate for the paymaster post-op code (only if a paymaster exists)"
                  }
                }
              }
            ]
          }
        }
      ],
      "result": {
        "name": "Asset changes",
        "description": "The transformed response object that wraps the original gas and paymaster response. It includes an array of asset change objects, a gasUsed field, and an error field.\n",
        "schema": {
          "type": "object",
          "properties": {
            "entrypointV06Response": {
              "title": "Entrypoint v0.6 Response",
              "type": "object",
              "properties": {
                "paymasterAndData": {
                  "type": "string",
                  "description": "The 0x‑prefixed hex string for the user to put into the UO's paymasterAndData field. Contains gas manager address, sigTimeRange, and secp256k1 signature.\n"
                }
              }
            },
            "entrypointV07Response": {
              "title": "Entrypoint v0.7 Response",
              "type": "object",
              "properties": {
                "paymaster": {
                  "type": "string",
                  "description": "The address of the paymaster."
                },
                "paymasterData": {
                  "type": "string",
                  "description": "The data for the paymaster in the operation."
                },
                "paymasterVerificationGasLimit": {
                  "type": "string",
                  "description": "The gas limit for paymaster verification."
                },
                "paymasterPostOpGasLimit": {
                  "type": "string",
                  "description": "The gas limit for paymaster post-operation."
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "name": "alchemy_requestGasAndPaymasterAndData example",
          "params": [
            {
              "value": {
                "webhookData": "example webhook data",
                "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                "entryPoint": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
                "dummySignature": "0xe8fe34b166b64d118dccf44c7198648127bf8a76a48a042862321af6058026d276ca6abb4ed4b60ea265d1e57e33840d7466de75e13f072bbd3b7e64387eebfe1b",
                "userOperation": {
                  "sender": "0x1234567890123456789012345678901234567890",
                  "nonce": "0x1",
                  "callData": "0xabcdef",
                  "callGasLimit": "0x5208",
                  "verificationGasLimit": "0x5208",
                  "preVerificationGas": "0x5208",
                  "maxFeePerGas": "0x1",
                  "maxPriorityFeePerGas": "0x1"
                }
              }
            }
          ],
          "result": {
            "jsonrpc": "2.0",
            "id": 1,
            "result": {
              "entrypointV06Response": {
                "paymasterAndData": "0xabcde"
              },
              "entrypointV07Response": {
                "paymasterData": "0x67890",
                "paymasterVerificationGasLimit": "0x5208",
                "paymasterPostOpGasLimit": "0x5208"
              }
            }
          }
        }
      ]
    },
    {
      "name": "alchemy_requestPaymasterAndData",
      "summary": "Requests coverage for a UserOperation. Returns paymasterAndData if approved, errors if not.",
      "params": [
        {
          "name": "webhookData",
          "required": false,
          "description": "Additional data you wish to include in the request, such as proof of humanity.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "policyId",
          "required": false,
          "description": "The policy ID or list of policy IDs.",
          "schema": {
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            ],
            "default": "0x1234567890123456789012345678901234567890123456789012345678901234"
          }
        },
        {
          "name": "entryPoint",
          "required": true,
          "description": "The entrypoint address the request should be sent through. This MUST be one of the entry points returned by the supportedEntryPoints RPC call and match the version of the user operation in the entryPoint field.\n",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]*$",
            "default": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
          }
        },
        {
          "name": "dummySignature",
          "required": false,
          "description": "Dummy signature for the operation. This is useful for estimating gas costs.",
          "schema": {
            "type": "string",
            "default": "0xe8fe34b166b64d118dccf44c7198648127bf8a76a48a042862321af6058026d276ca6abb4ed4b60ea265d1e57e33840d7466de75e13f072bbd3b7e64387eebfe1b"
          }
        },
        {
          "name": "userOperation",
          "required": true,
          "description": "Partial UserOperation object, missing paymasterAndData and signature fields. This can be either a v0.6 or v0.7 user operation, but MUST match the version of the entry point at the address in the entryPoint field.\n",
          "schema": {
            "title": "User Operation, either v0.6 or v0.7 (missing signature and paymasterData)",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account making the operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Anti-replay parameter; used as salt for first-time account creation",
                    "required": false
                  },
                  "initCode": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "The initCode of the account (needed if the account is not yet on-chain and needs creation)",
                    "required": false
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Encoded data for the primary function call or operation"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for the main execution call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "Gas for pre-verification execution and calldata"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Maximum fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Max priority fee per gas (EIP-1559)"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "Account initiating operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Account nonce or creation salt"
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for operation call"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Max fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Priority fee per gas (EIP-1559)"
                  },
                  "paymasterVerificationGasLimit": {
                    "type": "string",
                    "description": "Paymaster verification gas limit"
                  },
                  "factory": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account factory address (needed if and only if the account is not yet on-chain and needs to be created)"
                  },
                  "factoryData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for the account factory (only if the account factory exists)"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata"
                  },
                  "paymasterPostOpGasLimit": {
                    "type": "string",
                    "description": "The amount of gas to allocate for the paymaster post-op code (only if a paymaster exists)"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "overrides",
          "required": false,
          "description": "Optional fields to override default gas and fee behavior – these can be multiplier overrides or absolute overrides.\n",
          "schema": {
            "type": "object",
            "properties": {
              "maxFeePerGas": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Hex string."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiplier": {
                        "type": "number"
                      }
                    },
                    "required": ["multiplier"],
                    "description": "Multiplier value."
                  }
                ]
              },
              "maxPriorityFeePerGas": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Hex string."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiplier": {
                        "type": "number"
                      }
                    },
                    "required": ["multiplier"],
                    "description": "Multiplier value."
                  }
                ]
              },
              "callGasLimit": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Hex string."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiplier": {
                        "type": "number"
                      }
                    },
                    "required": ["multiplier"],
                    "description": "Multiplier value."
                  }
                ]
              },
              "verificationGasLimit": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Hex string."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiplier": {
                        "type": "number"
                      }
                    },
                    "required": ["multiplier"],
                    "description": "Multiplier value."
                  }
                ]
              },
              "preVerificationGas": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Hex string."
                  },
                  {
                    "type": "object",
                    "properties": {
                      "multiplier": {
                        "type": "number"
                      }
                    },
                    "required": ["multiplier"],
                    "description": "Multiplier value."
                  }
                ]
              }
            }
          }
        },
        {
          "name": "stateOverrideSet",
          "required": false,
          "description": "Allows changes to the state of a contract before executing the call. For example, you can modify variable values (like balances or approvals) for that call without changing the contract itself on the blockchain. In more technical terms, the state override set is an optional parameter that allows executing the call against a modified chain state. It is an address-to-state mapping, where each entry specifies some state to be overridden prior to executing the call. Each address maps to an object containing:",
          "schema": {
            "type": "object",
            "properties": {
              "balance": {
                "type": "Quantity (Hex string)",
                "description": "The balance of the contract"
              },
              "code": {
                "type": "Binary (Hex string)",
                "description": "The code of the contract"
              },
              "nonce": {
                "type": "Quantity (Hex string)",
                "description": "The nonce of the contract"
              },
              "state": {
                "type": "Object",
                "description": "The state of the contract"
              },
              "stateDiff": {
                "type": "Object",
                "description": "The state diff of the contract"
              }
            }
          }
        }
      ],
      "result": {
        "name": "Response",
        "description": "The response object may be one of two types: - For entrypoint v0.6: an object with property paymasterAndData. - For entrypoint v0.7: an object with properties paymasterData, paymasterVerificationGasLimit, and paymasterPostOpGasLimit.\n",
        "schema": {
          "type": "object",
          "properties": {
            "entrypointV06Response": {
              "title": "Entrypoint v0.6 Response",
              "type": "object",
              "properties": {
                "paymasterAndData": {
                  "type": "string",
                  "description": "The 0x‑prefixed hex string for the user to put into the UO's paymasterAndData field."
                },
                "callGasLimit": {
                  "type": "string",
                  "description": "The gas limit for the call."
                },
                "verificationGasLimit": {
                  "type": "string",
                  "description": "The gas limit for verification."
                },
                "preVerificationGas": {
                  "type": "string",
                  "description": "The gas limit for pre-verification."
                },
                "maxFeePerGas": {
                  "type": "string",
                  "description": "The max fee per gas."
                },
                "maxPriorityFeePerGas": {
                  "type": "string",
                  "description": "The max priority fee per gas."
                }
              }
            },
            "entrypointV07Response": {
              "title": "Entrypoint v0.7 Response",
              "type": "object",
              "properties": {
                "paymaster": {
                  "type": "string",
                  "description": "The address of the paymaster."
                },
                "paymasterData": {
                  "type": "string",
                  "description": "The data for the paymaster in the operation."
                },
                "callGasLimit": {
                  "type": "string",
                  "description": "The gas limit for the call."
                },
                "verificationGasLimit": {
                  "type": "string",
                  "description": "The gas limit for verification."
                },
                "preVerificationGas": {
                  "type": "string",
                  "description": "The gas limit for pre-verification."
                },
                "maxFeePerGas": {
                  "type": "string",
                  "description": "The max fee per gas."
                },
                "maxPriorityFeePerGas": {
                  "type": "string",
                  "description": "The max priority fee per gas."
                },
                "paymasterVerificationGasLimit": {
                  "type": "string",
                  "description": "The gas limit for paymaster verification."
                },
                "paymasterPostOpGasLimit": {
                  "type": "string",
                  "description": "The gas limit for paymaster post-operation."
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "name": "alchemy_requestPaymasterAndData example",
          "params": [
            {
              "value": {
                "webhookData": "example webhook data",
                "policyId": "0x1234567890123456789012345678901234567890123456789012345678901234",
                "entryPoint": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789",
                "userOperation": {
                  "sender": "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",
                  "nonce": "0x2",
                  "callData": "0xdeadbeef",
                  "callGasLimit": "0x5208",
                  "verificationGasLimit": "0x5208",
                  "preVerificationGas": "0x5208",
                  "maxFeePerGas": "0x1",
                  "maxPriorityFeePerGas": "0x1"
                }
              }
            }
          ],
          "result": {
            "jsonrpc": "2.0",
            "id": 1,
            "result": {
              "entrypointV06Response": {
                "paymasterAndData": "0xdead",
                "callGasLimit": "0x5208",
                "verificationGasLimit": "0x5208",
                "preVerificationGas": "0x5208",
                "maxFeePerGas": "0x1",
                "maxPriorityFeePerGas": "0x1"
              },
              "entrypointV07Response": {
                "paymaster": "0xfeed",
                "paymasterData": "0xfeed",
                "paymasterVerificationGasLimit": "0x5208",
                "paymasterPostOpGasLimit": "0x5208",
                "callGasLimit": "0x5208",
                "verificationGasLimit": "0x5208",
                "preVerificationGas": "0x5208",
                "maxFeePerGas": "0x1",
                "maxPriorityFeePerGas": "0x1"
              }
            }
          }
        }
      ]
    },
    {
      "name": "pm_getPaymasterData",
      "summary": "Returns values to be used in paymaster-related fields of a signed user operation. These values are not stubs and will be included in a signed user operation as part of an eth_sendUserOperation call. Accepts an unsigned user operation, an entrypoint address, a chain ID, and a context object.\n",
      "params": [
        {
          "name": "userOperation",
          "required": true,
          "description": "Partial UserOperation object (either v0.6 or v0.7, missing signature and paymasterData).\n",
          "schema": {
            "title": "User Operation, either v0.6 or v0.7 (missing signature and paymasterData)",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account making the operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Anti-replay parameter; used as salt for first-time account creation",
                    "required": false
                  },
                  "initCode": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "The initCode of the account (needed if the account is not yet on-chain and needs creation)",
                    "required": false
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Encoded data for the primary function call or operation"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for the main execution call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "Gas for pre-verification execution and calldata"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Maximum fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Max priority fee per gas (EIP-1559)"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "Account initiating operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Account nonce or creation salt"
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for operation call"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Max fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Priority fee per gas (EIP-1559)"
                  },
                  "paymasterVerificationGasLimit": {
                    "type": "string",
                    "description": "Paymaster verification gas limit"
                  },
                  "factory": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account factory address (needed if and only if the account is not yet on-chain and needs to be created)"
                  },
                  "factoryData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for the account factory (only if the account factory exists)"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata"
                  },
                  "paymasterPostOpGasLimit": {
                    "type": "string",
                    "description": "The amount of gas to allocate for the paymaster post-op code (only if a paymaster exists)"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "entryPoint",
          "required": true,
          "description": "The entrypoint address the request should be sent through. Must be one of the entry points returned by the supportedEntryPoints RPC call.\n",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]*$",
            "default": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
          }
        },
        {
          "name": "chainId",
          "required": true,
          "description": "The chain ID of the network the operation will be submitted on.",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]+$",
            "default": "0x1"
          }
        },
        {
          "name": "context",
          "required": false,
          "description": "An object containing context. Must include a policyId and may include webhookData.\n",
          "schema": {
            "type": "object",
            "properties": {
              "policyId": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                ],
                "description": "The policy ID or list of policy IDs."
              },
              "webhookData": {
                "type": "string",
                "description": "Additional data you wish to include (e.g. proof of humanity)."
              }
            }
          }
        }
      ],
      "result": {
        "name": "Response",
        "description": "The response object may be one of two types: - For entrypoint v0.6: an object with property paymasterAndData. - For entrypoint v0.7: an object with property paymasterData.\n",
        "schema": {
          "type": "object",
          "properties": {
            "entrypointV06Response": {
              "title": "EntryPoint v0.6 Response",
              "type": "object",
              "properties": {
                "paymasterAndData": {
                  "type": "string",
                  "description": "The 0x‑prefixed hex string for the user to put into the UO's paymasterAndData field."
                }
              }
            },
            "entrypointV07Response": {
              "title": "EntryPoint v0.7 Response",
              "type": "object",
              "properties": {
                "paymaster": {
                  "type": "string",
                  "description": "The address of the paymaster."
                },
                "paymasterData": {
                  "type": "string",
                  "description": "The data for the paymaster in the operation."
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "name": "pm_getPaymasterData example",
          "params": [
            {
              "value": {
                "userOperation": {
                  "sender": "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",
                  "nonce": "0x2",
                  "callData": "0xdeadbeef",
                  "callGasLimit": "0x5208",
                  "verificationGasLimit": "0x5208",
                  "preVerificationGas": "0x5208",
                  "maxFeePerGas": "0x1",
                  "maxPriorityFeePerGas": "0x1"
                }
              }
            },
            {
              "value": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
            },
            {
              "value": "0x1"
            },
            {
              "value": {
                "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                "webhookData": "example context data"
              }
            }
          ],
          "result": {
            "jsonrpc": "2.0",
            "id": 1,
            "result": {
              "entrypointV06Response": {
                "paymasterAndData": "0xabc123"
              },
              "entrypointV07Response": {
                "paymaster": "0xfeed",
                "paymasterData": "0x789abc"
              }
            }
          }
        }
      ]
    },
    {
      "name": "pm_getPaymasterDataStub",
      "summary": "Returns stub values to be used in paymaster-related fields of an unsigned user operation for gas estimation. Accepts an unsigned user operation, an entrypoint address, a chain ID, and a context object.\n",
      "params": [
        {
          "name": "userOperation",
          "required": true,
          "description": "Partial UserOperation object (either v0.6 or v0.7, missing signature and paymasterData).\n",
          "schema": {
            "title": "User Operation, either v0.6 or v0.7 (missing signature and paymasterData)",
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account making the operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Anti-replay parameter; used as salt for first-time account creation",
                    "required": false
                  },
                  "initCode": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "The initCode of the account (needed if the account is not yet on-chain and needs creation)",
                    "required": false
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Encoded data for the primary function call or operation"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for the main execution call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "Gas for pre-verification execution and calldata"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Maximum fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Max priority fee per gas (EIP-1559)"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "sender": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "Account initiating operation"
                  },
                  "nonce": {
                    "title": "hex encoded unsigned integer",
                    "type": "string",
                    "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                    "description": "Account nonce or creation salt"
                  },
                  "callData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for operation call"
                  },
                  "callGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for call"
                  },
                  "verificationGasLimit": {
                    "type": "string",
                    "description": "Gas allocated for verification"
                  },
                  "maxFeePerGas": {
                    "type": "string",
                    "description": "Max fee per gas (EIP-1559)"
                  },
                  "maxPriorityFeePerGas": {
                    "type": "string",
                    "description": "Priority fee per gas (EIP-1559)"
                  },
                  "paymasterVerificationGasLimit": {
                    "type": "string",
                    "description": "Paymaster verification gas limit"
                  },
                  "factory": {
                    "title": "hex encoded address",
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The account factory address (needed if and only if the account is not yet on-chain and needs to be created)"
                  },
                  "factoryData": {
                    "title": "hex encoded bytes",
                    "type": "string",
                    "pattern": "^0x[0-9a-f]*$",
                    "description": "Data for the account factory (only if the account factory exists)"
                  },
                  "preVerificationGas": {
                    "type": "string",
                    "description": "The amount of gas to pay for to compensate the bundler for pre-verification execution and calldata"
                  },
                  "paymasterPostOpGasLimit": {
                    "type": "string",
                    "description": "The amount of gas to allocate for the paymaster post-op code (only if a paymaster exists)"
                  }
                }
              }
            ]
          }
        },
        {
          "name": "entryPoint",
          "required": true,
          "description": "The entrypoint address the request should be sent through. Must be one of the entry points returned by the supportedEntryPoints RPC call.\n",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]*$",
            "default": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
          }
        },
        {
          "name": "chainId",
          "required": true,
          "description": "The chain ID of the network the operation will be submitted on.",
          "schema": {
            "type": "string",
            "pattern": "^0[xX][0-9a-fA-F]+$",
            "default": "0x1"
          }
        },
        {
          "name": "context",
          "required": false,
          "description": "An object containing context. Must include a policyId and may include webhookData.\n",
          "schema": {
            "type": "object",
            "properties": {
              "policyId": {
                "oneOf": [
                  {
                    "type": "string",
                    "format": "uuid"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                ],
                "description": "The policy ID or list of policy IDs."
              },
              "webhookData": {
                "type": "string",
                "description": "Additional data you wish to include (e.g. proof of humanity)."
              }
            }
          }
        }
      ],
      "result": {
        "name": "Response",
        "description": "The response object may be one of two types: - For entrypoint v0.6: an object with properties paymasterAndData and sponsor. - For entrypoint v0.7: an object with properties paymasterData and sponsor.\n",
        "schema": {
          "type": "object",
          "properties": {
            "entrypointV06Response": {
              "title": "EntryPoint v0.6 Stub Response",
              "type": "object",
              "properties": {
                "paymasterAndData": {
                  "type": "string",
                  "description": "The 0x‑prefixed hex string for the user to put into the UO's paymasterAndData field.\n"
                },
                "sponsor": {
                  "type": "object",
                  "description": "Information about who is sponsoring the user's transaction.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the entity sponsoring the operation."
                    }
                  }
                }
              }
            },
            "entrypointV07Response": {
              "title": "EntryPoint v0.7 Stub Response",
              "type": "object",
              "properties": {
                "paymasterData": {
                  "type": "string",
                  "description": "The data for the paymaster in the operation."
                },
                "sponsor": {
                  "type": "object",
                  "description": "Information about who is sponsoring the user's transaction.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the entity sponsoring the operation."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "examples": [
        {
          "name": "pm_getPaymasterDataStub example",
          "params": [
            {
              "value": {
                "userOperation": {
                  "sender": "0xabcdefabcdefabcdefabcdefabcdefabcdefabcd",
                  "nonce": "0x3",
                  "callData": "0x1234",
                  "callGasLimit": "0x5208",
                  "verificationGasLimit": "0x5208",
                  "preVerificationGas": "0x5208",
                  "maxFeePerGas": "0x1",
                  "maxPriorityFeePerGas": "0x1"
                }
              }
            },
            {
              "value": "0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789"
            },
            {
              "value": "0x1"
            },
            {
              "value": {
                "policyId": "69d524a7-e932-4214-8673-dcdcba31bb42",
                "webhookData": "example context data"
              }
            }
          ],
          "result": {
            "jsonrpc": "2.0",
            "id": 1,
            "result": {
              "entrypointV06Response": {
                "paymasterAndData": "0xabc123",
                "sponsor": {
                  "name": "SponsorName"
                }
              },
              "entrypointV07Response": {
                "paymasterData": "0x789abc",
                "sponsor": {
                  "name": "SponsorName"
                }
              }
            }
          }
        }
      ]
    }
  ]
}
